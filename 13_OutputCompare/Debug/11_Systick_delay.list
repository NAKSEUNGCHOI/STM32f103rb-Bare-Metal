
11_Systick_delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001450  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800155c  0800155c  0001155c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001610  08001610  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001610  08001610  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001610  08001610  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001610  08001610  00011610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001614  08001614  00011614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  08001680  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001680  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001fd6  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b3e  00000000  00000000  00022067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000348  00000000  00000000  00022ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002b0  00000000  00000000  00022ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002427  00000000  00000000  000231a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003d6c  00000000  00000000  000255c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080b7a  00000000  00000000  00029333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a9ead  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000128c  00000000  00000000  000a9f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08001544 	.word	0x08001544

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08001544 	.word	0x08001544

0800014c <main>:
#define PIN5				(1U << 5)
#define LED_PIN				PIN5

uint32_t count = 0;

int main(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

	/*1. Enable clock access to GPIOA*/
	RCC->APB2ENR |= GPIOAEN;
 8000150:	4b19      	ldr	r3, [pc, #100]	; (80001b8 <main+0x6c>)
 8000152:	699b      	ldr	r3, [r3, #24]
 8000154:	4a18      	ldr	r2, [pc, #96]	; (80001b8 <main+0x6c>)
 8000156:	f043 0304 	orr.w	r3, r3, #4
 800015a:	6193      	str	r3, [r2, #24]

	/*2. Set PA5 as output pin*/
	GPIOA->CRL &= ~(1U << 23);
 800015c:	4b17      	ldr	r3, [pc, #92]	; (80001bc <main+0x70>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	4a16      	ldr	r2, [pc, #88]	; (80001bc <main+0x70>)
 8000162:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000166:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 22);
 8000168:	4b14      	ldr	r3, [pc, #80]	; (80001bc <main+0x70>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a13      	ldr	r2, [pc, #76]	; (80001bc <main+0x70>)
 800016e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000172:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 21);
 8000174:	4b11      	ldr	r3, [pc, #68]	; (80001bc <main+0x70>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a10      	ldr	r2, [pc, #64]	; (80001bc <main+0x70>)
 800017a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800017e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 20);
 8000180:	4b0e      	ldr	r3, [pc, #56]	; (80001bc <main+0x70>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a0d      	ldr	r2, [pc, #52]	; (80001bc <main+0x70>)
 8000186:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800018a:	6013      	str	r3, [r2, #0]

	uart2_tx_init();
 800018c:	f000 f926 	bl	80003dc <uart2_tx_init>

	while(1){
		printf("%d. A second passed !! \n\r", (int)count++);
 8000190:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <main+0x74>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	1c5a      	adds	r2, r3, #1
 8000196:	490a      	ldr	r1, [pc, #40]	; (80001c0 <main+0x74>)
 8000198:	600a      	str	r2, [r1, #0]
 800019a:	4619      	mov	r1, r3
 800019c:	4809      	ldr	r0, [pc, #36]	; (80001c4 <main+0x78>)
 800019e:	f000 fa3d 	bl	800061c <iprintf>
		GPIOA->ODR ^= LED_PIN;
 80001a2:	4b06      	ldr	r3, [pc, #24]	; (80001bc <main+0x70>)
 80001a4:	68db      	ldr	r3, [r3, #12]
 80001a6:	4a05      	ldr	r2, [pc, #20]	; (80001bc <main+0x70>)
 80001a8:	f083 0320 	eor.w	r3, r3, #32
 80001ac:	60d3      	str	r3, [r2, #12]
		systickDelayMS(1000);
 80001ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b2:	f000 f8dd 	bl	8000370 <systickDelayMS>
		printf("%d. A second passed !! \n\r", (int)count++);
 80001b6:	e7eb      	b.n	8000190 <main+0x44>
 80001b8:	40021000 	.word	0x40021000
 80001bc:	40010800 	.word	0x40010800
 80001c0:	20000084 	.word	0x20000084
 80001c4:	0800155c 	.word	0x0800155c

080001c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80001cc:	e7fe      	b.n	80001cc <NMI_Handler+0x4>

080001ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001ce:	b480      	push	{r7}
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001d2:	e7fe      	b.n	80001d2 <HardFault_Handler+0x4>

080001d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001d8:	e7fe      	b.n	80001d8 <MemManage_Handler+0x4>

080001da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001da:	b480      	push	{r7}
 80001dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80001de:	e7fe      	b.n	80001de <BusFault_Handler+0x4>

080001e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80001e4:	e7fe      	b.n	80001e4 <UsageFault_Handler+0x4>

080001e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001e6:	b480      	push	{r7}
 80001e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80001ea:	bf00      	nop
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr

080001f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001f2:	b480      	push	{r7}
 80001f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001f6:	bf00      	nop
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr

080001fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001fe:	b480      	push	{r7}
 8000200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000202:	bf00      	nop
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr

0800020a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800020a:	b580      	push	{r7, lr}
 800020c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800020e:	f000 f99f 	bl	8000550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}

08000216 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000216:	b580      	push	{r7, lr}
 8000218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800021a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800021e:	f000 f9a9 	bl	8000574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}

08000226 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000226:	b580      	push	{r7, lr}
 8000228:	b086      	sub	sp, #24
 800022a:	af00      	add	r7, sp, #0
 800022c:	60f8      	str	r0, [r7, #12]
 800022e:	60b9      	str	r1, [r7, #8]
 8000230:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]
 8000236:	e00a      	b.n	800024e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000238:	f3af 8000 	nop.w
 800023c:	4601      	mov	r1, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1c5a      	adds	r2, r3, #1
 8000242:	60ba      	str	r2, [r7, #8]
 8000244:	b2ca      	uxtb	r2, r1
 8000246:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000248:	697b      	ldr	r3, [r7, #20]
 800024a:	3301      	adds	r3, #1
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	697a      	ldr	r2, [r7, #20]
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	429a      	cmp	r2, r3
 8000254:	dbf0      	blt.n	8000238 <_read+0x12>
	}

return len;
 8000256:	687b      	ldr	r3, [r7, #4]
}
 8000258:	4618      	mov	r0, r3
 800025a:	3718      	adds	r7, #24
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800026c:	2300      	movs	r3, #0
 800026e:	617b      	str	r3, [r7, #20]
 8000270:	e009      	b.n	8000286 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	1c5a      	adds	r2, r3, #1
 8000276:	60ba      	str	r2, [r7, #8]
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	4618      	mov	r0, r3
 800027c:	f000 f8a2 	bl	80003c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	3301      	adds	r3, #1
 8000284:	617b      	str	r3, [r7, #20]
 8000286:	697a      	ldr	r2, [r7, #20]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	429a      	cmp	r2, r3
 800028c:	dbf1      	blt.n	8000272 <_write+0x12>
	}
	return len;
 800028e:	687b      	ldr	r3, [r7, #4]
}
 8000290:	4618      	mov	r0, r3
 8000292:	3718      	adds	r7, #24
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <_close>:

int _close(int file)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	return -1;
 80002a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr

080002ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002ae:	b480      	push	{r7}
 80002b0:	b083      	sub	sp, #12
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	6078      	str	r0, [r7, #4]
 80002b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002be:	605a      	str	r2, [r3, #4]
	return 0;
 80002c0:	2300      	movs	r3, #0
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr

080002cc <_isatty>:

int _isatty(int file)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	return 1;
 80002d4:	2301      	movs	r3, #1
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	607a      	str	r2, [r7, #4]
	return 0;
 80002ec:	2300      	movs	r3, #0
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3714      	adds	r7, #20
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b086      	sub	sp, #24
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000300:	4a14      	ldr	r2, [pc, #80]	; (8000354 <_sbrk+0x5c>)
 8000302:	4b15      	ldr	r3, [pc, #84]	; (8000358 <_sbrk+0x60>)
 8000304:	1ad3      	subs	r3, r2, r3
 8000306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800030c:	4b13      	ldr	r3, [pc, #76]	; (800035c <_sbrk+0x64>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d102      	bne.n	800031a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000314:	4b11      	ldr	r3, [pc, #68]	; (800035c <_sbrk+0x64>)
 8000316:	4a12      	ldr	r2, [pc, #72]	; (8000360 <_sbrk+0x68>)
 8000318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800031a:	4b10      	ldr	r3, [pc, #64]	; (800035c <_sbrk+0x64>)
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4413      	add	r3, r2
 8000322:	693a      	ldr	r2, [r7, #16]
 8000324:	429a      	cmp	r2, r3
 8000326:	d207      	bcs.n	8000338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000328:	f000 f946 	bl	80005b8 <__errno>
 800032c:	4603      	mov	r3, r0
 800032e:	220c      	movs	r2, #12
 8000330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000332:	f04f 33ff 	mov.w	r3, #4294967295
 8000336:	e009      	b.n	800034c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <_sbrk+0x64>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800033e:	4b07      	ldr	r3, [pc, #28]	; (800035c <_sbrk+0x64>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4413      	add	r3, r2
 8000346:	4a05      	ldr	r2, [pc, #20]	; (800035c <_sbrk+0x64>)
 8000348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800034a:	68fb      	ldr	r3, [r7, #12]
}
 800034c:	4618      	mov	r0, r3
 800034e:	3718      	adds	r7, #24
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20005000 	.word	0x20005000
 8000358:	00000400 	.word	0x00000400
 800035c:	20000088 	.word	0x20000088
 8000360:	200000a0 	.word	0x200000a0

08000364 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <systickDelayMS>:
#define SYSTICK_LOAD_VAL					8000		//16000 cycle per milli seconds
#define CTRL_ENABLE							(1U << 0)
#define CTRL_CLKSRC							(1U << 2)
#define CTRL_COUNTFLAG						(1U << 16)

void systickDelayMS(int delay){
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]

	/*1. Configure systick*/
	/*Reload with number of clocks per milli-seconds*/
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <systickDelayMS+0x50>)
 800037a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800037e:	605a      	str	r2, [r3, #4]

	/*2. Clear systick current value register */
	SysTick->VAL = 0;
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <systickDelayMS+0x50>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
	/*3. Eanble systick and select internal clk src*/
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <systickDelayMS+0x50>)
 8000388:	2205      	movs	r2, #5
 800038a:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < delay; i++){
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	e009      	b.n	80003a6 <systickDelayMS+0x36>

		/*4. Wait till the COUNTFLAG is set.*/
		while((SysTick->CTRL & CTRL_COUNTFLAG) == 0){}
 8000392:	bf00      	nop
 8000394:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <systickDelayMS+0x50>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0f9      	beq.n	8000394 <systickDelayMS+0x24>
	for(int i = 0; i < delay; i++){
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	3301      	adds	r3, #1
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	dbf1      	blt.n	8000392 <systickDelayMS+0x22>

	}


	SysTick->CTRL = 0;
 80003ae:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <systickDelayMS+0x50>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]

}
 80003b4:	bf00      	nop
 80003b6:	3714      	adds	r7, #20
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	e000e010 	.word	0xe000e010

080003c4 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PheriphClk, uint32_t BaudRate);


void uart2_write(int ch);

int __io_putchar(int ch){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80003cc:	6878      	ldr	r0, [r7, #4]
 80003ce:	f000 f85f 	bl	8000490 <uart2_write>
	return ch;
 80003d2:	687b      	ldr	r3, [r7, #4]
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <uart2_tx_init>:
	/*Configure the transfer direction */
	USART2->CR1 |= CR1_TE | CR1_RE;
	/*Enable uart module */
	USART2->CR1 |= CR1_UE;
}
void uart2_tx_init(void){
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	/********** Configure uart gpio pin **********/
	/*Enable clock access to gpioa */
	RCC->APB2ENR |= GPIOAEN;
 80003e0:	4b27      	ldr	r3, [pc, #156]	; (8000480 <uart2_tx_init+0xa4>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a26      	ldr	r2, [pc, #152]	; (8000480 <uart2_tx_init+0xa4>)
 80003e6:	f043 0304 	orr.w	r3, r3, #4
 80003ea:	6193      	str	r3, [r2, #24]
	/*Set PA2 mode to alternate function mode (TX/PA9, RX/PA10) */
//	AFIO->MAPR = 0x00000000;
//	AFIO->MAPR &= ~(1U << 2);
	GPIOA->CRL &= ~(1U << 15);
 80003ec:	4b25      	ldr	r3, [pc, #148]	; (8000484 <uart2_tx_init+0xa8>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a24      	ldr	r2, [pc, #144]	; (8000484 <uart2_tx_init+0xa8>)
 80003f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80003f6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 14);
 80003f8:	4b22      	ldr	r3, [pc, #136]	; (8000484 <uart2_tx_init+0xa8>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a21      	ldr	r2, [pc, #132]	; (8000484 <uart2_tx_init+0xa8>)
 80003fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000402:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 13);
 8000404:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <uart2_tx_init+0xa8>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a1e      	ldr	r2, [pc, #120]	; (8000484 <uart2_tx_init+0xa8>)
 800040a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800040e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 12);
 8000410:	4b1c      	ldr	r3, [pc, #112]	; (8000484 <uart2_tx_init+0xa8>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a1b      	ldr	r2, [pc, #108]	; (8000484 <uart2_tx_init+0xa8>)
 8000416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800041a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 11);
 800041c:	4b19      	ldr	r3, [pc, #100]	; (8000484 <uart2_tx_init+0xa8>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a18      	ldr	r2, [pc, #96]	; (8000484 <uart2_tx_init+0xa8>)
 8000422:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000426:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 10);
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <uart2_tx_init+0xa8>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a15      	ldr	r2, [pc, #84]	; (8000484 <uart2_tx_init+0xa8>)
 800042e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000432:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 9);
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <uart2_tx_init+0xa8>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a12      	ldr	r2, [pc, #72]	; (8000484 <uart2_tx_init+0xa8>)
 800043a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800043e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 8);
 8000440:	4b10      	ldr	r3, [pc, #64]	; (8000484 <uart2_tx_init+0xa8>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a0f      	ldr	r2, [pc, #60]	; (8000484 <uart2_tx_init+0xa8>)
 8000446:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800044a:	6013      	str	r3, [r2, #0]

	/********** Configure uart module **********/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 800044c:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <uart2_tx_init+0xa4>)
 800044e:	69db      	ldr	r3, [r3, #28]
 8000450:	4a0b      	ldr	r2, [pc, #44]	; (8000480 <uart2_tx_init+0xa4>)
 8000452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000456:	61d3      	str	r3, [r2, #28]
	/*Configure baudrate */
	//USART2->BRR = 0x0EA6;
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800045c:	490a      	ldr	r1, [pc, #40]	; (8000488 <uart2_tx_init+0xac>)
 800045e:	480b      	ldr	r0, [pc, #44]	; (800048c <uart2_tx_init+0xb0>)
 8000460:	f000 f82c 	bl	80004bc <uart_set_baudrate>
	/*Configure the transfer direction */
	USART2->CR1 |= CR1_TE;
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <uart2_tx_init+0xb0>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	4a08      	ldr	r2, [pc, #32]	; (800048c <uart2_tx_init+0xb0>)
 800046a:	f043 0308 	orr.w	r3, r3, #8
 800046e:	60d3      	str	r3, [r2, #12]
	/*Enable uart module */
	USART2->CR1 |= CR1_UE;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <uart2_tx_init+0xb0>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	4a05      	ldr	r2, [pc, #20]	; (800048c <uart2_tx_init+0xb0>)
 8000476:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800047a:	60d3      	str	r3, [r2, #12]
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40021000 	.word	0x40021000
 8000484:	40010800 	.word	0x40010800
 8000488:	007a1200 	.word	0x007a1200
 800048c:	40004400 	.word	0x40004400

08000490 <uart2_write>:
	while(!(USART2->SR & SR_RXNE)){}
	/*Read data*/
	return USART2->DR;
}

void uart2_write(int ch){
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty before sending again*/
	while(!(USART2->SR & SR_TXE)){}
 8000498:	bf00      	nop
 800049a:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <uart2_write+0x28>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d0f9      	beq.n	800049a <uart2_write+0xa>
	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a03      	ldr	r2, [pc, #12]	; (80004b8 <uart2_write+0x28>)
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	6053      	str	r3, [r2, #4]
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	40004400 	.word	0x40004400

080004bc <uart_set_baudrate>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PheriphClk, uint32_t BaudRate){
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PheriphClk, BaudRate);
 80004c8:	6879      	ldr	r1, [r7, #4]
 80004ca:	68b8      	ldr	r0, [r7, #8]
 80004cc:	f000 f808 	bl	80004e0 <compute_uart_bd>
 80004d0:	4603      	mov	r3, r0
 80004d2:	461a      	mov	r2, r3
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	609a      	str	r2, [r3, #8]
}
 80004d8:	bf00      	nop
 80004da:	3710      	adds	r7, #16
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PheriphClk, uint32_t BaudRate){
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
	return ( (PheriphClk + (BaudRate/2U)) / BaudRate);
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	085a      	lsrs	r2, r3, #1
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	441a      	add	r2, r3
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f8:	b29b      	uxth	r3, r3
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000506:	490d      	ldr	r1, [pc, #52]	; (800053c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800050c:	e002      	b.n	8000514 <LoopCopyDataInit>

0800050e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000512:	3304      	adds	r3, #4

08000514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000518:	d3f9      	bcc.n	800050e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800051c:	4c0a      	ldr	r4, [pc, #40]	; (8000548 <LoopFillZerobss+0x22>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000520:	e001      	b.n	8000526 <LoopFillZerobss>

08000522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000524:	3204      	adds	r2, #4

08000526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000528:	d3fb      	bcc.n	8000522 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800052a:	f7ff ff1b 	bl	8000364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800052e:	f000 f849 	bl	80005c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000532:	f7ff fe0b 	bl	800014c <main>
  bx lr
 8000536:	4770      	bx	lr
  ldr r0, =_sdata
 8000538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800053c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000540:	08001618 	.word	0x08001618
  ldr r2, =_sbss
 8000544:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000548:	200000a0 	.word	0x200000a0

0800054c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800054c:	e7fe      	b.n	800054c <ADC1_2_IRQHandler>
	...

08000550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <HAL_IncTick+0x1c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	461a      	mov	r2, r3
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <HAL_IncTick+0x20>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4413      	add	r3, r2
 8000560:	4a03      	ldr	r2, [pc, #12]	; (8000570 <HAL_IncTick+0x20>)
 8000562:	6013      	str	r3, [r2, #0]
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	20000000 	.word	0x20000000
 8000570:	2000008c 	.word	0x2000008c

08000574 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000580:	695a      	ldr	r2, [r3, #20]
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	4013      	ands	r3, r2
 8000586:	2b00      	cmp	r3, #0
 8000588:	d006      	beq.n	8000598 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800058a:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800058c:	88fb      	ldrh	r3, [r7, #6]
 800058e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000590:	88fb      	ldrh	r3, [r7, #6]
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f806 	bl	80005a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40010400 	.word	0x40010400

080005a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <__errno>:
 80005b8:	4b01      	ldr	r3, [pc, #4]	; (80005c0 <__errno+0x8>)
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004

080005c4 <__libc_init_array>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	2600      	movs	r6, #0
 80005c8:	4d0c      	ldr	r5, [pc, #48]	; (80005fc <__libc_init_array+0x38>)
 80005ca:	4c0d      	ldr	r4, [pc, #52]	; (8000600 <__libc_init_array+0x3c>)
 80005cc:	1b64      	subs	r4, r4, r5
 80005ce:	10a4      	asrs	r4, r4, #2
 80005d0:	42a6      	cmp	r6, r4
 80005d2:	d109      	bne.n	80005e8 <__libc_init_array+0x24>
 80005d4:	f000 ffb6 	bl	8001544 <_init>
 80005d8:	2600      	movs	r6, #0
 80005da:	4d0a      	ldr	r5, [pc, #40]	; (8000604 <__libc_init_array+0x40>)
 80005dc:	4c0a      	ldr	r4, [pc, #40]	; (8000608 <__libc_init_array+0x44>)
 80005de:	1b64      	subs	r4, r4, r5
 80005e0:	10a4      	asrs	r4, r4, #2
 80005e2:	42a6      	cmp	r6, r4
 80005e4:	d105      	bne.n	80005f2 <__libc_init_array+0x2e>
 80005e6:	bd70      	pop	{r4, r5, r6, pc}
 80005e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ec:	4798      	blx	r3
 80005ee:	3601      	adds	r6, #1
 80005f0:	e7ee      	b.n	80005d0 <__libc_init_array+0xc>
 80005f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005f6:	4798      	blx	r3
 80005f8:	3601      	adds	r6, #1
 80005fa:	e7f2      	b.n	80005e2 <__libc_init_array+0x1e>
 80005fc:	08001610 	.word	0x08001610
 8000600:	08001610 	.word	0x08001610
 8000604:	08001610 	.word	0x08001610
 8000608:	08001614 	.word	0x08001614

0800060c <memset>:
 800060c:	4603      	mov	r3, r0
 800060e:	4402      	add	r2, r0
 8000610:	4293      	cmp	r3, r2
 8000612:	d100      	bne.n	8000616 <memset+0xa>
 8000614:	4770      	bx	lr
 8000616:	f803 1b01 	strb.w	r1, [r3], #1
 800061a:	e7f9      	b.n	8000610 <memset+0x4>

0800061c <iprintf>:
 800061c:	b40f      	push	{r0, r1, r2, r3}
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <iprintf+0x2c>)
 8000620:	b513      	push	{r0, r1, r4, lr}
 8000622:	681c      	ldr	r4, [r3, #0]
 8000624:	b124      	cbz	r4, 8000630 <iprintf+0x14>
 8000626:	69a3      	ldr	r3, [r4, #24]
 8000628:	b913      	cbnz	r3, 8000630 <iprintf+0x14>
 800062a:	4620      	mov	r0, r4
 800062c:	f000 f866 	bl	80006fc <__sinit>
 8000630:	ab05      	add	r3, sp, #20
 8000632:	4620      	mov	r0, r4
 8000634:	9a04      	ldr	r2, [sp, #16]
 8000636:	68a1      	ldr	r1, [r4, #8]
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	f000 f9bb 	bl	80009b4 <_vfiprintf_r>
 800063e:	b002      	add	sp, #8
 8000640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000644:	b004      	add	sp, #16
 8000646:	4770      	bx	lr
 8000648:	20000004 	.word	0x20000004

0800064c <std>:
 800064c:	2300      	movs	r3, #0
 800064e:	b510      	push	{r4, lr}
 8000650:	4604      	mov	r4, r0
 8000652:	e9c0 3300 	strd	r3, r3, [r0]
 8000656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800065a:	6083      	str	r3, [r0, #8]
 800065c:	8181      	strh	r1, [r0, #12]
 800065e:	6643      	str	r3, [r0, #100]	; 0x64
 8000660:	81c2      	strh	r2, [r0, #14]
 8000662:	6183      	str	r3, [r0, #24]
 8000664:	4619      	mov	r1, r3
 8000666:	2208      	movs	r2, #8
 8000668:	305c      	adds	r0, #92	; 0x5c
 800066a:	f7ff ffcf 	bl	800060c <memset>
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <std+0x38>)
 8000670:	6224      	str	r4, [r4, #32]
 8000672:	6263      	str	r3, [r4, #36]	; 0x24
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <std+0x3c>)
 8000676:	62a3      	str	r3, [r4, #40]	; 0x28
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <std+0x40>)
 800067a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <std+0x44>)
 800067e:	6323      	str	r3, [r4, #48]	; 0x30
 8000680:	bd10      	pop	{r4, pc}
 8000682:	bf00      	nop
 8000684:	08000f61 	.word	0x08000f61
 8000688:	08000f83 	.word	0x08000f83
 800068c:	08000fbb 	.word	0x08000fbb
 8000690:	08000fdf 	.word	0x08000fdf

08000694 <_cleanup_r>:
 8000694:	4901      	ldr	r1, [pc, #4]	; (800069c <_cleanup_r+0x8>)
 8000696:	f000 b8af 	b.w	80007f8 <_fwalk_reent>
 800069a:	bf00      	nop
 800069c:	080012b1 	.word	0x080012b1

080006a0 <__sfmoreglue>:
 80006a0:	2268      	movs	r2, #104	; 0x68
 80006a2:	b570      	push	{r4, r5, r6, lr}
 80006a4:	1e4d      	subs	r5, r1, #1
 80006a6:	4355      	muls	r5, r2
 80006a8:	460e      	mov	r6, r1
 80006aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80006ae:	f000 f8e5 	bl	800087c <_malloc_r>
 80006b2:	4604      	mov	r4, r0
 80006b4:	b140      	cbz	r0, 80006c8 <__sfmoreglue+0x28>
 80006b6:	2100      	movs	r1, #0
 80006b8:	e9c0 1600 	strd	r1, r6, [r0]
 80006bc:	300c      	adds	r0, #12
 80006be:	60a0      	str	r0, [r4, #8]
 80006c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80006c4:	f7ff ffa2 	bl	800060c <memset>
 80006c8:	4620      	mov	r0, r4
 80006ca:	bd70      	pop	{r4, r5, r6, pc}

080006cc <__sfp_lock_acquire>:
 80006cc:	4801      	ldr	r0, [pc, #4]	; (80006d4 <__sfp_lock_acquire+0x8>)
 80006ce:	f000 b8b3 	b.w	8000838 <__retarget_lock_acquire_recursive>
 80006d2:	bf00      	nop
 80006d4:	20000091 	.word	0x20000091

080006d8 <__sfp_lock_release>:
 80006d8:	4801      	ldr	r0, [pc, #4]	; (80006e0 <__sfp_lock_release+0x8>)
 80006da:	f000 b8ae 	b.w	800083a <__retarget_lock_release_recursive>
 80006de:	bf00      	nop
 80006e0:	20000091 	.word	0x20000091

080006e4 <__sinit_lock_acquire>:
 80006e4:	4801      	ldr	r0, [pc, #4]	; (80006ec <__sinit_lock_acquire+0x8>)
 80006e6:	f000 b8a7 	b.w	8000838 <__retarget_lock_acquire_recursive>
 80006ea:	bf00      	nop
 80006ec:	20000092 	.word	0x20000092

080006f0 <__sinit_lock_release>:
 80006f0:	4801      	ldr	r0, [pc, #4]	; (80006f8 <__sinit_lock_release+0x8>)
 80006f2:	f000 b8a2 	b.w	800083a <__retarget_lock_release_recursive>
 80006f6:	bf00      	nop
 80006f8:	20000092 	.word	0x20000092

080006fc <__sinit>:
 80006fc:	b510      	push	{r4, lr}
 80006fe:	4604      	mov	r4, r0
 8000700:	f7ff fff0 	bl	80006e4 <__sinit_lock_acquire>
 8000704:	69a3      	ldr	r3, [r4, #24]
 8000706:	b11b      	cbz	r3, 8000710 <__sinit+0x14>
 8000708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800070c:	f7ff bff0 	b.w	80006f0 <__sinit_lock_release>
 8000710:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000714:	6523      	str	r3, [r4, #80]	; 0x50
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <__sinit+0x68>)
 8000718:	4a13      	ldr	r2, [pc, #76]	; (8000768 <__sinit+0x6c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	62a2      	str	r2, [r4, #40]	; 0x28
 800071e:	42a3      	cmp	r3, r4
 8000720:	bf08      	it	eq
 8000722:	2301      	moveq	r3, #1
 8000724:	4620      	mov	r0, r4
 8000726:	bf08      	it	eq
 8000728:	61a3      	streq	r3, [r4, #24]
 800072a:	f000 f81f 	bl	800076c <__sfp>
 800072e:	6060      	str	r0, [r4, #4]
 8000730:	4620      	mov	r0, r4
 8000732:	f000 f81b 	bl	800076c <__sfp>
 8000736:	60a0      	str	r0, [r4, #8]
 8000738:	4620      	mov	r0, r4
 800073a:	f000 f817 	bl	800076c <__sfp>
 800073e:	2200      	movs	r2, #0
 8000740:	2104      	movs	r1, #4
 8000742:	60e0      	str	r0, [r4, #12]
 8000744:	6860      	ldr	r0, [r4, #4]
 8000746:	f7ff ff81 	bl	800064c <std>
 800074a:	2201      	movs	r2, #1
 800074c:	2109      	movs	r1, #9
 800074e:	68a0      	ldr	r0, [r4, #8]
 8000750:	f7ff ff7c 	bl	800064c <std>
 8000754:	2202      	movs	r2, #2
 8000756:	2112      	movs	r1, #18
 8000758:	68e0      	ldr	r0, [r4, #12]
 800075a:	f7ff ff77 	bl	800064c <std>
 800075e:	2301      	movs	r3, #1
 8000760:	61a3      	str	r3, [r4, #24]
 8000762:	e7d1      	b.n	8000708 <__sinit+0xc>
 8000764:	08001578 	.word	0x08001578
 8000768:	08000695 	.word	0x08000695

0800076c <__sfp>:
 800076c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800076e:	4607      	mov	r7, r0
 8000770:	f7ff ffac 	bl	80006cc <__sfp_lock_acquire>
 8000774:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <__sfp+0x84>)
 8000776:	681e      	ldr	r6, [r3, #0]
 8000778:	69b3      	ldr	r3, [r6, #24]
 800077a:	b913      	cbnz	r3, 8000782 <__sfp+0x16>
 800077c:	4630      	mov	r0, r6
 800077e:	f7ff ffbd 	bl	80006fc <__sinit>
 8000782:	3648      	adds	r6, #72	; 0x48
 8000784:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000788:	3b01      	subs	r3, #1
 800078a:	d503      	bpl.n	8000794 <__sfp+0x28>
 800078c:	6833      	ldr	r3, [r6, #0]
 800078e:	b30b      	cbz	r3, 80007d4 <__sfp+0x68>
 8000790:	6836      	ldr	r6, [r6, #0]
 8000792:	e7f7      	b.n	8000784 <__sfp+0x18>
 8000794:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000798:	b9d5      	cbnz	r5, 80007d0 <__sfp+0x64>
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <__sfp+0x88>)
 800079c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80007a0:	60e3      	str	r3, [r4, #12]
 80007a2:	6665      	str	r5, [r4, #100]	; 0x64
 80007a4:	f000 f847 	bl	8000836 <__retarget_lock_init_recursive>
 80007a8:	f7ff ff96 	bl	80006d8 <__sfp_lock_release>
 80007ac:	2208      	movs	r2, #8
 80007ae:	4629      	mov	r1, r5
 80007b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80007b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80007b8:	6025      	str	r5, [r4, #0]
 80007ba:	61a5      	str	r5, [r4, #24]
 80007bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80007c0:	f7ff ff24 	bl	800060c <memset>
 80007c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80007c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80007cc:	4620      	mov	r0, r4
 80007ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007d0:	3468      	adds	r4, #104	; 0x68
 80007d2:	e7d9      	b.n	8000788 <__sfp+0x1c>
 80007d4:	2104      	movs	r1, #4
 80007d6:	4638      	mov	r0, r7
 80007d8:	f7ff ff62 	bl	80006a0 <__sfmoreglue>
 80007dc:	4604      	mov	r4, r0
 80007de:	6030      	str	r0, [r6, #0]
 80007e0:	2800      	cmp	r0, #0
 80007e2:	d1d5      	bne.n	8000790 <__sfp+0x24>
 80007e4:	f7ff ff78 	bl	80006d8 <__sfp_lock_release>
 80007e8:	230c      	movs	r3, #12
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	e7ee      	b.n	80007cc <__sfp+0x60>
 80007ee:	bf00      	nop
 80007f0:	08001578 	.word	0x08001578
 80007f4:	ffff0001 	.word	0xffff0001

080007f8 <_fwalk_reent>:
 80007f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007fc:	4606      	mov	r6, r0
 80007fe:	4688      	mov	r8, r1
 8000800:	2700      	movs	r7, #0
 8000802:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000806:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800080a:	f1b9 0901 	subs.w	r9, r9, #1
 800080e:	d505      	bpl.n	800081c <_fwalk_reent+0x24>
 8000810:	6824      	ldr	r4, [r4, #0]
 8000812:	2c00      	cmp	r4, #0
 8000814:	d1f7      	bne.n	8000806 <_fwalk_reent+0xe>
 8000816:	4638      	mov	r0, r7
 8000818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800081c:	89ab      	ldrh	r3, [r5, #12]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d907      	bls.n	8000832 <_fwalk_reent+0x3a>
 8000822:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000826:	3301      	adds	r3, #1
 8000828:	d003      	beq.n	8000832 <_fwalk_reent+0x3a>
 800082a:	4629      	mov	r1, r5
 800082c:	4630      	mov	r0, r6
 800082e:	47c0      	blx	r8
 8000830:	4307      	orrs	r7, r0
 8000832:	3568      	adds	r5, #104	; 0x68
 8000834:	e7e9      	b.n	800080a <_fwalk_reent+0x12>

08000836 <__retarget_lock_init_recursive>:
 8000836:	4770      	bx	lr

08000838 <__retarget_lock_acquire_recursive>:
 8000838:	4770      	bx	lr

0800083a <__retarget_lock_release_recursive>:
 800083a:	4770      	bx	lr

0800083c <sbrk_aligned>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	4e0e      	ldr	r6, [pc, #56]	; (8000878 <sbrk_aligned+0x3c>)
 8000840:	460c      	mov	r4, r1
 8000842:	6831      	ldr	r1, [r6, #0]
 8000844:	4605      	mov	r5, r0
 8000846:	b911      	cbnz	r1, 800084e <sbrk_aligned+0x12>
 8000848:	f000 fb7a 	bl	8000f40 <_sbrk_r>
 800084c:	6030      	str	r0, [r6, #0]
 800084e:	4621      	mov	r1, r4
 8000850:	4628      	mov	r0, r5
 8000852:	f000 fb75 	bl	8000f40 <_sbrk_r>
 8000856:	1c43      	adds	r3, r0, #1
 8000858:	d00a      	beq.n	8000870 <sbrk_aligned+0x34>
 800085a:	1cc4      	adds	r4, r0, #3
 800085c:	f024 0403 	bic.w	r4, r4, #3
 8000860:	42a0      	cmp	r0, r4
 8000862:	d007      	beq.n	8000874 <sbrk_aligned+0x38>
 8000864:	1a21      	subs	r1, r4, r0
 8000866:	4628      	mov	r0, r5
 8000868:	f000 fb6a 	bl	8000f40 <_sbrk_r>
 800086c:	3001      	adds	r0, #1
 800086e:	d101      	bne.n	8000874 <sbrk_aligned+0x38>
 8000870:	f04f 34ff 	mov.w	r4, #4294967295
 8000874:	4620      	mov	r0, r4
 8000876:	bd70      	pop	{r4, r5, r6, pc}
 8000878:	20000098 	.word	0x20000098

0800087c <_malloc_r>:
 800087c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000880:	1ccd      	adds	r5, r1, #3
 8000882:	f025 0503 	bic.w	r5, r5, #3
 8000886:	3508      	adds	r5, #8
 8000888:	2d0c      	cmp	r5, #12
 800088a:	bf38      	it	cc
 800088c:	250c      	movcc	r5, #12
 800088e:	2d00      	cmp	r5, #0
 8000890:	4607      	mov	r7, r0
 8000892:	db01      	blt.n	8000898 <_malloc_r+0x1c>
 8000894:	42a9      	cmp	r1, r5
 8000896:	d905      	bls.n	80008a4 <_malloc_r+0x28>
 8000898:	230c      	movs	r3, #12
 800089a:	2600      	movs	r6, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4630      	mov	r0, r6
 80008a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008a4:	4e2e      	ldr	r6, [pc, #184]	; (8000960 <_malloc_r+0xe4>)
 80008a6:	f000 fdc5 	bl	8001434 <__malloc_lock>
 80008aa:	6833      	ldr	r3, [r6, #0]
 80008ac:	461c      	mov	r4, r3
 80008ae:	bb34      	cbnz	r4, 80008fe <_malloc_r+0x82>
 80008b0:	4629      	mov	r1, r5
 80008b2:	4638      	mov	r0, r7
 80008b4:	f7ff ffc2 	bl	800083c <sbrk_aligned>
 80008b8:	1c43      	adds	r3, r0, #1
 80008ba:	4604      	mov	r4, r0
 80008bc:	d14d      	bne.n	800095a <_malloc_r+0xde>
 80008be:	6834      	ldr	r4, [r6, #0]
 80008c0:	4626      	mov	r6, r4
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d140      	bne.n	8000948 <_malloc_r+0xcc>
 80008c6:	6823      	ldr	r3, [r4, #0]
 80008c8:	4631      	mov	r1, r6
 80008ca:	4638      	mov	r0, r7
 80008cc:	eb04 0803 	add.w	r8, r4, r3
 80008d0:	f000 fb36 	bl	8000f40 <_sbrk_r>
 80008d4:	4580      	cmp	r8, r0
 80008d6:	d13a      	bne.n	800094e <_malloc_r+0xd2>
 80008d8:	6821      	ldr	r1, [r4, #0]
 80008da:	3503      	adds	r5, #3
 80008dc:	1a6d      	subs	r5, r5, r1
 80008de:	f025 0503 	bic.w	r5, r5, #3
 80008e2:	3508      	adds	r5, #8
 80008e4:	2d0c      	cmp	r5, #12
 80008e6:	bf38      	it	cc
 80008e8:	250c      	movcc	r5, #12
 80008ea:	4638      	mov	r0, r7
 80008ec:	4629      	mov	r1, r5
 80008ee:	f7ff ffa5 	bl	800083c <sbrk_aligned>
 80008f2:	3001      	adds	r0, #1
 80008f4:	d02b      	beq.n	800094e <_malloc_r+0xd2>
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	442b      	add	r3, r5
 80008fa:	6023      	str	r3, [r4, #0]
 80008fc:	e00e      	b.n	800091c <_malloc_r+0xa0>
 80008fe:	6822      	ldr	r2, [r4, #0]
 8000900:	1b52      	subs	r2, r2, r5
 8000902:	d41e      	bmi.n	8000942 <_malloc_r+0xc6>
 8000904:	2a0b      	cmp	r2, #11
 8000906:	d916      	bls.n	8000936 <_malloc_r+0xba>
 8000908:	1961      	adds	r1, r4, r5
 800090a:	42a3      	cmp	r3, r4
 800090c:	6025      	str	r5, [r4, #0]
 800090e:	bf18      	it	ne
 8000910:	6059      	strne	r1, [r3, #4]
 8000912:	6863      	ldr	r3, [r4, #4]
 8000914:	bf08      	it	eq
 8000916:	6031      	streq	r1, [r6, #0]
 8000918:	5162      	str	r2, [r4, r5]
 800091a:	604b      	str	r3, [r1, #4]
 800091c:	4638      	mov	r0, r7
 800091e:	f104 060b 	add.w	r6, r4, #11
 8000922:	f000 fd8d 	bl	8001440 <__malloc_unlock>
 8000926:	f026 0607 	bic.w	r6, r6, #7
 800092a:	1d23      	adds	r3, r4, #4
 800092c:	1af2      	subs	r2, r6, r3
 800092e:	d0b6      	beq.n	800089e <_malloc_r+0x22>
 8000930:	1b9b      	subs	r3, r3, r6
 8000932:	50a3      	str	r3, [r4, r2]
 8000934:	e7b3      	b.n	800089e <_malloc_r+0x22>
 8000936:	6862      	ldr	r2, [r4, #4]
 8000938:	42a3      	cmp	r3, r4
 800093a:	bf0c      	ite	eq
 800093c:	6032      	streq	r2, [r6, #0]
 800093e:	605a      	strne	r2, [r3, #4]
 8000940:	e7ec      	b.n	800091c <_malloc_r+0xa0>
 8000942:	4623      	mov	r3, r4
 8000944:	6864      	ldr	r4, [r4, #4]
 8000946:	e7b2      	b.n	80008ae <_malloc_r+0x32>
 8000948:	4634      	mov	r4, r6
 800094a:	6876      	ldr	r6, [r6, #4]
 800094c:	e7b9      	b.n	80008c2 <_malloc_r+0x46>
 800094e:	230c      	movs	r3, #12
 8000950:	4638      	mov	r0, r7
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	f000 fd74 	bl	8001440 <__malloc_unlock>
 8000958:	e7a1      	b.n	800089e <_malloc_r+0x22>
 800095a:	6025      	str	r5, [r4, #0]
 800095c:	e7de      	b.n	800091c <_malloc_r+0xa0>
 800095e:	bf00      	nop
 8000960:	20000094 	.word	0x20000094

08000964 <__sfputc_r>:
 8000964:	6893      	ldr	r3, [r2, #8]
 8000966:	b410      	push	{r4}
 8000968:	3b01      	subs	r3, #1
 800096a:	2b00      	cmp	r3, #0
 800096c:	6093      	str	r3, [r2, #8]
 800096e:	da07      	bge.n	8000980 <__sfputc_r+0x1c>
 8000970:	6994      	ldr	r4, [r2, #24]
 8000972:	42a3      	cmp	r3, r4
 8000974:	db01      	blt.n	800097a <__sfputc_r+0x16>
 8000976:	290a      	cmp	r1, #10
 8000978:	d102      	bne.n	8000980 <__sfputc_r+0x1c>
 800097a:	bc10      	pop	{r4}
 800097c:	f000 bb34 	b.w	8000fe8 <__swbuf_r>
 8000980:	6813      	ldr	r3, [r2, #0]
 8000982:	1c58      	adds	r0, r3, #1
 8000984:	6010      	str	r0, [r2, #0]
 8000986:	7019      	strb	r1, [r3, #0]
 8000988:	4608      	mov	r0, r1
 800098a:	bc10      	pop	{r4}
 800098c:	4770      	bx	lr

0800098e <__sfputs_r>:
 800098e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000990:	4606      	mov	r6, r0
 8000992:	460f      	mov	r7, r1
 8000994:	4614      	mov	r4, r2
 8000996:	18d5      	adds	r5, r2, r3
 8000998:	42ac      	cmp	r4, r5
 800099a:	d101      	bne.n	80009a0 <__sfputs_r+0x12>
 800099c:	2000      	movs	r0, #0
 800099e:	e007      	b.n	80009b0 <__sfputs_r+0x22>
 80009a0:	463a      	mov	r2, r7
 80009a2:	4630      	mov	r0, r6
 80009a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009a8:	f7ff ffdc 	bl	8000964 <__sfputc_r>
 80009ac:	1c43      	adds	r3, r0, #1
 80009ae:	d1f3      	bne.n	8000998 <__sfputs_r+0xa>
 80009b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080009b4 <_vfiprintf_r>:
 80009b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009b8:	460d      	mov	r5, r1
 80009ba:	4614      	mov	r4, r2
 80009bc:	4698      	mov	r8, r3
 80009be:	4606      	mov	r6, r0
 80009c0:	b09d      	sub	sp, #116	; 0x74
 80009c2:	b118      	cbz	r0, 80009cc <_vfiprintf_r+0x18>
 80009c4:	6983      	ldr	r3, [r0, #24]
 80009c6:	b90b      	cbnz	r3, 80009cc <_vfiprintf_r+0x18>
 80009c8:	f7ff fe98 	bl	80006fc <__sinit>
 80009cc:	4b89      	ldr	r3, [pc, #548]	; (8000bf4 <_vfiprintf_r+0x240>)
 80009ce:	429d      	cmp	r5, r3
 80009d0:	d11b      	bne.n	8000a0a <_vfiprintf_r+0x56>
 80009d2:	6875      	ldr	r5, [r6, #4]
 80009d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80009d6:	07d9      	lsls	r1, r3, #31
 80009d8:	d405      	bmi.n	80009e6 <_vfiprintf_r+0x32>
 80009da:	89ab      	ldrh	r3, [r5, #12]
 80009dc:	059a      	lsls	r2, r3, #22
 80009de:	d402      	bmi.n	80009e6 <_vfiprintf_r+0x32>
 80009e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80009e2:	f7ff ff29 	bl	8000838 <__retarget_lock_acquire_recursive>
 80009e6:	89ab      	ldrh	r3, [r5, #12]
 80009e8:	071b      	lsls	r3, r3, #28
 80009ea:	d501      	bpl.n	80009f0 <_vfiprintf_r+0x3c>
 80009ec:	692b      	ldr	r3, [r5, #16]
 80009ee:	b9eb      	cbnz	r3, 8000a2c <_vfiprintf_r+0x78>
 80009f0:	4629      	mov	r1, r5
 80009f2:	4630      	mov	r0, r6
 80009f4:	f000 fb5c 	bl	80010b0 <__swsetup_r>
 80009f8:	b1c0      	cbz	r0, 8000a2c <_vfiprintf_r+0x78>
 80009fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80009fc:	07dc      	lsls	r4, r3, #31
 80009fe:	d50e      	bpl.n	8000a1e <_vfiprintf_r+0x6a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	b01d      	add	sp, #116	; 0x74
 8000a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a0a:	4b7b      	ldr	r3, [pc, #492]	; (8000bf8 <_vfiprintf_r+0x244>)
 8000a0c:	429d      	cmp	r5, r3
 8000a0e:	d101      	bne.n	8000a14 <_vfiprintf_r+0x60>
 8000a10:	68b5      	ldr	r5, [r6, #8]
 8000a12:	e7df      	b.n	80009d4 <_vfiprintf_r+0x20>
 8000a14:	4b79      	ldr	r3, [pc, #484]	; (8000bfc <_vfiprintf_r+0x248>)
 8000a16:	429d      	cmp	r5, r3
 8000a18:	bf08      	it	eq
 8000a1a:	68f5      	ldreq	r5, [r6, #12]
 8000a1c:	e7da      	b.n	80009d4 <_vfiprintf_r+0x20>
 8000a1e:	89ab      	ldrh	r3, [r5, #12]
 8000a20:	0598      	lsls	r0, r3, #22
 8000a22:	d4ed      	bmi.n	8000a00 <_vfiprintf_r+0x4c>
 8000a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a26:	f7ff ff08 	bl	800083a <__retarget_lock_release_recursive>
 8000a2a:	e7e9      	b.n	8000a00 <_vfiprintf_r+0x4c>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8000a30:	2320      	movs	r3, #32
 8000a32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000a36:	2330      	movs	r3, #48	; 0x30
 8000a38:	f04f 0901 	mov.w	r9, #1
 8000a3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a40:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000c00 <_vfiprintf_r+0x24c>
 8000a44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a48:	4623      	mov	r3, r4
 8000a4a:	469a      	mov	sl, r3
 8000a4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a50:	b10a      	cbz	r2, 8000a56 <_vfiprintf_r+0xa2>
 8000a52:	2a25      	cmp	r2, #37	; 0x25
 8000a54:	d1f9      	bne.n	8000a4a <_vfiprintf_r+0x96>
 8000a56:	ebba 0b04 	subs.w	fp, sl, r4
 8000a5a:	d00b      	beq.n	8000a74 <_vfiprintf_r+0xc0>
 8000a5c:	465b      	mov	r3, fp
 8000a5e:	4622      	mov	r2, r4
 8000a60:	4629      	mov	r1, r5
 8000a62:	4630      	mov	r0, r6
 8000a64:	f7ff ff93 	bl	800098e <__sfputs_r>
 8000a68:	3001      	adds	r0, #1
 8000a6a:	f000 80aa 	beq.w	8000bc2 <_vfiprintf_r+0x20e>
 8000a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000a70:	445a      	add	r2, fp
 8000a72:	9209      	str	r2, [sp, #36]	; 0x24
 8000a74:	f89a 3000 	ldrb.w	r3, [sl]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	f000 80a2 	beq.w	8000bc2 <_vfiprintf_r+0x20e>
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f04f 32ff 	mov.w	r2, #4294967295
 8000a84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a88:	f10a 0a01 	add.w	sl, sl, #1
 8000a8c:	9304      	str	r3, [sp, #16]
 8000a8e:	9307      	str	r3, [sp, #28]
 8000a90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000a94:	931a      	str	r3, [sp, #104]	; 0x68
 8000a96:	4654      	mov	r4, sl
 8000a98:	2205      	movs	r2, #5
 8000a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a9e:	4858      	ldr	r0, [pc, #352]	; (8000c00 <_vfiprintf_r+0x24c>)
 8000aa0:	f000 fcba 	bl	8001418 <memchr>
 8000aa4:	9a04      	ldr	r2, [sp, #16]
 8000aa6:	b9d8      	cbnz	r0, 8000ae0 <_vfiprintf_r+0x12c>
 8000aa8:	06d1      	lsls	r1, r2, #27
 8000aaa:	bf44      	itt	mi
 8000aac:	2320      	movmi	r3, #32
 8000aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ab2:	0713      	lsls	r3, r2, #28
 8000ab4:	bf44      	itt	mi
 8000ab6:	232b      	movmi	r3, #43	; 0x2b
 8000ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000abc:	f89a 3000 	ldrb.w	r3, [sl]
 8000ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8000ac2:	d015      	beq.n	8000af0 <_vfiprintf_r+0x13c>
 8000ac4:	4654      	mov	r4, sl
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f04f 0c0a 	mov.w	ip, #10
 8000acc:	9a07      	ldr	r2, [sp, #28]
 8000ace:	4621      	mov	r1, r4
 8000ad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ad4:	3b30      	subs	r3, #48	; 0x30
 8000ad6:	2b09      	cmp	r3, #9
 8000ad8:	d94e      	bls.n	8000b78 <_vfiprintf_r+0x1c4>
 8000ada:	b1b0      	cbz	r0, 8000b0a <_vfiprintf_r+0x156>
 8000adc:	9207      	str	r2, [sp, #28]
 8000ade:	e014      	b.n	8000b0a <_vfiprintf_r+0x156>
 8000ae0:	eba0 0308 	sub.w	r3, r0, r8
 8000ae4:	fa09 f303 	lsl.w	r3, r9, r3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	46a2      	mov	sl, r4
 8000aec:	9304      	str	r3, [sp, #16]
 8000aee:	e7d2      	b.n	8000a96 <_vfiprintf_r+0xe2>
 8000af0:	9b03      	ldr	r3, [sp, #12]
 8000af2:	1d19      	adds	r1, r3, #4
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	9103      	str	r1, [sp, #12]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	bfbb      	ittet	lt
 8000afc:	425b      	neglt	r3, r3
 8000afe:	f042 0202 	orrlt.w	r2, r2, #2
 8000b02:	9307      	strge	r3, [sp, #28]
 8000b04:	9307      	strlt	r3, [sp, #28]
 8000b06:	bfb8      	it	lt
 8000b08:	9204      	strlt	r2, [sp, #16]
 8000b0a:	7823      	ldrb	r3, [r4, #0]
 8000b0c:	2b2e      	cmp	r3, #46	; 0x2e
 8000b0e:	d10c      	bne.n	8000b2a <_vfiprintf_r+0x176>
 8000b10:	7863      	ldrb	r3, [r4, #1]
 8000b12:	2b2a      	cmp	r3, #42	; 0x2a
 8000b14:	d135      	bne.n	8000b82 <_vfiprintf_r+0x1ce>
 8000b16:	9b03      	ldr	r3, [sp, #12]
 8000b18:	3402      	adds	r4, #2
 8000b1a:	1d1a      	adds	r2, r3, #4
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	9203      	str	r2, [sp, #12]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	bfb8      	it	lt
 8000b24:	f04f 33ff 	movlt.w	r3, #4294967295
 8000b28:	9305      	str	r3, [sp, #20]
 8000b2a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8000c04 <_vfiprintf_r+0x250>
 8000b2e:	2203      	movs	r2, #3
 8000b30:	4650      	mov	r0, sl
 8000b32:	7821      	ldrb	r1, [r4, #0]
 8000b34:	f000 fc70 	bl	8001418 <memchr>
 8000b38:	b140      	cbz	r0, 8000b4c <_vfiprintf_r+0x198>
 8000b3a:	2340      	movs	r3, #64	; 0x40
 8000b3c:	eba0 000a 	sub.w	r0, r0, sl
 8000b40:	fa03 f000 	lsl.w	r0, r3, r0
 8000b44:	9b04      	ldr	r3, [sp, #16]
 8000b46:	3401      	adds	r4, #1
 8000b48:	4303      	orrs	r3, r0
 8000b4a:	9304      	str	r3, [sp, #16]
 8000b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b50:	2206      	movs	r2, #6
 8000b52:	482d      	ldr	r0, [pc, #180]	; (8000c08 <_vfiprintf_r+0x254>)
 8000b54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000b58:	f000 fc5e 	bl	8001418 <memchr>
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	d03f      	beq.n	8000be0 <_vfiprintf_r+0x22c>
 8000b60:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <_vfiprintf_r+0x258>)
 8000b62:	bb1b      	cbnz	r3, 8000bac <_vfiprintf_r+0x1f8>
 8000b64:	9b03      	ldr	r3, [sp, #12]
 8000b66:	3307      	adds	r3, #7
 8000b68:	f023 0307 	bic.w	r3, r3, #7
 8000b6c:	3308      	adds	r3, #8
 8000b6e:	9303      	str	r3, [sp, #12]
 8000b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b72:	443b      	add	r3, r7
 8000b74:	9309      	str	r3, [sp, #36]	; 0x24
 8000b76:	e767      	b.n	8000a48 <_vfiprintf_r+0x94>
 8000b78:	460c      	mov	r4, r1
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b80:	e7a5      	b.n	8000ace <_vfiprintf_r+0x11a>
 8000b82:	2300      	movs	r3, #0
 8000b84:	f04f 0c0a 	mov.w	ip, #10
 8000b88:	4619      	mov	r1, r3
 8000b8a:	3401      	adds	r4, #1
 8000b8c:	9305      	str	r3, [sp, #20]
 8000b8e:	4620      	mov	r0, r4
 8000b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b94:	3a30      	subs	r2, #48	; 0x30
 8000b96:	2a09      	cmp	r2, #9
 8000b98:	d903      	bls.n	8000ba2 <_vfiprintf_r+0x1ee>
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d0c5      	beq.n	8000b2a <_vfiprintf_r+0x176>
 8000b9e:	9105      	str	r1, [sp, #20]
 8000ba0:	e7c3      	b.n	8000b2a <_vfiprintf_r+0x176>
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	fb0c 2101 	mla	r1, ip, r1, r2
 8000baa:	e7f0      	b.n	8000b8e <_vfiprintf_r+0x1da>
 8000bac:	ab03      	add	r3, sp, #12
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	462a      	mov	r2, r5
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <_vfiprintf_r+0x25c>)
 8000bb6:	a904      	add	r1, sp, #16
 8000bb8:	f3af 8000 	nop.w
 8000bbc:	4607      	mov	r7, r0
 8000bbe:	1c78      	adds	r0, r7, #1
 8000bc0:	d1d6      	bne.n	8000b70 <_vfiprintf_r+0x1bc>
 8000bc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bc4:	07d9      	lsls	r1, r3, #31
 8000bc6:	d405      	bmi.n	8000bd4 <_vfiprintf_r+0x220>
 8000bc8:	89ab      	ldrh	r3, [r5, #12]
 8000bca:	059a      	lsls	r2, r3, #22
 8000bcc:	d402      	bmi.n	8000bd4 <_vfiprintf_r+0x220>
 8000bce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bd0:	f7ff fe33 	bl	800083a <__retarget_lock_release_recursive>
 8000bd4:	89ab      	ldrh	r3, [r5, #12]
 8000bd6:	065b      	lsls	r3, r3, #25
 8000bd8:	f53f af12 	bmi.w	8000a00 <_vfiprintf_r+0x4c>
 8000bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000bde:	e711      	b.n	8000a04 <_vfiprintf_r+0x50>
 8000be0:	ab03      	add	r3, sp, #12
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	462a      	mov	r2, r5
 8000be6:	4630      	mov	r0, r6
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <_vfiprintf_r+0x25c>)
 8000bea:	a904      	add	r1, sp, #16
 8000bec:	f000 f882 	bl	8000cf4 <_printf_i>
 8000bf0:	e7e4      	b.n	8000bbc <_vfiprintf_r+0x208>
 8000bf2:	bf00      	nop
 8000bf4:	0800159c 	.word	0x0800159c
 8000bf8:	080015bc 	.word	0x080015bc
 8000bfc:	0800157c 	.word	0x0800157c
 8000c00:	080015dc 	.word	0x080015dc
 8000c04:	080015e2 	.word	0x080015e2
 8000c08:	080015e6 	.word	0x080015e6
 8000c0c:	00000000 	.word	0x00000000
 8000c10:	0800098f 	.word	0x0800098f

08000c14 <_printf_common>:
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	4616      	mov	r6, r2
 8000c1a:	4699      	mov	r9, r3
 8000c1c:	688a      	ldr	r2, [r1, #8]
 8000c1e:	690b      	ldr	r3, [r1, #16]
 8000c20:	4607      	mov	r7, r0
 8000c22:	4293      	cmp	r3, r2
 8000c24:	bfb8      	it	lt
 8000c26:	4613      	movlt	r3, r2
 8000c28:	6033      	str	r3, [r6, #0]
 8000c2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c2e:	460c      	mov	r4, r1
 8000c30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c34:	b10a      	cbz	r2, 8000c3a <_printf_common+0x26>
 8000c36:	3301      	adds	r3, #1
 8000c38:	6033      	str	r3, [r6, #0]
 8000c3a:	6823      	ldr	r3, [r4, #0]
 8000c3c:	0699      	lsls	r1, r3, #26
 8000c3e:	bf42      	ittt	mi
 8000c40:	6833      	ldrmi	r3, [r6, #0]
 8000c42:	3302      	addmi	r3, #2
 8000c44:	6033      	strmi	r3, [r6, #0]
 8000c46:	6825      	ldr	r5, [r4, #0]
 8000c48:	f015 0506 	ands.w	r5, r5, #6
 8000c4c:	d106      	bne.n	8000c5c <_printf_common+0x48>
 8000c4e:	f104 0a19 	add.w	sl, r4, #25
 8000c52:	68e3      	ldr	r3, [r4, #12]
 8000c54:	6832      	ldr	r2, [r6, #0]
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	42ab      	cmp	r3, r5
 8000c5a:	dc28      	bgt.n	8000cae <_printf_common+0x9a>
 8000c5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000c60:	1e13      	subs	r3, r2, #0
 8000c62:	6822      	ldr	r2, [r4, #0]
 8000c64:	bf18      	it	ne
 8000c66:	2301      	movne	r3, #1
 8000c68:	0692      	lsls	r2, r2, #26
 8000c6a:	d42d      	bmi.n	8000cc8 <_printf_common+0xb4>
 8000c6c:	4649      	mov	r1, r9
 8000c6e:	4638      	mov	r0, r7
 8000c70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c74:	47c0      	blx	r8
 8000c76:	3001      	adds	r0, #1
 8000c78:	d020      	beq.n	8000cbc <_printf_common+0xa8>
 8000c7a:	6823      	ldr	r3, [r4, #0]
 8000c7c:	68e5      	ldr	r5, [r4, #12]
 8000c7e:	f003 0306 	and.w	r3, r3, #6
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf18      	it	ne
 8000c86:	2500      	movne	r5, #0
 8000c88:	6832      	ldr	r2, [r6, #0]
 8000c8a:	f04f 0600 	mov.w	r6, #0
 8000c8e:	68a3      	ldr	r3, [r4, #8]
 8000c90:	bf08      	it	eq
 8000c92:	1aad      	subeq	r5, r5, r2
 8000c94:	6922      	ldr	r2, [r4, #16]
 8000c96:	bf08      	it	eq
 8000c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	bfc4      	itt	gt
 8000ca0:	1a9b      	subgt	r3, r3, r2
 8000ca2:	18ed      	addgt	r5, r5, r3
 8000ca4:	341a      	adds	r4, #26
 8000ca6:	42b5      	cmp	r5, r6
 8000ca8:	d11a      	bne.n	8000ce0 <_printf_common+0xcc>
 8000caa:	2000      	movs	r0, #0
 8000cac:	e008      	b.n	8000cc0 <_printf_common+0xac>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	4652      	mov	r2, sl
 8000cb2:	4649      	mov	r1, r9
 8000cb4:	4638      	mov	r0, r7
 8000cb6:	47c0      	blx	r8
 8000cb8:	3001      	adds	r0, #1
 8000cba:	d103      	bne.n	8000cc4 <_printf_common+0xb0>
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	3501      	adds	r5, #1
 8000cc6:	e7c4      	b.n	8000c52 <_printf_common+0x3e>
 8000cc8:	2030      	movs	r0, #48	; 0x30
 8000cca:	18e1      	adds	r1, r4, r3
 8000ccc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000cd0:	1c5a      	adds	r2, r3, #1
 8000cd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000cd6:	4422      	add	r2, r4
 8000cd8:	3302      	adds	r3, #2
 8000cda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000cde:	e7c5      	b.n	8000c6c <_printf_common+0x58>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	4622      	mov	r2, r4
 8000ce4:	4649      	mov	r1, r9
 8000ce6:	4638      	mov	r0, r7
 8000ce8:	47c0      	blx	r8
 8000cea:	3001      	adds	r0, #1
 8000cec:	d0e6      	beq.n	8000cbc <_printf_common+0xa8>
 8000cee:	3601      	adds	r6, #1
 8000cf0:	e7d9      	b.n	8000ca6 <_printf_common+0x92>
	...

08000cf4 <_printf_i>:
 8000cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf8:	7e0f      	ldrb	r7, [r1, #24]
 8000cfa:	4691      	mov	r9, r2
 8000cfc:	2f78      	cmp	r7, #120	; 0x78
 8000cfe:	4680      	mov	r8, r0
 8000d00:	460c      	mov	r4, r1
 8000d02:	469a      	mov	sl, r3
 8000d04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000d0a:	d807      	bhi.n	8000d1c <_printf_i+0x28>
 8000d0c:	2f62      	cmp	r7, #98	; 0x62
 8000d0e:	d80a      	bhi.n	8000d26 <_printf_i+0x32>
 8000d10:	2f00      	cmp	r7, #0
 8000d12:	f000 80d9 	beq.w	8000ec8 <_printf_i+0x1d4>
 8000d16:	2f58      	cmp	r7, #88	; 0x58
 8000d18:	f000 80a4 	beq.w	8000e64 <_printf_i+0x170>
 8000d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d24:	e03a      	b.n	8000d9c <_printf_i+0xa8>
 8000d26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d2a:	2b15      	cmp	r3, #21
 8000d2c:	d8f6      	bhi.n	8000d1c <_printf_i+0x28>
 8000d2e:	a101      	add	r1, pc, #4	; (adr r1, 8000d34 <_printf_i+0x40>)
 8000d30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d34:	08000d8d 	.word	0x08000d8d
 8000d38:	08000da1 	.word	0x08000da1
 8000d3c:	08000d1d 	.word	0x08000d1d
 8000d40:	08000d1d 	.word	0x08000d1d
 8000d44:	08000d1d 	.word	0x08000d1d
 8000d48:	08000d1d 	.word	0x08000d1d
 8000d4c:	08000da1 	.word	0x08000da1
 8000d50:	08000d1d 	.word	0x08000d1d
 8000d54:	08000d1d 	.word	0x08000d1d
 8000d58:	08000d1d 	.word	0x08000d1d
 8000d5c:	08000d1d 	.word	0x08000d1d
 8000d60:	08000eaf 	.word	0x08000eaf
 8000d64:	08000dd1 	.word	0x08000dd1
 8000d68:	08000e91 	.word	0x08000e91
 8000d6c:	08000d1d 	.word	0x08000d1d
 8000d70:	08000d1d 	.word	0x08000d1d
 8000d74:	08000ed1 	.word	0x08000ed1
 8000d78:	08000d1d 	.word	0x08000d1d
 8000d7c:	08000dd1 	.word	0x08000dd1
 8000d80:	08000d1d 	.word	0x08000d1d
 8000d84:	08000d1d 	.word	0x08000d1d
 8000d88:	08000e99 	.word	0x08000e99
 8000d8c:	682b      	ldr	r3, [r5, #0]
 8000d8e:	1d1a      	adds	r2, r3, #4
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	602a      	str	r2, [r5, #0]
 8000d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e0a4      	b.n	8000eea <_printf_i+0x1f6>
 8000da0:	6820      	ldr	r0, [r4, #0]
 8000da2:	6829      	ldr	r1, [r5, #0]
 8000da4:	0606      	lsls	r6, r0, #24
 8000da6:	f101 0304 	add.w	r3, r1, #4
 8000daa:	d50a      	bpl.n	8000dc2 <_printf_i+0xce>
 8000dac:	680e      	ldr	r6, [r1, #0]
 8000dae:	602b      	str	r3, [r5, #0]
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	da03      	bge.n	8000dbc <_printf_i+0xc8>
 8000db4:	232d      	movs	r3, #45	; 0x2d
 8000db6:	4276      	negs	r6, r6
 8000db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000dbc:	230a      	movs	r3, #10
 8000dbe:	485e      	ldr	r0, [pc, #376]	; (8000f38 <_printf_i+0x244>)
 8000dc0:	e019      	b.n	8000df6 <_printf_i+0x102>
 8000dc2:	680e      	ldr	r6, [r1, #0]
 8000dc4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000dc8:	602b      	str	r3, [r5, #0]
 8000dca:	bf18      	it	ne
 8000dcc:	b236      	sxthne	r6, r6
 8000dce:	e7ef      	b.n	8000db0 <_printf_i+0xbc>
 8000dd0:	682b      	ldr	r3, [r5, #0]
 8000dd2:	6820      	ldr	r0, [r4, #0]
 8000dd4:	1d19      	adds	r1, r3, #4
 8000dd6:	6029      	str	r1, [r5, #0]
 8000dd8:	0601      	lsls	r1, r0, #24
 8000dda:	d501      	bpl.n	8000de0 <_printf_i+0xec>
 8000ddc:	681e      	ldr	r6, [r3, #0]
 8000dde:	e002      	b.n	8000de6 <_printf_i+0xf2>
 8000de0:	0646      	lsls	r6, r0, #25
 8000de2:	d5fb      	bpl.n	8000ddc <_printf_i+0xe8>
 8000de4:	881e      	ldrh	r6, [r3, #0]
 8000de6:	2f6f      	cmp	r7, #111	; 0x6f
 8000de8:	bf0c      	ite	eq
 8000dea:	2308      	moveq	r3, #8
 8000dec:	230a      	movne	r3, #10
 8000dee:	4852      	ldr	r0, [pc, #328]	; (8000f38 <_printf_i+0x244>)
 8000df0:	2100      	movs	r1, #0
 8000df2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000df6:	6865      	ldr	r5, [r4, #4]
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	bfa8      	it	ge
 8000dfc:	6821      	ldrge	r1, [r4, #0]
 8000dfe:	60a5      	str	r5, [r4, #8]
 8000e00:	bfa4      	itt	ge
 8000e02:	f021 0104 	bicge.w	r1, r1, #4
 8000e06:	6021      	strge	r1, [r4, #0]
 8000e08:	b90e      	cbnz	r6, 8000e0e <_printf_i+0x11a>
 8000e0a:	2d00      	cmp	r5, #0
 8000e0c:	d04d      	beq.n	8000eaa <_printf_i+0x1b6>
 8000e0e:	4615      	mov	r5, r2
 8000e10:	fbb6 f1f3 	udiv	r1, r6, r3
 8000e14:	fb03 6711 	mls	r7, r3, r1, r6
 8000e18:	5dc7      	ldrb	r7, [r0, r7]
 8000e1a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000e1e:	4637      	mov	r7, r6
 8000e20:	42bb      	cmp	r3, r7
 8000e22:	460e      	mov	r6, r1
 8000e24:	d9f4      	bls.n	8000e10 <_printf_i+0x11c>
 8000e26:	2b08      	cmp	r3, #8
 8000e28:	d10b      	bne.n	8000e42 <_printf_i+0x14e>
 8000e2a:	6823      	ldr	r3, [r4, #0]
 8000e2c:	07de      	lsls	r6, r3, #31
 8000e2e:	d508      	bpl.n	8000e42 <_printf_i+0x14e>
 8000e30:	6923      	ldr	r3, [r4, #16]
 8000e32:	6861      	ldr	r1, [r4, #4]
 8000e34:	4299      	cmp	r1, r3
 8000e36:	bfde      	ittt	le
 8000e38:	2330      	movle	r3, #48	; 0x30
 8000e3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000e3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000e42:	1b52      	subs	r2, r2, r5
 8000e44:	6122      	str	r2, [r4, #16]
 8000e46:	464b      	mov	r3, r9
 8000e48:	4621      	mov	r1, r4
 8000e4a:	4640      	mov	r0, r8
 8000e4c:	f8cd a000 	str.w	sl, [sp]
 8000e50:	aa03      	add	r2, sp, #12
 8000e52:	f7ff fedf 	bl	8000c14 <_printf_common>
 8000e56:	3001      	adds	r0, #1
 8000e58:	d14c      	bne.n	8000ef4 <_printf_i+0x200>
 8000e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5e:	b004      	add	sp, #16
 8000e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e64:	4834      	ldr	r0, [pc, #208]	; (8000f38 <_printf_i+0x244>)
 8000e66:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000e6a:	6829      	ldr	r1, [r5, #0]
 8000e6c:	6823      	ldr	r3, [r4, #0]
 8000e6e:	f851 6b04 	ldr.w	r6, [r1], #4
 8000e72:	6029      	str	r1, [r5, #0]
 8000e74:	061d      	lsls	r5, r3, #24
 8000e76:	d514      	bpl.n	8000ea2 <_printf_i+0x1ae>
 8000e78:	07df      	lsls	r7, r3, #31
 8000e7a:	bf44      	itt	mi
 8000e7c:	f043 0320 	orrmi.w	r3, r3, #32
 8000e80:	6023      	strmi	r3, [r4, #0]
 8000e82:	b91e      	cbnz	r6, 8000e8c <_printf_i+0x198>
 8000e84:	6823      	ldr	r3, [r4, #0]
 8000e86:	f023 0320 	bic.w	r3, r3, #32
 8000e8a:	6023      	str	r3, [r4, #0]
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	e7af      	b.n	8000df0 <_printf_i+0xfc>
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	f043 0320 	orr.w	r3, r3, #32
 8000e96:	6023      	str	r3, [r4, #0]
 8000e98:	2378      	movs	r3, #120	; 0x78
 8000e9a:	4828      	ldr	r0, [pc, #160]	; (8000f3c <_printf_i+0x248>)
 8000e9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000ea0:	e7e3      	b.n	8000e6a <_printf_i+0x176>
 8000ea2:	0659      	lsls	r1, r3, #25
 8000ea4:	bf48      	it	mi
 8000ea6:	b2b6      	uxthmi	r6, r6
 8000ea8:	e7e6      	b.n	8000e78 <_printf_i+0x184>
 8000eaa:	4615      	mov	r5, r2
 8000eac:	e7bb      	b.n	8000e26 <_printf_i+0x132>
 8000eae:	682b      	ldr	r3, [r5, #0]
 8000eb0:	6826      	ldr	r6, [r4, #0]
 8000eb2:	1d18      	adds	r0, r3, #4
 8000eb4:	6961      	ldr	r1, [r4, #20]
 8000eb6:	6028      	str	r0, [r5, #0]
 8000eb8:	0635      	lsls	r5, r6, #24
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	d501      	bpl.n	8000ec2 <_printf_i+0x1ce>
 8000ebe:	6019      	str	r1, [r3, #0]
 8000ec0:	e002      	b.n	8000ec8 <_printf_i+0x1d4>
 8000ec2:	0670      	lsls	r0, r6, #25
 8000ec4:	d5fb      	bpl.n	8000ebe <_printf_i+0x1ca>
 8000ec6:	8019      	strh	r1, [r3, #0]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4615      	mov	r5, r2
 8000ecc:	6123      	str	r3, [r4, #16]
 8000ece:	e7ba      	b.n	8000e46 <_printf_i+0x152>
 8000ed0:	682b      	ldr	r3, [r5, #0]
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	1d1a      	adds	r2, r3, #4
 8000ed6:	602a      	str	r2, [r5, #0]
 8000ed8:	681d      	ldr	r5, [r3, #0]
 8000eda:	6862      	ldr	r2, [r4, #4]
 8000edc:	4628      	mov	r0, r5
 8000ede:	f000 fa9b 	bl	8001418 <memchr>
 8000ee2:	b108      	cbz	r0, 8000ee8 <_printf_i+0x1f4>
 8000ee4:	1b40      	subs	r0, r0, r5
 8000ee6:	6060      	str	r0, [r4, #4]
 8000ee8:	6863      	ldr	r3, [r4, #4]
 8000eea:	6123      	str	r3, [r4, #16]
 8000eec:	2300      	movs	r3, #0
 8000eee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ef2:	e7a8      	b.n	8000e46 <_printf_i+0x152>
 8000ef4:	462a      	mov	r2, r5
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	4640      	mov	r0, r8
 8000efa:	6923      	ldr	r3, [r4, #16]
 8000efc:	47d0      	blx	sl
 8000efe:	3001      	adds	r0, #1
 8000f00:	d0ab      	beq.n	8000e5a <_printf_i+0x166>
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	079b      	lsls	r3, r3, #30
 8000f06:	d413      	bmi.n	8000f30 <_printf_i+0x23c>
 8000f08:	68e0      	ldr	r0, [r4, #12]
 8000f0a:	9b03      	ldr	r3, [sp, #12]
 8000f0c:	4298      	cmp	r0, r3
 8000f0e:	bfb8      	it	lt
 8000f10:	4618      	movlt	r0, r3
 8000f12:	e7a4      	b.n	8000e5e <_printf_i+0x16a>
 8000f14:	2301      	movs	r3, #1
 8000f16:	4632      	mov	r2, r6
 8000f18:	4649      	mov	r1, r9
 8000f1a:	4640      	mov	r0, r8
 8000f1c:	47d0      	blx	sl
 8000f1e:	3001      	adds	r0, #1
 8000f20:	d09b      	beq.n	8000e5a <_printf_i+0x166>
 8000f22:	3501      	adds	r5, #1
 8000f24:	68e3      	ldr	r3, [r4, #12]
 8000f26:	9903      	ldr	r1, [sp, #12]
 8000f28:	1a5b      	subs	r3, r3, r1
 8000f2a:	42ab      	cmp	r3, r5
 8000f2c:	dcf2      	bgt.n	8000f14 <_printf_i+0x220>
 8000f2e:	e7eb      	b.n	8000f08 <_printf_i+0x214>
 8000f30:	2500      	movs	r5, #0
 8000f32:	f104 0619 	add.w	r6, r4, #25
 8000f36:	e7f5      	b.n	8000f24 <_printf_i+0x230>
 8000f38:	080015ed 	.word	0x080015ed
 8000f3c:	080015fe 	.word	0x080015fe

08000f40 <_sbrk_r>:
 8000f40:	b538      	push	{r3, r4, r5, lr}
 8000f42:	2300      	movs	r3, #0
 8000f44:	4d05      	ldr	r5, [pc, #20]	; (8000f5c <_sbrk_r+0x1c>)
 8000f46:	4604      	mov	r4, r0
 8000f48:	4608      	mov	r0, r1
 8000f4a:	602b      	str	r3, [r5, #0]
 8000f4c:	f7ff f9d4 	bl	80002f8 <_sbrk>
 8000f50:	1c43      	adds	r3, r0, #1
 8000f52:	d102      	bne.n	8000f5a <_sbrk_r+0x1a>
 8000f54:	682b      	ldr	r3, [r5, #0]
 8000f56:	b103      	cbz	r3, 8000f5a <_sbrk_r+0x1a>
 8000f58:	6023      	str	r3, [r4, #0]
 8000f5a:	bd38      	pop	{r3, r4, r5, pc}
 8000f5c:	2000009c 	.word	0x2000009c

08000f60 <__sread>:
 8000f60:	b510      	push	{r4, lr}
 8000f62:	460c      	mov	r4, r1
 8000f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f68:	f000 fab8 	bl	80014dc <_read_r>
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	bfab      	itete	ge
 8000f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f72:	89a3      	ldrhlt	r3, [r4, #12]
 8000f74:	181b      	addge	r3, r3, r0
 8000f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f7a:	bfac      	ite	ge
 8000f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f7e:	81a3      	strhlt	r3, [r4, #12]
 8000f80:	bd10      	pop	{r4, pc}

08000f82 <__swrite>:
 8000f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f86:	461f      	mov	r7, r3
 8000f88:	898b      	ldrh	r3, [r1, #12]
 8000f8a:	4605      	mov	r5, r0
 8000f8c:	05db      	lsls	r3, r3, #23
 8000f8e:	460c      	mov	r4, r1
 8000f90:	4616      	mov	r6, r2
 8000f92:	d505      	bpl.n	8000fa0 <__swrite+0x1e>
 8000f94:	2302      	movs	r3, #2
 8000f96:	2200      	movs	r2, #0
 8000f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f9c:	f000 f9c4 	bl	8001328 <_lseek_r>
 8000fa0:	89a3      	ldrh	r3, [r4, #12]
 8000fa2:	4632      	mov	r2, r6
 8000fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fa8:	81a3      	strh	r3, [r4, #12]
 8000faa:	4628      	mov	r0, r5
 8000fac:	463b      	mov	r3, r7
 8000fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fb6:	f000 b869 	b.w	800108c <_write_r>

08000fba <__sseek>:
 8000fba:	b510      	push	{r4, lr}
 8000fbc:	460c      	mov	r4, r1
 8000fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fc2:	f000 f9b1 	bl	8001328 <_lseek_r>
 8000fc6:	1c43      	adds	r3, r0, #1
 8000fc8:	89a3      	ldrh	r3, [r4, #12]
 8000fca:	bf15      	itete	ne
 8000fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8000fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000fd6:	81a3      	strheq	r3, [r4, #12]
 8000fd8:	bf18      	it	ne
 8000fda:	81a3      	strhne	r3, [r4, #12]
 8000fdc:	bd10      	pop	{r4, pc}

08000fde <__sclose>:
 8000fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fe2:	f000 b8d3 	b.w	800118c <_close_r>
	...

08000fe8 <__swbuf_r>:
 8000fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fea:	460e      	mov	r6, r1
 8000fec:	4614      	mov	r4, r2
 8000fee:	4605      	mov	r5, r0
 8000ff0:	b118      	cbz	r0, 8000ffa <__swbuf_r+0x12>
 8000ff2:	6983      	ldr	r3, [r0, #24]
 8000ff4:	b90b      	cbnz	r3, 8000ffa <__swbuf_r+0x12>
 8000ff6:	f7ff fb81 	bl	80006fc <__sinit>
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <__swbuf_r+0x98>)
 8000ffc:	429c      	cmp	r4, r3
 8000ffe:	d12b      	bne.n	8001058 <__swbuf_r+0x70>
 8001000:	686c      	ldr	r4, [r5, #4]
 8001002:	69a3      	ldr	r3, [r4, #24]
 8001004:	60a3      	str	r3, [r4, #8]
 8001006:	89a3      	ldrh	r3, [r4, #12]
 8001008:	071a      	lsls	r2, r3, #28
 800100a:	d52f      	bpl.n	800106c <__swbuf_r+0x84>
 800100c:	6923      	ldr	r3, [r4, #16]
 800100e:	b36b      	cbz	r3, 800106c <__swbuf_r+0x84>
 8001010:	6923      	ldr	r3, [r4, #16]
 8001012:	6820      	ldr	r0, [r4, #0]
 8001014:	b2f6      	uxtb	r6, r6
 8001016:	1ac0      	subs	r0, r0, r3
 8001018:	6963      	ldr	r3, [r4, #20]
 800101a:	4637      	mov	r7, r6
 800101c:	4283      	cmp	r3, r0
 800101e:	dc04      	bgt.n	800102a <__swbuf_r+0x42>
 8001020:	4621      	mov	r1, r4
 8001022:	4628      	mov	r0, r5
 8001024:	f000 f944 	bl	80012b0 <_fflush_r>
 8001028:	bb30      	cbnz	r0, 8001078 <__swbuf_r+0x90>
 800102a:	68a3      	ldr	r3, [r4, #8]
 800102c:	3001      	adds	r0, #1
 800102e:	3b01      	subs	r3, #1
 8001030:	60a3      	str	r3, [r4, #8]
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	6022      	str	r2, [r4, #0]
 8001038:	701e      	strb	r6, [r3, #0]
 800103a:	6963      	ldr	r3, [r4, #20]
 800103c:	4283      	cmp	r3, r0
 800103e:	d004      	beq.n	800104a <__swbuf_r+0x62>
 8001040:	89a3      	ldrh	r3, [r4, #12]
 8001042:	07db      	lsls	r3, r3, #31
 8001044:	d506      	bpl.n	8001054 <__swbuf_r+0x6c>
 8001046:	2e0a      	cmp	r6, #10
 8001048:	d104      	bne.n	8001054 <__swbuf_r+0x6c>
 800104a:	4621      	mov	r1, r4
 800104c:	4628      	mov	r0, r5
 800104e:	f000 f92f 	bl	80012b0 <_fflush_r>
 8001052:	b988      	cbnz	r0, 8001078 <__swbuf_r+0x90>
 8001054:	4638      	mov	r0, r7
 8001056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <__swbuf_r+0x9c>)
 800105a:	429c      	cmp	r4, r3
 800105c:	d101      	bne.n	8001062 <__swbuf_r+0x7a>
 800105e:	68ac      	ldr	r4, [r5, #8]
 8001060:	e7cf      	b.n	8001002 <__swbuf_r+0x1a>
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <__swbuf_r+0xa0>)
 8001064:	429c      	cmp	r4, r3
 8001066:	bf08      	it	eq
 8001068:	68ec      	ldreq	r4, [r5, #12]
 800106a:	e7ca      	b.n	8001002 <__swbuf_r+0x1a>
 800106c:	4621      	mov	r1, r4
 800106e:	4628      	mov	r0, r5
 8001070:	f000 f81e 	bl	80010b0 <__swsetup_r>
 8001074:	2800      	cmp	r0, #0
 8001076:	d0cb      	beq.n	8001010 <__swbuf_r+0x28>
 8001078:	f04f 37ff 	mov.w	r7, #4294967295
 800107c:	e7ea      	b.n	8001054 <__swbuf_r+0x6c>
 800107e:	bf00      	nop
 8001080:	0800159c 	.word	0x0800159c
 8001084:	080015bc 	.word	0x080015bc
 8001088:	0800157c 	.word	0x0800157c

0800108c <_write_r>:
 800108c:	b538      	push	{r3, r4, r5, lr}
 800108e:	4604      	mov	r4, r0
 8001090:	4608      	mov	r0, r1
 8001092:	4611      	mov	r1, r2
 8001094:	2200      	movs	r2, #0
 8001096:	4d05      	ldr	r5, [pc, #20]	; (80010ac <_write_r+0x20>)
 8001098:	602a      	str	r2, [r5, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	f7ff f8e0 	bl	8000260 <_write>
 80010a0:	1c43      	adds	r3, r0, #1
 80010a2:	d102      	bne.n	80010aa <_write_r+0x1e>
 80010a4:	682b      	ldr	r3, [r5, #0]
 80010a6:	b103      	cbz	r3, 80010aa <_write_r+0x1e>
 80010a8:	6023      	str	r3, [r4, #0]
 80010aa:	bd38      	pop	{r3, r4, r5, pc}
 80010ac:	2000009c 	.word	0x2000009c

080010b0 <__swsetup_r>:
 80010b0:	4b32      	ldr	r3, [pc, #200]	; (800117c <__swsetup_r+0xcc>)
 80010b2:	b570      	push	{r4, r5, r6, lr}
 80010b4:	681d      	ldr	r5, [r3, #0]
 80010b6:	4606      	mov	r6, r0
 80010b8:	460c      	mov	r4, r1
 80010ba:	b125      	cbz	r5, 80010c6 <__swsetup_r+0x16>
 80010bc:	69ab      	ldr	r3, [r5, #24]
 80010be:	b913      	cbnz	r3, 80010c6 <__swsetup_r+0x16>
 80010c0:	4628      	mov	r0, r5
 80010c2:	f7ff fb1b 	bl	80006fc <__sinit>
 80010c6:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <__swsetup_r+0xd0>)
 80010c8:	429c      	cmp	r4, r3
 80010ca:	d10f      	bne.n	80010ec <__swsetup_r+0x3c>
 80010cc:	686c      	ldr	r4, [r5, #4]
 80010ce:	89a3      	ldrh	r3, [r4, #12]
 80010d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80010d4:	0719      	lsls	r1, r3, #28
 80010d6:	d42c      	bmi.n	8001132 <__swsetup_r+0x82>
 80010d8:	06dd      	lsls	r5, r3, #27
 80010da:	d411      	bmi.n	8001100 <__swsetup_r+0x50>
 80010dc:	2309      	movs	r3, #9
 80010de:	6033      	str	r3, [r6, #0]
 80010e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	81a3      	strh	r3, [r4, #12]
 80010ea:	e03e      	b.n	800116a <__swsetup_r+0xba>
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <__swsetup_r+0xd4>)
 80010ee:	429c      	cmp	r4, r3
 80010f0:	d101      	bne.n	80010f6 <__swsetup_r+0x46>
 80010f2:	68ac      	ldr	r4, [r5, #8]
 80010f4:	e7eb      	b.n	80010ce <__swsetup_r+0x1e>
 80010f6:	4b24      	ldr	r3, [pc, #144]	; (8001188 <__swsetup_r+0xd8>)
 80010f8:	429c      	cmp	r4, r3
 80010fa:	bf08      	it	eq
 80010fc:	68ec      	ldreq	r4, [r5, #12]
 80010fe:	e7e6      	b.n	80010ce <__swsetup_r+0x1e>
 8001100:	0758      	lsls	r0, r3, #29
 8001102:	d512      	bpl.n	800112a <__swsetup_r+0x7a>
 8001104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001106:	b141      	cbz	r1, 800111a <__swsetup_r+0x6a>
 8001108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800110c:	4299      	cmp	r1, r3
 800110e:	d002      	beq.n	8001116 <__swsetup_r+0x66>
 8001110:	4630      	mov	r0, r6
 8001112:	f000 f99b 	bl	800144c <_free_r>
 8001116:	2300      	movs	r3, #0
 8001118:	6363      	str	r3, [r4, #52]	; 0x34
 800111a:	89a3      	ldrh	r3, [r4, #12]
 800111c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001120:	81a3      	strh	r3, [r4, #12]
 8001122:	2300      	movs	r3, #0
 8001124:	6063      	str	r3, [r4, #4]
 8001126:	6923      	ldr	r3, [r4, #16]
 8001128:	6023      	str	r3, [r4, #0]
 800112a:	89a3      	ldrh	r3, [r4, #12]
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	81a3      	strh	r3, [r4, #12]
 8001132:	6923      	ldr	r3, [r4, #16]
 8001134:	b94b      	cbnz	r3, 800114a <__swsetup_r+0x9a>
 8001136:	89a3      	ldrh	r3, [r4, #12]
 8001138:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800113c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001140:	d003      	beq.n	800114a <__swsetup_r+0x9a>
 8001142:	4621      	mov	r1, r4
 8001144:	4630      	mov	r0, r6
 8001146:	f000 f927 	bl	8001398 <__smakebuf_r>
 800114a:	89a0      	ldrh	r0, [r4, #12]
 800114c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001150:	f010 0301 	ands.w	r3, r0, #1
 8001154:	d00a      	beq.n	800116c <__swsetup_r+0xbc>
 8001156:	2300      	movs	r3, #0
 8001158:	60a3      	str	r3, [r4, #8]
 800115a:	6963      	ldr	r3, [r4, #20]
 800115c:	425b      	negs	r3, r3
 800115e:	61a3      	str	r3, [r4, #24]
 8001160:	6923      	ldr	r3, [r4, #16]
 8001162:	b943      	cbnz	r3, 8001176 <__swsetup_r+0xc6>
 8001164:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001168:	d1ba      	bne.n	80010e0 <__swsetup_r+0x30>
 800116a:	bd70      	pop	{r4, r5, r6, pc}
 800116c:	0781      	lsls	r1, r0, #30
 800116e:	bf58      	it	pl
 8001170:	6963      	ldrpl	r3, [r4, #20]
 8001172:	60a3      	str	r3, [r4, #8]
 8001174:	e7f4      	b.n	8001160 <__swsetup_r+0xb0>
 8001176:	2000      	movs	r0, #0
 8001178:	e7f7      	b.n	800116a <__swsetup_r+0xba>
 800117a:	bf00      	nop
 800117c:	20000004 	.word	0x20000004
 8001180:	0800159c 	.word	0x0800159c
 8001184:	080015bc 	.word	0x080015bc
 8001188:	0800157c 	.word	0x0800157c

0800118c <_close_r>:
 800118c:	b538      	push	{r3, r4, r5, lr}
 800118e:	2300      	movs	r3, #0
 8001190:	4d05      	ldr	r5, [pc, #20]	; (80011a8 <_close_r+0x1c>)
 8001192:	4604      	mov	r4, r0
 8001194:	4608      	mov	r0, r1
 8001196:	602b      	str	r3, [r5, #0]
 8001198:	f7ff f87e 	bl	8000298 <_close>
 800119c:	1c43      	adds	r3, r0, #1
 800119e:	d102      	bne.n	80011a6 <_close_r+0x1a>
 80011a0:	682b      	ldr	r3, [r5, #0]
 80011a2:	b103      	cbz	r3, 80011a6 <_close_r+0x1a>
 80011a4:	6023      	str	r3, [r4, #0]
 80011a6:	bd38      	pop	{r3, r4, r5, pc}
 80011a8:	2000009c 	.word	0x2000009c

080011ac <__sflush_r>:
 80011ac:	898a      	ldrh	r2, [r1, #12]
 80011ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011b0:	4605      	mov	r5, r0
 80011b2:	0710      	lsls	r0, r2, #28
 80011b4:	460c      	mov	r4, r1
 80011b6:	d457      	bmi.n	8001268 <__sflush_r+0xbc>
 80011b8:	684b      	ldr	r3, [r1, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	dc04      	bgt.n	80011c8 <__sflush_r+0x1c>
 80011be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	dc01      	bgt.n	80011c8 <__sflush_r+0x1c>
 80011c4:	2000      	movs	r0, #0
 80011c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011ca:	2e00      	cmp	r6, #0
 80011cc:	d0fa      	beq.n	80011c4 <__sflush_r+0x18>
 80011ce:	2300      	movs	r3, #0
 80011d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80011d4:	682f      	ldr	r7, [r5, #0]
 80011d6:	602b      	str	r3, [r5, #0]
 80011d8:	d032      	beq.n	8001240 <__sflush_r+0x94>
 80011da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011dc:	89a3      	ldrh	r3, [r4, #12]
 80011de:	075a      	lsls	r2, r3, #29
 80011e0:	d505      	bpl.n	80011ee <__sflush_r+0x42>
 80011e2:	6863      	ldr	r3, [r4, #4]
 80011e4:	1ac0      	subs	r0, r0, r3
 80011e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011e8:	b10b      	cbz	r3, 80011ee <__sflush_r+0x42>
 80011ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011ec:	1ac0      	subs	r0, r0, r3
 80011ee:	2300      	movs	r3, #0
 80011f0:	4602      	mov	r2, r0
 80011f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011f4:	4628      	mov	r0, r5
 80011f6:	6a21      	ldr	r1, [r4, #32]
 80011f8:	47b0      	blx	r6
 80011fa:	1c43      	adds	r3, r0, #1
 80011fc:	89a3      	ldrh	r3, [r4, #12]
 80011fe:	d106      	bne.n	800120e <__sflush_r+0x62>
 8001200:	6829      	ldr	r1, [r5, #0]
 8001202:	291d      	cmp	r1, #29
 8001204:	d82c      	bhi.n	8001260 <__sflush_r+0xb4>
 8001206:	4a29      	ldr	r2, [pc, #164]	; (80012ac <__sflush_r+0x100>)
 8001208:	40ca      	lsrs	r2, r1
 800120a:	07d6      	lsls	r6, r2, #31
 800120c:	d528      	bpl.n	8001260 <__sflush_r+0xb4>
 800120e:	2200      	movs	r2, #0
 8001210:	6062      	str	r2, [r4, #4]
 8001212:	6922      	ldr	r2, [r4, #16]
 8001214:	04d9      	lsls	r1, r3, #19
 8001216:	6022      	str	r2, [r4, #0]
 8001218:	d504      	bpl.n	8001224 <__sflush_r+0x78>
 800121a:	1c42      	adds	r2, r0, #1
 800121c:	d101      	bne.n	8001222 <__sflush_r+0x76>
 800121e:	682b      	ldr	r3, [r5, #0]
 8001220:	b903      	cbnz	r3, 8001224 <__sflush_r+0x78>
 8001222:	6560      	str	r0, [r4, #84]	; 0x54
 8001224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001226:	602f      	str	r7, [r5, #0]
 8001228:	2900      	cmp	r1, #0
 800122a:	d0cb      	beq.n	80011c4 <__sflush_r+0x18>
 800122c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001230:	4299      	cmp	r1, r3
 8001232:	d002      	beq.n	800123a <__sflush_r+0x8e>
 8001234:	4628      	mov	r0, r5
 8001236:	f000 f909 	bl	800144c <_free_r>
 800123a:	2000      	movs	r0, #0
 800123c:	6360      	str	r0, [r4, #52]	; 0x34
 800123e:	e7c2      	b.n	80011c6 <__sflush_r+0x1a>
 8001240:	6a21      	ldr	r1, [r4, #32]
 8001242:	2301      	movs	r3, #1
 8001244:	4628      	mov	r0, r5
 8001246:	47b0      	blx	r6
 8001248:	1c41      	adds	r1, r0, #1
 800124a:	d1c7      	bne.n	80011dc <__sflush_r+0x30>
 800124c:	682b      	ldr	r3, [r5, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0c4      	beq.n	80011dc <__sflush_r+0x30>
 8001252:	2b1d      	cmp	r3, #29
 8001254:	d001      	beq.n	800125a <__sflush_r+0xae>
 8001256:	2b16      	cmp	r3, #22
 8001258:	d101      	bne.n	800125e <__sflush_r+0xb2>
 800125a:	602f      	str	r7, [r5, #0]
 800125c:	e7b2      	b.n	80011c4 <__sflush_r+0x18>
 800125e:	89a3      	ldrh	r3, [r4, #12]
 8001260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001264:	81a3      	strh	r3, [r4, #12]
 8001266:	e7ae      	b.n	80011c6 <__sflush_r+0x1a>
 8001268:	690f      	ldr	r7, [r1, #16]
 800126a:	2f00      	cmp	r7, #0
 800126c:	d0aa      	beq.n	80011c4 <__sflush_r+0x18>
 800126e:	0793      	lsls	r3, r2, #30
 8001270:	bf18      	it	ne
 8001272:	2300      	movne	r3, #0
 8001274:	680e      	ldr	r6, [r1, #0]
 8001276:	bf08      	it	eq
 8001278:	694b      	ldreq	r3, [r1, #20]
 800127a:	1bf6      	subs	r6, r6, r7
 800127c:	600f      	str	r7, [r1, #0]
 800127e:	608b      	str	r3, [r1, #8]
 8001280:	2e00      	cmp	r6, #0
 8001282:	dd9f      	ble.n	80011c4 <__sflush_r+0x18>
 8001284:	4633      	mov	r3, r6
 8001286:	463a      	mov	r2, r7
 8001288:	4628      	mov	r0, r5
 800128a:	6a21      	ldr	r1, [r4, #32]
 800128c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001290:	47e0      	blx	ip
 8001292:	2800      	cmp	r0, #0
 8001294:	dc06      	bgt.n	80012a4 <__sflush_r+0xf8>
 8001296:	89a3      	ldrh	r3, [r4, #12]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012a0:	81a3      	strh	r3, [r4, #12]
 80012a2:	e790      	b.n	80011c6 <__sflush_r+0x1a>
 80012a4:	4407      	add	r7, r0
 80012a6:	1a36      	subs	r6, r6, r0
 80012a8:	e7ea      	b.n	8001280 <__sflush_r+0xd4>
 80012aa:	bf00      	nop
 80012ac:	20400001 	.word	0x20400001

080012b0 <_fflush_r>:
 80012b0:	b538      	push	{r3, r4, r5, lr}
 80012b2:	690b      	ldr	r3, [r1, #16]
 80012b4:	4605      	mov	r5, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	b913      	cbnz	r3, 80012c0 <_fflush_r+0x10>
 80012ba:	2500      	movs	r5, #0
 80012bc:	4628      	mov	r0, r5
 80012be:	bd38      	pop	{r3, r4, r5, pc}
 80012c0:	b118      	cbz	r0, 80012ca <_fflush_r+0x1a>
 80012c2:	6983      	ldr	r3, [r0, #24]
 80012c4:	b90b      	cbnz	r3, 80012ca <_fflush_r+0x1a>
 80012c6:	f7ff fa19 	bl	80006fc <__sinit>
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <_fflush_r+0x6c>)
 80012cc:	429c      	cmp	r4, r3
 80012ce:	d11b      	bne.n	8001308 <_fflush_r+0x58>
 80012d0:	686c      	ldr	r4, [r5, #4]
 80012d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0ef      	beq.n	80012ba <_fflush_r+0xa>
 80012da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80012dc:	07d0      	lsls	r0, r2, #31
 80012de:	d404      	bmi.n	80012ea <_fflush_r+0x3a>
 80012e0:	0599      	lsls	r1, r3, #22
 80012e2:	d402      	bmi.n	80012ea <_fflush_r+0x3a>
 80012e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012e6:	f7ff faa7 	bl	8000838 <__retarget_lock_acquire_recursive>
 80012ea:	4628      	mov	r0, r5
 80012ec:	4621      	mov	r1, r4
 80012ee:	f7ff ff5d 	bl	80011ac <__sflush_r>
 80012f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012f4:	4605      	mov	r5, r0
 80012f6:	07da      	lsls	r2, r3, #31
 80012f8:	d4e0      	bmi.n	80012bc <_fflush_r+0xc>
 80012fa:	89a3      	ldrh	r3, [r4, #12]
 80012fc:	059b      	lsls	r3, r3, #22
 80012fe:	d4dd      	bmi.n	80012bc <_fflush_r+0xc>
 8001300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001302:	f7ff fa9a 	bl	800083a <__retarget_lock_release_recursive>
 8001306:	e7d9      	b.n	80012bc <_fflush_r+0xc>
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <_fflush_r+0x70>)
 800130a:	429c      	cmp	r4, r3
 800130c:	d101      	bne.n	8001312 <_fflush_r+0x62>
 800130e:	68ac      	ldr	r4, [r5, #8]
 8001310:	e7df      	b.n	80012d2 <_fflush_r+0x22>
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <_fflush_r+0x74>)
 8001314:	429c      	cmp	r4, r3
 8001316:	bf08      	it	eq
 8001318:	68ec      	ldreq	r4, [r5, #12]
 800131a:	e7da      	b.n	80012d2 <_fflush_r+0x22>
 800131c:	0800159c 	.word	0x0800159c
 8001320:	080015bc 	.word	0x080015bc
 8001324:	0800157c 	.word	0x0800157c

08001328 <_lseek_r>:
 8001328:	b538      	push	{r3, r4, r5, lr}
 800132a:	4604      	mov	r4, r0
 800132c:	4608      	mov	r0, r1
 800132e:	4611      	mov	r1, r2
 8001330:	2200      	movs	r2, #0
 8001332:	4d05      	ldr	r5, [pc, #20]	; (8001348 <_lseek_r+0x20>)
 8001334:	602a      	str	r2, [r5, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	f7fe ffd2 	bl	80002e0 <_lseek>
 800133c:	1c43      	adds	r3, r0, #1
 800133e:	d102      	bne.n	8001346 <_lseek_r+0x1e>
 8001340:	682b      	ldr	r3, [r5, #0]
 8001342:	b103      	cbz	r3, 8001346 <_lseek_r+0x1e>
 8001344:	6023      	str	r3, [r4, #0]
 8001346:	bd38      	pop	{r3, r4, r5, pc}
 8001348:	2000009c 	.word	0x2000009c

0800134c <__swhatbuf_r>:
 800134c:	b570      	push	{r4, r5, r6, lr}
 800134e:	460e      	mov	r6, r1
 8001350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001354:	4614      	mov	r4, r2
 8001356:	2900      	cmp	r1, #0
 8001358:	461d      	mov	r5, r3
 800135a:	b096      	sub	sp, #88	; 0x58
 800135c:	da08      	bge.n	8001370 <__swhatbuf_r+0x24>
 800135e:	2200      	movs	r2, #0
 8001360:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001364:	602a      	str	r2, [r5, #0]
 8001366:	061a      	lsls	r2, r3, #24
 8001368:	d410      	bmi.n	800138c <__swhatbuf_r+0x40>
 800136a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800136e:	e00e      	b.n	800138e <__swhatbuf_r+0x42>
 8001370:	466a      	mov	r2, sp
 8001372:	f000 f8c5 	bl	8001500 <_fstat_r>
 8001376:	2800      	cmp	r0, #0
 8001378:	dbf1      	blt.n	800135e <__swhatbuf_r+0x12>
 800137a:	9a01      	ldr	r2, [sp, #4]
 800137c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001380:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001384:	425a      	negs	r2, r3
 8001386:	415a      	adcs	r2, r3
 8001388:	602a      	str	r2, [r5, #0]
 800138a:	e7ee      	b.n	800136a <__swhatbuf_r+0x1e>
 800138c:	2340      	movs	r3, #64	; 0x40
 800138e:	2000      	movs	r0, #0
 8001390:	6023      	str	r3, [r4, #0]
 8001392:	b016      	add	sp, #88	; 0x58
 8001394:	bd70      	pop	{r4, r5, r6, pc}
	...

08001398 <__smakebuf_r>:
 8001398:	898b      	ldrh	r3, [r1, #12]
 800139a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800139c:	079d      	lsls	r5, r3, #30
 800139e:	4606      	mov	r6, r0
 80013a0:	460c      	mov	r4, r1
 80013a2:	d507      	bpl.n	80013b4 <__smakebuf_r+0x1c>
 80013a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80013a8:	6023      	str	r3, [r4, #0]
 80013aa:	6123      	str	r3, [r4, #16]
 80013ac:	2301      	movs	r3, #1
 80013ae:	6163      	str	r3, [r4, #20]
 80013b0:	b002      	add	sp, #8
 80013b2:	bd70      	pop	{r4, r5, r6, pc}
 80013b4:	466a      	mov	r2, sp
 80013b6:	ab01      	add	r3, sp, #4
 80013b8:	f7ff ffc8 	bl	800134c <__swhatbuf_r>
 80013bc:	9900      	ldr	r1, [sp, #0]
 80013be:	4605      	mov	r5, r0
 80013c0:	4630      	mov	r0, r6
 80013c2:	f7ff fa5b 	bl	800087c <_malloc_r>
 80013c6:	b948      	cbnz	r0, 80013dc <__smakebuf_r+0x44>
 80013c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013cc:	059a      	lsls	r2, r3, #22
 80013ce:	d4ef      	bmi.n	80013b0 <__smakebuf_r+0x18>
 80013d0:	f023 0303 	bic.w	r3, r3, #3
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	81a3      	strh	r3, [r4, #12]
 80013da:	e7e3      	b.n	80013a4 <__smakebuf_r+0xc>
 80013dc:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <__smakebuf_r+0x7c>)
 80013de:	62b3      	str	r3, [r6, #40]	; 0x28
 80013e0:	89a3      	ldrh	r3, [r4, #12]
 80013e2:	6020      	str	r0, [r4, #0]
 80013e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e8:	81a3      	strh	r3, [r4, #12]
 80013ea:	9b00      	ldr	r3, [sp, #0]
 80013ec:	6120      	str	r0, [r4, #16]
 80013ee:	6163      	str	r3, [r4, #20]
 80013f0:	9b01      	ldr	r3, [sp, #4]
 80013f2:	b15b      	cbz	r3, 800140c <__smakebuf_r+0x74>
 80013f4:	4630      	mov	r0, r6
 80013f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013fa:	f000 f893 	bl	8001524 <_isatty_r>
 80013fe:	b128      	cbz	r0, 800140c <__smakebuf_r+0x74>
 8001400:	89a3      	ldrh	r3, [r4, #12]
 8001402:	f023 0303 	bic.w	r3, r3, #3
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	81a3      	strh	r3, [r4, #12]
 800140c:	89a0      	ldrh	r0, [r4, #12]
 800140e:	4305      	orrs	r5, r0
 8001410:	81a5      	strh	r5, [r4, #12]
 8001412:	e7cd      	b.n	80013b0 <__smakebuf_r+0x18>
 8001414:	08000695 	.word	0x08000695

08001418 <memchr>:
 8001418:	4603      	mov	r3, r0
 800141a:	b510      	push	{r4, lr}
 800141c:	b2c9      	uxtb	r1, r1
 800141e:	4402      	add	r2, r0
 8001420:	4293      	cmp	r3, r2
 8001422:	4618      	mov	r0, r3
 8001424:	d101      	bne.n	800142a <memchr+0x12>
 8001426:	2000      	movs	r0, #0
 8001428:	e003      	b.n	8001432 <memchr+0x1a>
 800142a:	7804      	ldrb	r4, [r0, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	428c      	cmp	r4, r1
 8001430:	d1f6      	bne.n	8001420 <memchr+0x8>
 8001432:	bd10      	pop	{r4, pc}

08001434 <__malloc_lock>:
 8001434:	4801      	ldr	r0, [pc, #4]	; (800143c <__malloc_lock+0x8>)
 8001436:	f7ff b9ff 	b.w	8000838 <__retarget_lock_acquire_recursive>
 800143a:	bf00      	nop
 800143c:	20000090 	.word	0x20000090

08001440 <__malloc_unlock>:
 8001440:	4801      	ldr	r0, [pc, #4]	; (8001448 <__malloc_unlock+0x8>)
 8001442:	f7ff b9fa 	b.w	800083a <__retarget_lock_release_recursive>
 8001446:	bf00      	nop
 8001448:	20000090 	.word	0x20000090

0800144c <_free_r>:
 800144c:	b538      	push	{r3, r4, r5, lr}
 800144e:	4605      	mov	r5, r0
 8001450:	2900      	cmp	r1, #0
 8001452:	d040      	beq.n	80014d6 <_free_r+0x8a>
 8001454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001458:	1f0c      	subs	r4, r1, #4
 800145a:	2b00      	cmp	r3, #0
 800145c:	bfb8      	it	lt
 800145e:	18e4      	addlt	r4, r4, r3
 8001460:	f7ff ffe8 	bl	8001434 <__malloc_lock>
 8001464:	4a1c      	ldr	r2, [pc, #112]	; (80014d8 <_free_r+0x8c>)
 8001466:	6813      	ldr	r3, [r2, #0]
 8001468:	b933      	cbnz	r3, 8001478 <_free_r+0x2c>
 800146a:	6063      	str	r3, [r4, #4]
 800146c:	6014      	str	r4, [r2, #0]
 800146e:	4628      	mov	r0, r5
 8001470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001474:	f7ff bfe4 	b.w	8001440 <__malloc_unlock>
 8001478:	42a3      	cmp	r3, r4
 800147a:	d908      	bls.n	800148e <_free_r+0x42>
 800147c:	6820      	ldr	r0, [r4, #0]
 800147e:	1821      	adds	r1, r4, r0
 8001480:	428b      	cmp	r3, r1
 8001482:	bf01      	itttt	eq
 8001484:	6819      	ldreq	r1, [r3, #0]
 8001486:	685b      	ldreq	r3, [r3, #4]
 8001488:	1809      	addeq	r1, r1, r0
 800148a:	6021      	streq	r1, [r4, #0]
 800148c:	e7ed      	b.n	800146a <_free_r+0x1e>
 800148e:	461a      	mov	r2, r3
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	b10b      	cbz	r3, 8001498 <_free_r+0x4c>
 8001494:	42a3      	cmp	r3, r4
 8001496:	d9fa      	bls.n	800148e <_free_r+0x42>
 8001498:	6811      	ldr	r1, [r2, #0]
 800149a:	1850      	adds	r0, r2, r1
 800149c:	42a0      	cmp	r0, r4
 800149e:	d10b      	bne.n	80014b8 <_free_r+0x6c>
 80014a0:	6820      	ldr	r0, [r4, #0]
 80014a2:	4401      	add	r1, r0
 80014a4:	1850      	adds	r0, r2, r1
 80014a6:	4283      	cmp	r3, r0
 80014a8:	6011      	str	r1, [r2, #0]
 80014aa:	d1e0      	bne.n	800146e <_free_r+0x22>
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4401      	add	r1, r0
 80014b2:	6011      	str	r1, [r2, #0]
 80014b4:	6053      	str	r3, [r2, #4]
 80014b6:	e7da      	b.n	800146e <_free_r+0x22>
 80014b8:	d902      	bls.n	80014c0 <_free_r+0x74>
 80014ba:	230c      	movs	r3, #12
 80014bc:	602b      	str	r3, [r5, #0]
 80014be:	e7d6      	b.n	800146e <_free_r+0x22>
 80014c0:	6820      	ldr	r0, [r4, #0]
 80014c2:	1821      	adds	r1, r4, r0
 80014c4:	428b      	cmp	r3, r1
 80014c6:	bf01      	itttt	eq
 80014c8:	6819      	ldreq	r1, [r3, #0]
 80014ca:	685b      	ldreq	r3, [r3, #4]
 80014cc:	1809      	addeq	r1, r1, r0
 80014ce:	6021      	streq	r1, [r4, #0]
 80014d0:	6063      	str	r3, [r4, #4]
 80014d2:	6054      	str	r4, [r2, #4]
 80014d4:	e7cb      	b.n	800146e <_free_r+0x22>
 80014d6:	bd38      	pop	{r3, r4, r5, pc}
 80014d8:	20000094 	.word	0x20000094

080014dc <_read_r>:
 80014dc:	b538      	push	{r3, r4, r5, lr}
 80014de:	4604      	mov	r4, r0
 80014e0:	4608      	mov	r0, r1
 80014e2:	4611      	mov	r1, r2
 80014e4:	2200      	movs	r2, #0
 80014e6:	4d05      	ldr	r5, [pc, #20]	; (80014fc <_read_r+0x20>)
 80014e8:	602a      	str	r2, [r5, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	f7fe fe9b 	bl	8000226 <_read>
 80014f0:	1c43      	adds	r3, r0, #1
 80014f2:	d102      	bne.n	80014fa <_read_r+0x1e>
 80014f4:	682b      	ldr	r3, [r5, #0]
 80014f6:	b103      	cbz	r3, 80014fa <_read_r+0x1e>
 80014f8:	6023      	str	r3, [r4, #0]
 80014fa:	bd38      	pop	{r3, r4, r5, pc}
 80014fc:	2000009c 	.word	0x2000009c

08001500 <_fstat_r>:
 8001500:	b538      	push	{r3, r4, r5, lr}
 8001502:	2300      	movs	r3, #0
 8001504:	4d06      	ldr	r5, [pc, #24]	; (8001520 <_fstat_r+0x20>)
 8001506:	4604      	mov	r4, r0
 8001508:	4608      	mov	r0, r1
 800150a:	4611      	mov	r1, r2
 800150c:	602b      	str	r3, [r5, #0]
 800150e:	f7fe fece 	bl	80002ae <_fstat>
 8001512:	1c43      	adds	r3, r0, #1
 8001514:	d102      	bne.n	800151c <_fstat_r+0x1c>
 8001516:	682b      	ldr	r3, [r5, #0]
 8001518:	b103      	cbz	r3, 800151c <_fstat_r+0x1c>
 800151a:	6023      	str	r3, [r4, #0]
 800151c:	bd38      	pop	{r3, r4, r5, pc}
 800151e:	bf00      	nop
 8001520:	2000009c 	.word	0x2000009c

08001524 <_isatty_r>:
 8001524:	b538      	push	{r3, r4, r5, lr}
 8001526:	2300      	movs	r3, #0
 8001528:	4d05      	ldr	r5, [pc, #20]	; (8001540 <_isatty_r+0x1c>)
 800152a:	4604      	mov	r4, r0
 800152c:	4608      	mov	r0, r1
 800152e:	602b      	str	r3, [r5, #0]
 8001530:	f7fe fecc 	bl	80002cc <_isatty>
 8001534:	1c43      	adds	r3, r0, #1
 8001536:	d102      	bne.n	800153e <_isatty_r+0x1a>
 8001538:	682b      	ldr	r3, [r5, #0]
 800153a:	b103      	cbz	r3, 800153e <_isatty_r+0x1a>
 800153c:	6023      	str	r3, [r4, #0]
 800153e:	bd38      	pop	{r3, r4, r5, pc}
 8001540:	2000009c 	.word	0x2000009c

08001544 <_init>:
 8001544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001546:	bf00      	nop
 8001548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800154a:	bc08      	pop	{r3}
 800154c:	469e      	mov	lr, r3
 800154e:	4770      	bx	lr

08001550 <_fini>:
 8001550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001552:	bf00      	nop
 8001554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001556:	bc08      	pop	{r3}
 8001558:	469e      	mov	lr, r3
 800155a:	4770      	bx	lr
