
14_InputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000318  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000424  08000424  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000424  08000424  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000424  08000424  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000424  08000424  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000424  08000424  00010424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000428  08000428  00010428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800042c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000430  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000430  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001631  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000704  00000000  00000000  0002165e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  00021d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d8  00000000  00000000  00021fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000016dd  00000000  00000000  00022180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ba9  00000000  00000000  0002385d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f34b  00000000  00000000  00026406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a5751  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006c0  00000000  00000000  000a57a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800040c 	.word	0x0800040c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800040c 	.word	0x0800040c

0800014c <main>:



int timestamp = 0;

int main(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0


	//uart2_tx_init();
	tim2_pa0_output_compare();
 8000150:	f000 f84a 	bl	80001e8 <tim2_pa0_output_compare>
	tim3_input_capture();
 8000154:	f000 f898 	bl	8000288 <tim3_input_capture>

	while(1){

		while(!(TIM3->SR & SR_CC1IF)){}
 8000158:	bf00      	nop
 800015a:	4b06      	ldr	r3, [pc, #24]	; (8000174 <main+0x28>)
 800015c:	691b      	ldr	r3, [r3, #16]
 800015e:	f003 0302 	and.w	r3, r3, #2
 8000162:	2b00      	cmp	r3, #0
 8000164:	d0f9      	beq.n	800015a <main+0xe>
		timestamp = TIM3->CCR1;
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <main+0x28>)
 8000168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800016a:	461a      	mov	r2, r3
 800016c:	4b02      	ldr	r3, [pc, #8]	; (8000178 <main+0x2c>)
 800016e:	601a      	str	r2, [r3, #0]
		while(!(TIM3->SR & SR_CC1IF)){}
 8000170:	e7f2      	b.n	8000158 <main+0xc>
 8000172:	bf00      	nop
 8000174:	40000400 	.word	0x40000400
 8000178:	20000020 	.word	0x20000020

0800017c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000180:	e7fe      	b.n	8000180 <NMI_Handler+0x4>

08000182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000182:	b480      	push	{r7}
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000186:	e7fe      	b.n	8000186 <HardFault_Handler+0x4>

08000188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800018c:	e7fe      	b.n	800018c <MemManage_Handler+0x4>

0800018e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800018e:	b480      	push	{r7}
 8000190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000192:	e7fe      	b.n	8000192 <BusFault_Handler+0x4>

08000194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000198:	e7fe      	b.n	8000198 <UsageFault_Handler+0x4>

0800019a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800019a:	b480      	push	{r7}
 800019c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800019e:	bf00      	nop
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr

080001a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001a6:	b480      	push	{r7}
 80001a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001aa:	bf00      	nop
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr

080001b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001b2:	b480      	push	{r7}
 80001b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001b6:	bf00      	nop
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr

080001be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001be:	b580      	push	{r7, lr}
 80001c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001c2:	f000 f8cb 	bl	800035c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}

080001ca <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80001ca:	b580      	push	{r7, lr}
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80001ce:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80001d2:	f000 f8d5 	bl	8000380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80001d6:	bf00      	nop
 80001d8:	bd80      	pop	{r7, pc}

080001da <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001da:	b480      	push	{r7}
 80001dc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001de:	bf00      	nop
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr
	...

080001e8 <tim2_pa0_output_compare>:
	/*5. Enable timer*/
	TIM2->CR1 = CR1_CEN;


}
void tim2_pa0_output_compare(void){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0

	/*1. Enable clock access to GPIOA*/
	RCC->APB2ENR |= GPIOAEN | (1U << 0);
 80001ec:	4b24      	ldr	r3, [pc, #144]	; (8000280 <tim2_pa0_output_compare+0x98>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	4a23      	ldr	r2, [pc, #140]	; (8000280 <tim2_pa0_output_compare+0x98>)
 80001f2:	f043 0305 	orr.w	r3, r3, #5
 80001f6:	6193      	str	r3, [r2, #24]
	/*2. Set PA0 mode to alternate function*/
	GPIOA->CRL &= ~(1 << 0);
 80001f8:	4b22      	ldr	r3, [pc, #136]	; (8000284 <tim2_pa0_output_compare+0x9c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a21      	ldr	r2, [pc, #132]	; (8000284 <tim2_pa0_output_compare+0x9c>)
 80001fe:	f023 0301 	bic.w	r3, r3, #1
 8000202:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1 << 1);
 8000204:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <tim2_pa0_output_compare+0x9c>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a1e      	ldr	r2, [pc, #120]	; (8000284 <tim2_pa0_output_compare+0x9c>)
 800020a:	f043 0302 	orr.w	r3, r3, #2
 800020e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1 << 2);
 8000210:	4b1c      	ldr	r3, [pc, #112]	; (8000284 <tim2_pa0_output_compare+0x9c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a1b      	ldr	r2, [pc, #108]	; (8000284 <tim2_pa0_output_compare+0x9c>)
 8000216:	f023 0304 	bic.w	r3, r3, #4
 800021a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1 << 3);
 800021c:	4b19      	ldr	r3, [pc, #100]	; (8000284 <tim2_pa0_output_compare+0x9c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <tim2_pa0_output_compare+0x9c>)
 8000222:	f043 0308 	orr.w	r3, r3, #8
 8000226:	6013      	str	r3, [r2, #0]
	/*3. Set PA0 alternate function type to TIM2_CH1*/

	/*4. Enable clock access to timer2*/
	RCC->APB1ENR |= TIM2EN;
 8000228:	4b15      	ldr	r3, [pc, #84]	; (8000280 <tim2_pa0_output_compare+0x98>)
 800022a:	69db      	ldr	r3, [r3, #28]
 800022c:	4a14      	ldr	r2, [pc, #80]	; (8000280 <tim2_pa0_output_compare+0x98>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	61d3      	str	r3, [r2, #28]

	/*5. Set a pre-scaler value*/
	TIM2->PSC = 800 - 1; // 8 000 000 / 800 = 10 000
 8000234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000238:	f240 321f 	movw	r2, #799	; 0x31f
 800023c:	629a      	str	r2, [r3, #40]	; 0x28

	/*6. Set an auto-reload value*/
	TIM2->ARR = 10000 - 1; // 10 000 / 10 000 = 1
 800023e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000242:	f242 720f 	movw	r2, #9999	; 0x270f
 8000246:	62da      	str	r2, [r3, #44]	; 0x2c

	/*7. Set output compare toggle mode*/
	TIM2->CCMR1 |= OC_TOGGLE;
 8000248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000252:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000256:	6193      	str	r3, [r2, #24]

	/*8. Enable TIM2 CH1 in compare mode*/
	TIM2->CCER |= CCER_CC1E;
 8000258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800025c:	6a1b      	ldr	r3, [r3, #32]
 800025e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6213      	str	r3, [r2, #32]

	/*8. Clear Counter*/
	TIM2->CNT = 0;
 8000268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800026c:	2200      	movs	r2, #0
 800026e:	625a      	str	r2, [r3, #36]	; 0x24

	/*9. Enable timer*/
	TIM2->CR1 = CR1_CEN;
 8000270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000274:	2201      	movs	r2, #1
 8000276:	601a      	str	r2, [r3, #0]


}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	40021000 	.word	0x40021000
 8000284:	40010800 	.word	0x40010800

08000288 <tim3_input_capture>:
void tim3_input_capture(void){
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	/*1. Enable clock access to GPIOA*/
	RCC->APB2ENR |= GPIOAEN | (1U << 0);
 800028c:	4b1d      	ldr	r3, [pc, #116]	; (8000304 <tim3_input_capture+0x7c>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a1c      	ldr	r2, [pc, #112]	; (8000304 <tim3_input_capture+0x7c>)
 8000292:	f043 0305 	orr.w	r3, r3, #5
 8000296:	6193      	str	r3, [r2, #24]
	/*2. Set PA6 mode to alternate function*/
	GPIOA->CRL &= ~(1 << 24);
 8000298:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <tim3_input_capture+0x80>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a1a      	ldr	r2, [pc, #104]	; (8000308 <tim3_input_capture+0x80>)
 800029e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80002a2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1 << 25);
 80002a4:	4b18      	ldr	r3, [pc, #96]	; (8000308 <tim3_input_capture+0x80>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a17      	ldr	r2, [pc, #92]	; (8000308 <tim3_input_capture+0x80>)
 80002aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002ae:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1 << 26);
 80002b0:	4b15      	ldr	r3, [pc, #84]	; (8000308 <tim3_input_capture+0x80>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a14      	ldr	r2, [pc, #80]	; (8000308 <tim3_input_capture+0x80>)
 80002b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1 << 27);
 80002bc:	4b12      	ldr	r3, [pc, #72]	; (8000308 <tim3_input_capture+0x80>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a11      	ldr	r2, [pc, #68]	; (8000308 <tim3_input_capture+0x80>)
 80002c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80002c6:	6013      	str	r3, [r2, #0]
	/*3. Set PA6 alternate function type to TIM3_CH1*/

	/*4. Enable clock access to timer3*/
	RCC->APB1ENR |= TIM3EN;
 80002c8:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <tim3_input_capture+0x7c>)
 80002ca:	69db      	ldr	r3, [r3, #28]
 80002cc:	4a0d      	ldr	r2, [pc, #52]	; (8000304 <tim3_input_capture+0x7c>)
 80002ce:	f043 0302 	orr.w	r3, r3, #2
 80002d2:	61d3      	str	r3, [r2, #28]

	/*5. Set a pre-scaler*/
	TIM3->PSC = 16000 - 1;
 80002d4:	4b0d      	ldr	r3, [pc, #52]	; (800030c <tim3_input_capture+0x84>)
 80002d6:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80002da:	629a      	str	r2, [r3, #40]	; 0x28

	/*6. Set CH1 to input capture */
	TIM3->CCMR1 |= CCER_CC1S;
 80002dc:	4b0b      	ldr	r3, [pc, #44]	; (800030c <tim3_input_capture+0x84>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a0a      	ldr	r2, [pc, #40]	; (800030c <tim3_input_capture+0x84>)
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	6193      	str	r3, [r2, #24]

	/*7. Set CC1 to input capture */
	TIM3->CCER |= CCER_CC1E;
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <tim3_input_capture+0x84>)
 80002ea:	6a1b      	ldr	r3, [r3, #32]
 80002ec:	4a07      	ldr	r2, [pc, #28]	; (800030c <tim3_input_capture+0x84>)
 80002ee:	f043 0301 	orr.w	r3, r3, #1
 80002f2:	6213      	str	r3, [r2, #32]

	/*8. Enable TIM3*/
	TIM3->CR1 = CR1_CEN;
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <tim3_input_capture+0x84>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	601a      	str	r2, [r3, #0]

}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000
 8000308:	40010800 	.word	0x40010800
 800030c:	40000400 	.word	0x40000400

08000310 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000310:	480c      	ldr	r0, [pc, #48]	; (8000344 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000312:	490d      	ldr	r1, [pc, #52]	; (8000348 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000314:	4a0d      	ldr	r2, [pc, #52]	; (800034c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000318:	e002      	b.n	8000320 <LoopCopyDataInit>

0800031a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800031c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031e:	3304      	adds	r3, #4

08000320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000324:	d3f9      	bcc.n	800031a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000326:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000328:	4c0a      	ldr	r4, [pc, #40]	; (8000354 <LoopFillZerobss+0x22>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800032c:	e001      	b.n	8000332 <LoopFillZerobss>

0800032e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000330:	3204      	adds	r2, #4

08000332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000334:	d3fb      	bcc.n	800032e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000336:	f7ff ff50 	bl	80001da <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800033a:	f000 f843 	bl	80003c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033e:	f7ff ff05 	bl	800014c <main>
  bx lr
 8000342:	4770      	bx	lr
  ldr r0, =_sdata
 8000344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000348:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800034c:	0800042c 	.word	0x0800042c
  ldr r2, =_sbss
 8000350:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000354:	20000028 	.word	0x20000028

08000358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000358:	e7fe      	b.n	8000358 <ADC1_2_IRQHandler>
	...

0800035c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000360:	4b05      	ldr	r3, [pc, #20]	; (8000378 <HAL_IncTick+0x1c>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	461a      	mov	r2, r3
 8000366:	4b05      	ldr	r3, [pc, #20]	; (800037c <HAL_IncTick+0x20>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4413      	add	r3, r2
 800036c:	4a03      	ldr	r2, [pc, #12]	; (800037c <HAL_IncTick+0x20>)
 800036e:	6013      	str	r3, [r2, #0]
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	20000000 	.word	0x20000000
 800037c:	20000024 	.word	0x20000024

08000380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800038c:	695a      	ldr	r2, [r3, #20]
 800038e:	88fb      	ldrh	r3, [r7, #6]
 8000390:	4013      	ands	r3, r2
 8000392:	2b00      	cmp	r3, #0
 8000394:	d006      	beq.n	80003a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000396:	4a05      	ldr	r2, [pc, #20]	; (80003ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000398:	88fb      	ldrh	r3, [r7, #6]
 800039a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800039c:	88fb      	ldrh	r3, [r7, #6]
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f806 	bl	80003b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	40010400 	.word	0x40010400

080003b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr

080003c4 <__libc_init_array>:
 80003c4:	b570      	push	{r4, r5, r6, lr}
 80003c6:	2600      	movs	r6, #0
 80003c8:	4d0c      	ldr	r5, [pc, #48]	; (80003fc <__libc_init_array+0x38>)
 80003ca:	4c0d      	ldr	r4, [pc, #52]	; (8000400 <__libc_init_array+0x3c>)
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	10a4      	asrs	r4, r4, #2
 80003d0:	42a6      	cmp	r6, r4
 80003d2:	d109      	bne.n	80003e8 <__libc_init_array+0x24>
 80003d4:	f000 f81a 	bl	800040c <_init>
 80003d8:	2600      	movs	r6, #0
 80003da:	4d0a      	ldr	r5, [pc, #40]	; (8000404 <__libc_init_array+0x40>)
 80003dc:	4c0a      	ldr	r4, [pc, #40]	; (8000408 <__libc_init_array+0x44>)
 80003de:	1b64      	subs	r4, r4, r5
 80003e0:	10a4      	asrs	r4, r4, #2
 80003e2:	42a6      	cmp	r6, r4
 80003e4:	d105      	bne.n	80003f2 <__libc_init_array+0x2e>
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ec:	4798      	blx	r3
 80003ee:	3601      	adds	r6, #1
 80003f0:	e7ee      	b.n	80003d0 <__libc_init_array+0xc>
 80003f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f6:	4798      	blx	r3
 80003f8:	3601      	adds	r6, #1
 80003fa:	e7f2      	b.n	80003e2 <__libc_init_array+0x1e>
 80003fc:	08000424 	.word	0x08000424
 8000400:	08000424 	.word	0x08000424
 8000404:	08000424 	.word	0x08000424
 8000408:	08000428 	.word	0x08000428

0800040c <_init>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr

08000418 <_fini>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr
