
16_uart_rx_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003fc  08000404  00010404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003fc  080003fc  00010404  2**0
                  CONTENTS
  4 .ARM          00000000  080003fc  080003fc  00010404  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003fc  08000404  00010404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003fc  080003fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000400  08000400  00010400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000404  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000404  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010404  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b18  00000000  00000000  0001042d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000432  00000000  00000000  00010f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e0  00000000  00000000  00011378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a8  00000000  00000000  00011458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000011cf  00000000  00000000  00011500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000011b5  00000000  00000000  000126cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005897b  00000000  00000000  00013884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006c1ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000230  00000000  00000000  0006c250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	080003e4 	.word	0x080003e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	080003e4 	.word	0x080003e4

0800014c <main>:

static void uart_callback(void);

char key;

int main(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

	/*1. Enable clock access to GPIOA*/
	RCC->APB2ENR |= GPIOAEN;
 8000150:	4b10      	ldr	r3, [pc, #64]	; (8000194 <main+0x48>)
 8000152:	699b      	ldr	r3, [r3, #24]
 8000154:	4a0f      	ldr	r2, [pc, #60]	; (8000194 <main+0x48>)
 8000156:	f043 0304 	orr.w	r3, r3, #4
 800015a:	6193      	str	r3, [r2, #24]

	/*2. Set PA5 as output pin*/
	GPIOA->CRL &= ~(1U << 23);
 800015c:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <main+0x4c>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	4a0d      	ldr	r2, [pc, #52]	; (8000198 <main+0x4c>)
 8000162:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000166:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 22);
 8000168:	4b0b      	ldr	r3, [pc, #44]	; (8000198 <main+0x4c>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0a      	ldr	r2, [pc, #40]	; (8000198 <main+0x4c>)
 800016e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000172:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 21);
 8000174:	4b08      	ldr	r3, [pc, #32]	; (8000198 <main+0x4c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a07      	ldr	r2, [pc, #28]	; (8000198 <main+0x4c>)
 800017a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800017e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 20);
 8000180:	4b05      	ldr	r3, [pc, #20]	; (8000198 <main+0x4c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a04      	ldr	r2, [pc, #16]	; (8000198 <main+0x4c>)
 8000186:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800018a:	6013      	str	r3, [r2, #0]

	uart2_rx_interrupt_init();
 800018c:	f000 f858 	bl	8000240 <uart2_rx_interrupt_init>


	while(1){
 8000190:	e7fe      	b.n	8000190 <main+0x44>
 8000192:	bf00      	nop
 8000194:	40021000 	.word	0x40021000
 8000198:	40010800 	.word	0x40010800

0800019c <uart_callback>:

	}


}
static void uart_callback(void){
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
	key = USART2->DR;
 80001a0:	4b0c      	ldr	r3, [pc, #48]	; (80001d4 <uart_callback+0x38>)
 80001a2:	685b      	ldr	r3, [r3, #4]
 80001a4:	b2da      	uxtb	r2, r3
 80001a6:	4b0c      	ldr	r3, [pc, #48]	; (80001d8 <uart_callback+0x3c>)
 80001a8:	701a      	strb	r2, [r3, #0]
	if(key == '1'){
 80001aa:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <uart_callback+0x3c>)
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	2b31      	cmp	r3, #49	; 0x31
 80001b0:	d106      	bne.n	80001c0 <uart_callback+0x24>
		GPIOA->ODR |= LED_PIN;
 80001b2:	4b0a      	ldr	r3, [pc, #40]	; (80001dc <uart_callback+0x40>)
 80001b4:	68db      	ldr	r3, [r3, #12]
 80001b6:	4a09      	ldr	r2, [pc, #36]	; (80001dc <uart_callback+0x40>)
 80001b8:	f043 0320 	orr.w	r3, r3, #32
 80001bc:	60d3      	str	r3, [r2, #12]
	}else{
		GPIOA->ODR &= ~LED_PIN;
	}
}
 80001be:	e005      	b.n	80001cc <uart_callback+0x30>
		GPIOA->ODR &= ~LED_PIN;
 80001c0:	4b06      	ldr	r3, [pc, #24]	; (80001dc <uart_callback+0x40>)
 80001c2:	68db      	ldr	r3, [r3, #12]
 80001c4:	4a05      	ldr	r2, [pc, #20]	; (80001dc <uart_callback+0x40>)
 80001c6:	f023 0320 	bic.w	r3, r3, #32
 80001ca:	60d3      	str	r3, [r2, #12]
}
 80001cc:	bf00      	nop
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr
 80001d4:	40004400 	.word	0x40004400
 80001d8:	2000001c 	.word	0x2000001c
 80001dc:	40010800 	.word	0x40010800

080001e0 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	/*1. Check if RXNE is set*/
	if(USART2->SR & SR_RXNE){
 80001e4:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <USART2_IRQHandler+0x18>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	f003 0320 	and.w	r3, r3, #32
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <USART2_IRQHandler+0x14>

		/*2. Do something*/
		uart_callback();
 80001f0:	f7ff ffd4 	bl	800019c <uart_callback>
	}
}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	40004400 	.word	0x40004400

080001fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr

08000208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	db0b      	blt.n	8000232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 021f 	and.w	r2, r3, #31
 8000220:	4906      	ldr	r1, [pc, #24]	; (800023c <__NVIC_EnableIRQ+0x34>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	095b      	lsrs	r3, r3, #5
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr
 800023c:	e000e100 	.word	0xe000e100

08000240 <uart2_rx_interrupt_init>:
	USART2->CR1 |= CR1_TE | CR1_RE;

	/*Enable uart module */
	USART2->CR1 |= CR1_UE;
}
void uart2_rx_interrupt_init(void){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	/********** Configure uart gpio pin **********/
	/*1. Enable clock access to gpioa */
	RCC->APB2ENR |= GPIOAEN;
 8000244:	4b2c      	ldr	r3, [pc, #176]	; (80002f8 <uart2_rx_interrupt_init+0xb8>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a2b      	ldr	r2, [pc, #172]	; (80002f8 <uart2_rx_interrupt_init+0xb8>)
 800024a:	f043 0304 	orr.w	r3, r3, #4
 800024e:	6193      	str	r3, [r2, #24]
	/*2. Set PA2 mode to alternate function mode (TX/PA9, RX/PA10) */
//	AFIO->MAPR = 0x00000000;
//	AFIO->MAPR &= ~(1U << 2);
	GPIOA->CRL |= (1U << 15);
 8000250:	4b2a      	ldr	r3, [pc, #168]	; (80002fc <uart2_rx_interrupt_init+0xbc>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a29      	ldr	r2, [pc, #164]	; (80002fc <uart2_rx_interrupt_init+0xbc>)
 8000256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800025a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 14);
 800025c:	4b27      	ldr	r3, [pc, #156]	; (80002fc <uart2_rx_interrupt_init+0xbc>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a26      	ldr	r2, [pc, #152]	; (80002fc <uart2_rx_interrupt_init+0xbc>)
 8000262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000266:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 13);
 8000268:	4b24      	ldr	r3, [pc, #144]	; (80002fc <uart2_rx_interrupt_init+0xbc>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a23      	ldr	r2, [pc, #140]	; (80002fc <uart2_rx_interrupt_init+0xbc>)
 800026e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000272:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 12);
 8000274:	4b21      	ldr	r3, [pc, #132]	; (80002fc <uart2_rx_interrupt_init+0xbc>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a20      	ldr	r2, [pc, #128]	; (80002fc <uart2_rx_interrupt_init+0xbc>)
 800027a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800027e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 11);
 8000280:	4b1e      	ldr	r3, [pc, #120]	; (80002fc <uart2_rx_interrupt_init+0xbc>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a1d      	ldr	r2, [pc, #116]	; (80002fc <uart2_rx_interrupt_init+0xbc>)
 8000286:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800028a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 10);
 800028c:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <uart2_rx_interrupt_init+0xbc>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a1a      	ldr	r2, [pc, #104]	; (80002fc <uart2_rx_interrupt_init+0xbc>)
 8000292:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000296:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 9);
 8000298:	4b18      	ldr	r3, [pc, #96]	; (80002fc <uart2_rx_interrupt_init+0xbc>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a17      	ldr	r2, [pc, #92]	; (80002fc <uart2_rx_interrupt_init+0xbc>)
 800029e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002a2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 8);
 80002a4:	4b15      	ldr	r3, [pc, #84]	; (80002fc <uart2_rx_interrupt_init+0xbc>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a14      	ldr	r2, [pc, #80]	; (80002fc <uart2_rx_interrupt_init+0xbc>)
 80002aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002ae:	6013      	str	r3, [r2, #0]
	/*3. Set PA3 mode to alternate function mode (TX/PA9, RX/PA10) */
	//GPIOA->CRL |= 0x000A000;

	/********** Configure uart module **********/
	/*4. Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 80002b0:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <uart2_rx_interrupt_init+0xb8>)
 80002b2:	69db      	ldr	r3, [r3, #28]
 80002b4:	4a10      	ldr	r2, [pc, #64]	; (80002f8 <uart2_rx_interrupt_init+0xb8>)
 80002b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002ba:	61d3      	str	r3, [r2, #28]

	/*5. Configure baudrate */
	//USART2->BRR = 0x0EA6;
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80002bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002c0:	490f      	ldr	r1, [pc, #60]	; (8000300 <uart2_rx_interrupt_init+0xc0>)
 80002c2:	4810      	ldr	r0, [pc, #64]	; (8000304 <uart2_rx_interrupt_init+0xc4>)
 80002c4:	f000 f820 	bl	8000308 <uart_set_baudrate>

	/*6. Configure the transfer direction */
	USART2->CR1 |= CR1_TE | CR1_RE;
 80002c8:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <uart2_rx_interrupt_init+0xc4>)
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	4a0d      	ldr	r2, [pc, #52]	; (8000304 <uart2_rx_interrupt_init+0xc4>)
 80002ce:	f043 030c 	orr.w	r3, r3, #12
 80002d2:	60d3      	str	r3, [r2, #12]

	/*7. Enable RXNE interrupt */
	USART2->CR1 |= USART_CR1_RXNEIE;
 80002d4:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <uart2_rx_interrupt_init+0xc4>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <uart2_rx_interrupt_init+0xc4>)
 80002da:	f043 0320 	orr.w	r3, r3, #32
 80002de:	60d3      	str	r3, [r2, #12]

	/*8. Enable UART2 interrupt in NVIC*/
	NVIC_EnableIRQ(USART2_IRQn);
 80002e0:	2026      	movs	r0, #38	; 0x26
 80002e2:	f7ff ff91 	bl	8000208 <__NVIC_EnableIRQ>

	/*9. Enable uart module */
	USART2->CR1 |= CR1_UE;
 80002e6:	4b07      	ldr	r3, [pc, #28]	; (8000304 <uart2_rx_interrupt_init+0xc4>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	4a06      	ldr	r2, [pc, #24]	; (8000304 <uart2_rx_interrupt_init+0xc4>)
 80002ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002f0:	60d3      	str	r3, [r2, #12]
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40021000 	.word	0x40021000
 80002fc:	40010800 	.word	0x40010800
 8000300:	007a1200 	.word	0x007a1200
 8000304:	40004400 	.word	0x40004400

08000308 <uart_set_baudrate>:
	/*Make sure the transmit data register is empty before sending again*/
	while(!(USART2->SR & SR_TXE)){}
	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
}
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PheriphClk, uint32_t BaudRate){
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	60f8      	str	r0, [r7, #12]
 8000310:	60b9      	str	r1, [r7, #8]
 8000312:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PheriphClk, BaudRate);
 8000314:	6879      	ldr	r1, [r7, #4]
 8000316:	68b8      	ldr	r0, [r7, #8]
 8000318:	f000 f808 	bl	800032c <compute_uart_bd>
 800031c:	4603      	mov	r3, r0
 800031e:	461a      	mov	r2, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	609a      	str	r2, [r3, #8]
}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PheriphClk, uint32_t BaudRate){
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
	return ( (PheriphClk + (BaudRate/2U)) / BaudRate);
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	085a      	lsrs	r2, r3, #1
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	441a      	add	r2, r3
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	fbb2 f3f3 	udiv	r3, r2, r3
 8000344:	b29b      	uxth	r3, r3
}
 8000346:	4618      	mov	r0, r3
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000350:	480c      	ldr	r0, [pc, #48]	; (8000384 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000352:	490d      	ldr	r1, [pc, #52]	; (8000388 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000354:	4a0d      	ldr	r2, [pc, #52]	; (800038c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000358:	e002      	b.n	8000360 <LoopCopyDataInit>

0800035a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800035c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035e:	3304      	adds	r3, #4

08000360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000364:	d3f9      	bcc.n	800035a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000366:	4a0a      	ldr	r2, [pc, #40]	; (8000390 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000368:	4c0a      	ldr	r4, [pc, #40]	; (8000394 <LoopFillZerobss+0x22>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800036c:	e001      	b.n	8000372 <LoopFillZerobss>

0800036e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000370:	3204      	adds	r2, #4

08000372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000374:	d3fb      	bcc.n	800036e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000376:	f7ff ff41 	bl	80001fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800037a:	f000 f80f 	bl	800039c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037e:	f7ff fee5 	bl	800014c <main>
  bx lr
 8000382:	4770      	bx	lr
  ldr r0, =_sdata
 8000384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000388:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800038c:	08000404 	.word	0x08000404
  ldr r2, =_sbss
 8000390:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000394:	20000020 	.word	0x20000020

08000398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000398:	e7fe      	b.n	8000398 <ADC1_2_IRQHandler>
	...

0800039c <__libc_init_array>:
 800039c:	b570      	push	{r4, r5, r6, lr}
 800039e:	2600      	movs	r6, #0
 80003a0:	4d0c      	ldr	r5, [pc, #48]	; (80003d4 <__libc_init_array+0x38>)
 80003a2:	4c0d      	ldr	r4, [pc, #52]	; (80003d8 <__libc_init_array+0x3c>)
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	10a4      	asrs	r4, r4, #2
 80003a8:	42a6      	cmp	r6, r4
 80003aa:	d109      	bne.n	80003c0 <__libc_init_array+0x24>
 80003ac:	f000 f81a 	bl	80003e4 <_init>
 80003b0:	2600      	movs	r6, #0
 80003b2:	4d0a      	ldr	r5, [pc, #40]	; (80003dc <__libc_init_array+0x40>)
 80003b4:	4c0a      	ldr	r4, [pc, #40]	; (80003e0 <__libc_init_array+0x44>)
 80003b6:	1b64      	subs	r4, r4, r5
 80003b8:	10a4      	asrs	r4, r4, #2
 80003ba:	42a6      	cmp	r6, r4
 80003bc:	d105      	bne.n	80003ca <__libc_init_array+0x2e>
 80003be:	bd70      	pop	{r4, r5, r6, pc}
 80003c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c4:	4798      	blx	r3
 80003c6:	3601      	adds	r6, #1
 80003c8:	e7ee      	b.n	80003a8 <__libc_init_array+0xc>
 80003ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ce:	4798      	blx	r3
 80003d0:	3601      	adds	r6, #1
 80003d2:	e7f2      	b.n	80003ba <__libc_init_array+0x1e>
 80003d4:	080003fc 	.word	0x080003fc
 80003d8:	080003fc 	.word	0x080003fc
 80003dc:	080003fc 	.word	0x080003fc
 80003e0:	08000400 	.word	0x08000400

080003e4 <_init>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr

080003f0 <_fini>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr
