
10_adc_continuous_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001448  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08001554  08001554  00011554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001600  08001600  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001600  08001600  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001600  08001600  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001600  08001600  00011600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001604  08001604  00011604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  08001670  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001670  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002025  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b12  00000000  00000000  000220b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000358  00000000  00000000  00022bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002c0  00000000  00000000  00022f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000121c4  00000000  00000000  000231e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003d7d  00000000  00000000  000353a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080b84  00000000  00000000  00039121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b9ca5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012c4  00000000  00000000  000b9cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800153c 	.word	0x0800153c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800153c 	.word	0x0800153c

0800014c <pa1_adc_init>:
 * Therefore, you have to put 5 in "binary number" into SQ1, 2 into SQ2, 3into SQ3, and so fourth.
 * In this case, you are going to need to use only one adc, so you put 1 in binary number into SQ1.
 * Then, set the sequence length @ ADC_SQR1.
 * Length of sequence means with how many channels you are sampling.
 */
void pa1_adc_init(void){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0

	/*Enable clock access to GPIOA */
	RCC->APB2ENR |= GPIOAEN;
 8000150:	4b0f      	ldr	r3, [pc, #60]	; (8000190 <pa1_adc_init+0x44>)
 8000152:	699b      	ldr	r3, [r3, #24]
 8000154:	4a0e      	ldr	r2, [pc, #56]	; (8000190 <pa1_adc_init+0x44>)
 8000156:	f043 0304 	orr.w	r3, r3, #4
 800015a:	6193      	str	r3, [r2, #24]
	/*******Configure the ADC module*******/
	/*Enable end of Conversion interrupt */
	//ADC1->CR1 |= ADC_CR1_EOCIE;
	//NVIC_EnableIRQ(ADC1_2_IRQn);
	/*Enable clock access to ADC*/
	RCC->APB2ENR |= ADC1EN;
 800015c:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <pa1_adc_init+0x44>)
 800015e:	699b      	ldr	r3, [r3, #24]
 8000160:	4a0b      	ldr	r2, [pc, #44]	; (8000190 <pa1_adc_init+0x44>)
 8000162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000166:	6193      	str	r3, [r2, #24]
	//RCC->CFGR |= (1U << 14);

	/*Configure ADC parameters*/
	//ADC1->CR2 = 0;
	/*Conversion sequence start*/
	ADC1->SQR3 |= ADC_SQR3_SQ1_0;
 8000168:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <pa1_adc_init+0x48>)
 800016a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800016c:	4a09      	ldr	r2, [pc, #36]	; (8000194 <pa1_adc_init+0x48>)
 800016e:	f043 0301 	orr.w	r3, r3, #1
 8000172:	6353      	str	r3, [r2, #52]	; 0x34

	/*Conversion sequence length*/
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <pa1_adc_init+0x48>)
 8000176:	2200      	movs	r2, #0
 8000178:	62da      	str	r2, [r3, #44]	; 0x2c


	/*Enable ADC module*/

	ADC1->CR2 |= CR2_ADON | CR2_CONT;
 800017a:	4b06      	ldr	r3, [pc, #24]	; (8000194 <pa1_adc_init+0x48>)
 800017c:	689b      	ldr	r3, [r3, #8]
 800017e:	4a05      	ldr	r2, [pc, #20]	; (8000194 <pa1_adc_init+0x48>)
 8000180:	f043 0303 	orr.w	r3, r3, #3
 8000184:	6093      	str	r3, [r2, #8]

	//ADC1->CR1 |= (1U << 5);

}
 8000186:	bf00      	nop
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	40021000 	.word	0x40021000
 8000194:	40012400 	.word	0x40012400

08000198 <start_conversion>:

void start_conversion(void){
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	/*For STM32f103rb, ADON has to be enabled twice to start conversion.*/
	ADC1->CR2 |= CR2_ADON | CR2_CONT;
 800019c:	4b07      	ldr	r3, [pc, #28]	; (80001bc <start_conversion+0x24>)
 800019e:	689b      	ldr	r3, [r3, #8]
 80001a0:	4a06      	ldr	r2, [pc, #24]	; (80001bc <start_conversion+0x24>)
 80001a2:	f043 0303 	orr.w	r3, r3, #3
 80001a6:	6093      	str	r3, [r2, #8]
	/*Start ADC conversion*/
	ADC1->CR2 |= CR2_SWSTART;
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <start_conversion+0x24>)
 80001aa:	689b      	ldr	r3, [r3, #8]
 80001ac:	4a03      	ldr	r2, [pc, #12]	; (80001bc <start_conversion+0x24>)
 80001ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001b2:	6093      	str	r3, [r2, #8]
}
 80001b4:	bf00      	nop
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	40012400 	.word	0x40012400

080001c0 <adc_read>:

uint32_t adc_read(void){
 80001c0:	b480      	push	{r7}
 80001c2:	af00      	add	r7, sp, #0

	/*Wait for conversion to be complete*/
	while(!(ADC1->SR & SR_EOC)){}
 80001c4:	bf00      	nop
 80001c6:	4b06      	ldr	r3, [pc, #24]	; (80001e0 <adc_read+0x20>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	f003 0302 	and.w	r3, r3, #2
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d0f9      	beq.n	80001c6 <adc_read+0x6>
	/*Read converted results*/
	return (ADC1->DR);
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <adc_read+0x20>)
 80001d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	40012400 	.word	0x40012400

080001e4 <main>:
#include "adc.h"
#include "uart.h"

uint32_t sensor_value = 0;

int main(void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0

	uart2_tx_init();
 80001e8:	f000 f8f4 	bl	80003d4 <uart2_tx_init>
	pa1_adc_init();
 80001ec:	f7ff ffae 	bl	800014c <pa1_adc_init>
	start_conversion();
 80001f0:	f7ff ffd2 	bl	8000198 <start_conversion>

	while(1){
		sensor_value = adc_read();
 80001f4:	f7ff ffe4 	bl	80001c0 <adc_read>
 80001f8:	4603      	mov	r3, r0
 80001fa:	4a04      	ldr	r2, [pc, #16]	; (800020c <main+0x28>)
 80001fc:	6013      	str	r3, [r2, #0]
		printf("Sensor value: %d \n\r", (int)sensor_value);
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <main+0x28>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4619      	mov	r1, r3
 8000204:	4802      	ldr	r0, [pc, #8]	; (8000210 <main+0x2c>)
 8000206:	f000 fa05 	bl	8000614 <iprintf>
		sensor_value = adc_read();
 800020a:	e7f3      	b.n	80001f4 <main+0x10>
 800020c:	20000084 	.word	0x20000084
 8000210:	08001554 	.word	0x08001554

08000214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000218:	e7fe      	b.n	8000218 <NMI_Handler+0x4>

0800021a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800021a:	b480      	push	{r7}
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800021e:	e7fe      	b.n	800021e <HardFault_Handler+0x4>

08000220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000224:	e7fe      	b.n	8000224 <MemManage_Handler+0x4>

08000226 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000226:	b480      	push	{r7}
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800022a:	e7fe      	b.n	800022a <BusFault_Handler+0x4>

0800022c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000230:	e7fe      	b.n	8000230 <UsageFault_Handler+0x4>

08000232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000232:	b480      	push	{r7}
 8000234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000236:	bf00      	nop
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr

0800023e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800023e:	b480      	push	{r7}
 8000240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000242:	bf00      	nop
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr

0800024a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800024a:	b480      	push	{r7}
 800024c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800024e:	bf00      	nop
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr

08000256 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000256:	b580      	push	{r7, lr}
 8000258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800025a:	f000 f975 	bl	8000548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}

08000262 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000262:	b580      	push	{r7, lr}
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000266:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800026a:	f000 f97f 	bl	800056c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}

08000272 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000272:	b580      	push	{r7, lr}
 8000274:	b086      	sub	sp, #24
 8000276:	af00      	add	r7, sp, #0
 8000278:	60f8      	str	r0, [r7, #12]
 800027a:	60b9      	str	r1, [r7, #8]
 800027c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800027e:	2300      	movs	r3, #0
 8000280:	617b      	str	r3, [r7, #20]
 8000282:	e00a      	b.n	800029a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000284:	f3af 8000 	nop.w
 8000288:	4601      	mov	r1, r0
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	1c5a      	adds	r2, r3, #1
 800028e:	60ba      	str	r2, [r7, #8]
 8000290:	b2ca      	uxtb	r2, r1
 8000292:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	3301      	adds	r3, #1
 8000298:	617b      	str	r3, [r7, #20]
 800029a:	697a      	ldr	r2, [r7, #20]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	429a      	cmp	r2, r3
 80002a0:	dbf0      	blt.n	8000284 <_read+0x12>
	}

return len;
 80002a2:	687b      	ldr	r3, [r7, #4]
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3718      	adds	r7, #24
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002b8:	2300      	movs	r3, #0
 80002ba:	617b      	str	r3, [r7, #20]
 80002bc:	e009      	b.n	80002d2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	1c5a      	adds	r2, r3, #1
 80002c2:	60ba      	str	r2, [r7, #8]
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f878 	bl	80003bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	3301      	adds	r3, #1
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	697a      	ldr	r2, [r7, #20]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	dbf1      	blt.n	80002be <_write+0x12>
	}
	return len;
 80002da:	687b      	ldr	r3, [r7, #4]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	3718      	adds	r7, #24
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <_close>:

int _close(int file)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	return -1;
 80002ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr

080002fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002fa:	b480      	push	{r7}
 80002fc:	b083      	sub	sp, #12
 80002fe:	af00      	add	r7, sp, #0
 8000300:	6078      	str	r0, [r7, #4]
 8000302:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800030a:	605a      	str	r2, [r3, #4]
	return 0;
 800030c:	2300      	movs	r3, #0
}
 800030e:	4618      	mov	r0, r3
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr

08000318 <_isatty>:

int _isatty(int file)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	return 1;
 8000320:	2301      	movs	r3, #1
}
 8000322:	4618      	mov	r0, r3
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr

0800032c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	607a      	str	r2, [r7, #4]
	return 0;
 8000338:	2300      	movs	r3, #0
}
 800033a:	4618      	mov	r0, r3
 800033c:	3714      	adds	r7, #20
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr

08000344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800034c:	4a14      	ldr	r2, [pc, #80]	; (80003a0 <_sbrk+0x5c>)
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <_sbrk+0x60>)
 8000350:	1ad3      	subs	r3, r2, r3
 8000352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000358:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <_sbrk+0x64>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d102      	bne.n	8000366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <_sbrk+0x64>)
 8000362:	4a12      	ldr	r2, [pc, #72]	; (80003ac <_sbrk+0x68>)
 8000364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <_sbrk+0x64>)
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4413      	add	r3, r2
 800036e:	693a      	ldr	r2, [r7, #16]
 8000370:	429a      	cmp	r2, r3
 8000372:	d207      	bcs.n	8000384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000374:	f000 f91c 	bl	80005b0 <__errno>
 8000378:	4603      	mov	r3, r0
 800037a:	220c      	movs	r2, #12
 800037c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800037e:	f04f 33ff 	mov.w	r3, #4294967295
 8000382:	e009      	b.n	8000398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <_sbrk+0x64>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800038a:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <_sbrk+0x64>)
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4413      	add	r3, r2
 8000392:	4a05      	ldr	r2, [pc, #20]	; (80003a8 <_sbrk+0x64>)
 8000394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000396:	68fb      	ldr	r3, [r7, #12]
}
 8000398:	4618      	mov	r0, r3
 800039a:	3718      	adds	r7, #24
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20005000 	.word	0x20005000
 80003a4:	00000400 	.word	0x00000400
 80003a8:	20000088 	.word	0x20000088
 80003ac:	200000a0 	.word	0x200000a0

080003b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr

080003bc <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PheriphClk, uint32_t BaudRate);


void uart2_write(int ch);

int __io_putchar(int ch){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f000 f85f 	bl	8000488 <uart2_write>
	return ch;
 80003ca:	687b      	ldr	r3, [r7, #4]
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <uart2_tx_init>:
	/*Configure the transfer direction */
	USART2->CR1 |= CR1_TE | CR1_RE;
	/*Enable uart module */
	USART2->CR1 |= CR1_UE;
}
void uart2_tx_init(void){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	/********** Configure uart gpio pin **********/
	/*Enable clock access to gpioa */
	RCC->APB2ENR |= GPIOAEN;
 80003d8:	4b27      	ldr	r3, [pc, #156]	; (8000478 <uart2_tx_init+0xa4>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a26      	ldr	r2, [pc, #152]	; (8000478 <uart2_tx_init+0xa4>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	6193      	str	r3, [r2, #24]
	/*Set PA2 mode to alternate function mode (TX/PA9, RX/PA10) */
//	AFIO->MAPR = 0x00000000;
//	AFIO->MAPR &= ~(1U << 2);
	GPIOA->CRL &= ~(1U << 15);
 80003e4:	4b25      	ldr	r3, [pc, #148]	; (800047c <uart2_tx_init+0xa8>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a24      	ldr	r2, [pc, #144]	; (800047c <uart2_tx_init+0xa8>)
 80003ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80003ee:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 14);
 80003f0:	4b22      	ldr	r3, [pc, #136]	; (800047c <uart2_tx_init+0xa8>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a21      	ldr	r2, [pc, #132]	; (800047c <uart2_tx_init+0xa8>)
 80003f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003fa:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 13);
 80003fc:	4b1f      	ldr	r3, [pc, #124]	; (800047c <uart2_tx_init+0xa8>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a1e      	ldr	r2, [pc, #120]	; (800047c <uart2_tx_init+0xa8>)
 8000402:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000406:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 12);
 8000408:	4b1c      	ldr	r3, [pc, #112]	; (800047c <uart2_tx_init+0xa8>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a1b      	ldr	r2, [pc, #108]	; (800047c <uart2_tx_init+0xa8>)
 800040e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000412:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 11);
 8000414:	4b19      	ldr	r3, [pc, #100]	; (800047c <uart2_tx_init+0xa8>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a18      	ldr	r2, [pc, #96]	; (800047c <uart2_tx_init+0xa8>)
 800041a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800041e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 10);
 8000420:	4b16      	ldr	r3, [pc, #88]	; (800047c <uart2_tx_init+0xa8>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a15      	ldr	r2, [pc, #84]	; (800047c <uart2_tx_init+0xa8>)
 8000426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800042a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 9);
 800042c:	4b13      	ldr	r3, [pc, #76]	; (800047c <uart2_tx_init+0xa8>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a12      	ldr	r2, [pc, #72]	; (800047c <uart2_tx_init+0xa8>)
 8000432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000436:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 8);
 8000438:	4b10      	ldr	r3, [pc, #64]	; (800047c <uart2_tx_init+0xa8>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a0f      	ldr	r2, [pc, #60]	; (800047c <uart2_tx_init+0xa8>)
 800043e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000442:	6013      	str	r3, [r2, #0]

	/********** Configure uart module **********/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <uart2_tx_init+0xa4>)
 8000446:	69db      	ldr	r3, [r3, #28]
 8000448:	4a0b      	ldr	r2, [pc, #44]	; (8000478 <uart2_tx_init+0xa4>)
 800044a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800044e:	61d3      	str	r3, [r2, #28]
	/*Configure baudrate */
	//USART2->BRR = 0x0EA6;
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000454:	490a      	ldr	r1, [pc, #40]	; (8000480 <uart2_tx_init+0xac>)
 8000456:	480b      	ldr	r0, [pc, #44]	; (8000484 <uart2_tx_init+0xb0>)
 8000458:	f000 f82c 	bl	80004b4 <uart_set_baudrate>
	/*Configure the transfer direction */
	USART2->CR1 |= CR1_TE;
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <uart2_tx_init+0xb0>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	4a08      	ldr	r2, [pc, #32]	; (8000484 <uart2_tx_init+0xb0>)
 8000462:	f043 0308 	orr.w	r3, r3, #8
 8000466:	60d3      	str	r3, [r2, #12]
	/*Enable uart module */
	USART2->CR1 |= CR1_UE;
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <uart2_tx_init+0xb0>)
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	4a05      	ldr	r2, [pc, #20]	; (8000484 <uart2_tx_init+0xb0>)
 800046e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000472:	60d3      	str	r3, [r2, #12]
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40021000 	.word	0x40021000
 800047c:	40010800 	.word	0x40010800
 8000480:	007a1200 	.word	0x007a1200
 8000484:	40004400 	.word	0x40004400

08000488 <uart2_write>:
	while(!(USART2->SR & SR_RXNE)){}
	/*Read data*/
	return USART2->DR;
}

void uart2_write(int ch){
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty before sending again*/
	while(!(USART2->SR & SR_TXE)){}
 8000490:	bf00      	nop
 8000492:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <uart2_write+0x28>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800049a:	2b00      	cmp	r3, #0
 800049c:	d0f9      	beq.n	8000492 <uart2_write+0xa>
	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a03      	ldr	r2, [pc, #12]	; (80004b0 <uart2_write+0x28>)
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	6053      	str	r3, [r2, #4]
}
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40004400 	.word	0x40004400

080004b4 <uart_set_baudrate>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PheriphClk, uint32_t BaudRate){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	60b9      	str	r1, [r7, #8]
 80004be:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PheriphClk, BaudRate);
 80004c0:	6879      	ldr	r1, [r7, #4]
 80004c2:	68b8      	ldr	r0, [r7, #8]
 80004c4:	f000 f808 	bl	80004d8 <compute_uart_bd>
 80004c8:	4603      	mov	r3, r0
 80004ca:	461a      	mov	r2, r3
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	609a      	str	r2, [r3, #8]
}
 80004d0:	bf00      	nop
 80004d2:	3710      	adds	r7, #16
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PheriphClk, uint32_t BaudRate){
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
	return ( (PheriphClk + (BaudRate/2U)) / BaudRate);
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	085a      	lsrs	r2, r3, #1
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	441a      	add	r2, r3
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f0:	b29b      	uxth	r3, r3
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004fc:	480c      	ldr	r0, [pc, #48]	; (8000530 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004fe:	490d      	ldr	r1, [pc, #52]	; (8000534 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000500:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000504:	e002      	b.n	800050c <LoopCopyDataInit>

08000506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050a:	3304      	adds	r3, #4

0800050c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800050c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000510:	d3f9      	bcc.n	8000506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000512:	4a0a      	ldr	r2, [pc, #40]	; (800053c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000514:	4c0a      	ldr	r4, [pc, #40]	; (8000540 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000518:	e001      	b.n	800051e <LoopFillZerobss>

0800051a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800051c:	3204      	adds	r2, #4

0800051e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000520:	d3fb      	bcc.n	800051a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000522:	f7ff ff45 	bl	80003b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000526:	f000 f849 	bl	80005bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052a:	f7ff fe5b 	bl	80001e4 <main>
  bx lr
 800052e:	4770      	bx	lr
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000534:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000538:	08001608 	.word	0x08001608
  ldr r2, =_sbss
 800053c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000540:	200000a0 	.word	0x200000a0

08000544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000544:	e7fe      	b.n	8000544 <ADC1_2_IRQHandler>
	...

08000548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <HAL_IncTick+0x1c>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	461a      	mov	r2, r3
 8000552:	4b05      	ldr	r3, [pc, #20]	; (8000568 <HAL_IncTick+0x20>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4413      	add	r3, r2
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <HAL_IncTick+0x20>)
 800055a:	6013      	str	r3, [r2, #0]
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	20000000 	.word	0x20000000
 8000568:	2000008c 	.word	0x2000008c

0800056c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000578:	695a      	ldr	r2, [r3, #20]
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	4013      	ands	r3, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	d006      	beq.n	8000590 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000584:	88fb      	ldrh	r3, [r7, #6]
 8000586:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000588:	88fb      	ldrh	r3, [r7, #6]
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f806 	bl	800059c <HAL_GPIO_EXTI_Callback>
  }
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40010400 	.word	0x40010400

0800059c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <__errno>:
 80005b0:	4b01      	ldr	r3, [pc, #4]	; (80005b8 <__errno+0x8>)
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000004 	.word	0x20000004

080005bc <__libc_init_array>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2600      	movs	r6, #0
 80005c0:	4d0c      	ldr	r5, [pc, #48]	; (80005f4 <__libc_init_array+0x38>)
 80005c2:	4c0d      	ldr	r4, [pc, #52]	; (80005f8 <__libc_init_array+0x3c>)
 80005c4:	1b64      	subs	r4, r4, r5
 80005c6:	10a4      	asrs	r4, r4, #2
 80005c8:	42a6      	cmp	r6, r4
 80005ca:	d109      	bne.n	80005e0 <__libc_init_array+0x24>
 80005cc:	f000 ffb6 	bl	800153c <_init>
 80005d0:	2600      	movs	r6, #0
 80005d2:	4d0a      	ldr	r5, [pc, #40]	; (80005fc <__libc_init_array+0x40>)
 80005d4:	4c0a      	ldr	r4, [pc, #40]	; (8000600 <__libc_init_array+0x44>)
 80005d6:	1b64      	subs	r4, r4, r5
 80005d8:	10a4      	asrs	r4, r4, #2
 80005da:	42a6      	cmp	r6, r4
 80005dc:	d105      	bne.n	80005ea <__libc_init_array+0x2e>
 80005de:	bd70      	pop	{r4, r5, r6, pc}
 80005e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e4:	4798      	blx	r3
 80005e6:	3601      	adds	r6, #1
 80005e8:	e7ee      	b.n	80005c8 <__libc_init_array+0xc>
 80005ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ee:	4798      	blx	r3
 80005f0:	3601      	adds	r6, #1
 80005f2:	e7f2      	b.n	80005da <__libc_init_array+0x1e>
 80005f4:	08001600 	.word	0x08001600
 80005f8:	08001600 	.word	0x08001600
 80005fc:	08001600 	.word	0x08001600
 8000600:	08001604 	.word	0x08001604

08000604 <memset>:
 8000604:	4603      	mov	r3, r0
 8000606:	4402      	add	r2, r0
 8000608:	4293      	cmp	r3, r2
 800060a:	d100      	bne.n	800060e <memset+0xa>
 800060c:	4770      	bx	lr
 800060e:	f803 1b01 	strb.w	r1, [r3], #1
 8000612:	e7f9      	b.n	8000608 <memset+0x4>

08000614 <iprintf>:
 8000614:	b40f      	push	{r0, r1, r2, r3}
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <iprintf+0x2c>)
 8000618:	b513      	push	{r0, r1, r4, lr}
 800061a:	681c      	ldr	r4, [r3, #0]
 800061c:	b124      	cbz	r4, 8000628 <iprintf+0x14>
 800061e:	69a3      	ldr	r3, [r4, #24]
 8000620:	b913      	cbnz	r3, 8000628 <iprintf+0x14>
 8000622:	4620      	mov	r0, r4
 8000624:	f000 f866 	bl	80006f4 <__sinit>
 8000628:	ab05      	add	r3, sp, #20
 800062a:	4620      	mov	r0, r4
 800062c:	9a04      	ldr	r2, [sp, #16]
 800062e:	68a1      	ldr	r1, [r4, #8]
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	f000 f9bb 	bl	80009ac <_vfiprintf_r>
 8000636:	b002      	add	sp, #8
 8000638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800063c:	b004      	add	sp, #16
 800063e:	4770      	bx	lr
 8000640:	20000004 	.word	0x20000004

08000644 <std>:
 8000644:	2300      	movs	r3, #0
 8000646:	b510      	push	{r4, lr}
 8000648:	4604      	mov	r4, r0
 800064a:	e9c0 3300 	strd	r3, r3, [r0]
 800064e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000652:	6083      	str	r3, [r0, #8]
 8000654:	8181      	strh	r1, [r0, #12]
 8000656:	6643      	str	r3, [r0, #100]	; 0x64
 8000658:	81c2      	strh	r2, [r0, #14]
 800065a:	6183      	str	r3, [r0, #24]
 800065c:	4619      	mov	r1, r3
 800065e:	2208      	movs	r2, #8
 8000660:	305c      	adds	r0, #92	; 0x5c
 8000662:	f7ff ffcf 	bl	8000604 <memset>
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <std+0x38>)
 8000668:	6224      	str	r4, [r4, #32]
 800066a:	6263      	str	r3, [r4, #36]	; 0x24
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <std+0x3c>)
 800066e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <std+0x40>)
 8000672:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <std+0x44>)
 8000676:	6323      	str	r3, [r4, #48]	; 0x30
 8000678:	bd10      	pop	{r4, pc}
 800067a:	bf00      	nop
 800067c:	08000f59 	.word	0x08000f59
 8000680:	08000f7b 	.word	0x08000f7b
 8000684:	08000fb3 	.word	0x08000fb3
 8000688:	08000fd7 	.word	0x08000fd7

0800068c <_cleanup_r>:
 800068c:	4901      	ldr	r1, [pc, #4]	; (8000694 <_cleanup_r+0x8>)
 800068e:	f000 b8af 	b.w	80007f0 <_fwalk_reent>
 8000692:	bf00      	nop
 8000694:	080012a9 	.word	0x080012a9

08000698 <__sfmoreglue>:
 8000698:	2268      	movs	r2, #104	; 0x68
 800069a:	b570      	push	{r4, r5, r6, lr}
 800069c:	1e4d      	subs	r5, r1, #1
 800069e:	4355      	muls	r5, r2
 80006a0:	460e      	mov	r6, r1
 80006a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80006a6:	f000 f8e5 	bl	8000874 <_malloc_r>
 80006aa:	4604      	mov	r4, r0
 80006ac:	b140      	cbz	r0, 80006c0 <__sfmoreglue+0x28>
 80006ae:	2100      	movs	r1, #0
 80006b0:	e9c0 1600 	strd	r1, r6, [r0]
 80006b4:	300c      	adds	r0, #12
 80006b6:	60a0      	str	r0, [r4, #8]
 80006b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80006bc:	f7ff ffa2 	bl	8000604 <memset>
 80006c0:	4620      	mov	r0, r4
 80006c2:	bd70      	pop	{r4, r5, r6, pc}

080006c4 <__sfp_lock_acquire>:
 80006c4:	4801      	ldr	r0, [pc, #4]	; (80006cc <__sfp_lock_acquire+0x8>)
 80006c6:	f000 b8b3 	b.w	8000830 <__retarget_lock_acquire_recursive>
 80006ca:	bf00      	nop
 80006cc:	20000091 	.word	0x20000091

080006d0 <__sfp_lock_release>:
 80006d0:	4801      	ldr	r0, [pc, #4]	; (80006d8 <__sfp_lock_release+0x8>)
 80006d2:	f000 b8ae 	b.w	8000832 <__retarget_lock_release_recursive>
 80006d6:	bf00      	nop
 80006d8:	20000091 	.word	0x20000091

080006dc <__sinit_lock_acquire>:
 80006dc:	4801      	ldr	r0, [pc, #4]	; (80006e4 <__sinit_lock_acquire+0x8>)
 80006de:	f000 b8a7 	b.w	8000830 <__retarget_lock_acquire_recursive>
 80006e2:	bf00      	nop
 80006e4:	20000092 	.word	0x20000092

080006e8 <__sinit_lock_release>:
 80006e8:	4801      	ldr	r0, [pc, #4]	; (80006f0 <__sinit_lock_release+0x8>)
 80006ea:	f000 b8a2 	b.w	8000832 <__retarget_lock_release_recursive>
 80006ee:	bf00      	nop
 80006f0:	20000092 	.word	0x20000092

080006f4 <__sinit>:
 80006f4:	b510      	push	{r4, lr}
 80006f6:	4604      	mov	r4, r0
 80006f8:	f7ff fff0 	bl	80006dc <__sinit_lock_acquire>
 80006fc:	69a3      	ldr	r3, [r4, #24]
 80006fe:	b11b      	cbz	r3, 8000708 <__sinit+0x14>
 8000700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000704:	f7ff bff0 	b.w	80006e8 <__sinit_lock_release>
 8000708:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800070c:	6523      	str	r3, [r4, #80]	; 0x50
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <__sinit+0x68>)
 8000710:	4a13      	ldr	r2, [pc, #76]	; (8000760 <__sinit+0x6c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	62a2      	str	r2, [r4, #40]	; 0x28
 8000716:	42a3      	cmp	r3, r4
 8000718:	bf08      	it	eq
 800071a:	2301      	moveq	r3, #1
 800071c:	4620      	mov	r0, r4
 800071e:	bf08      	it	eq
 8000720:	61a3      	streq	r3, [r4, #24]
 8000722:	f000 f81f 	bl	8000764 <__sfp>
 8000726:	6060      	str	r0, [r4, #4]
 8000728:	4620      	mov	r0, r4
 800072a:	f000 f81b 	bl	8000764 <__sfp>
 800072e:	60a0      	str	r0, [r4, #8]
 8000730:	4620      	mov	r0, r4
 8000732:	f000 f817 	bl	8000764 <__sfp>
 8000736:	2200      	movs	r2, #0
 8000738:	2104      	movs	r1, #4
 800073a:	60e0      	str	r0, [r4, #12]
 800073c:	6860      	ldr	r0, [r4, #4]
 800073e:	f7ff ff81 	bl	8000644 <std>
 8000742:	2201      	movs	r2, #1
 8000744:	2109      	movs	r1, #9
 8000746:	68a0      	ldr	r0, [r4, #8]
 8000748:	f7ff ff7c 	bl	8000644 <std>
 800074c:	2202      	movs	r2, #2
 800074e:	2112      	movs	r1, #18
 8000750:	68e0      	ldr	r0, [r4, #12]
 8000752:	f7ff ff77 	bl	8000644 <std>
 8000756:	2301      	movs	r3, #1
 8000758:	61a3      	str	r3, [r4, #24]
 800075a:	e7d1      	b.n	8000700 <__sinit+0xc>
 800075c:	08001568 	.word	0x08001568
 8000760:	0800068d 	.word	0x0800068d

08000764 <__sfp>:
 8000764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000766:	4607      	mov	r7, r0
 8000768:	f7ff ffac 	bl	80006c4 <__sfp_lock_acquire>
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <__sfp+0x84>)
 800076e:	681e      	ldr	r6, [r3, #0]
 8000770:	69b3      	ldr	r3, [r6, #24]
 8000772:	b913      	cbnz	r3, 800077a <__sfp+0x16>
 8000774:	4630      	mov	r0, r6
 8000776:	f7ff ffbd 	bl	80006f4 <__sinit>
 800077a:	3648      	adds	r6, #72	; 0x48
 800077c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000780:	3b01      	subs	r3, #1
 8000782:	d503      	bpl.n	800078c <__sfp+0x28>
 8000784:	6833      	ldr	r3, [r6, #0]
 8000786:	b30b      	cbz	r3, 80007cc <__sfp+0x68>
 8000788:	6836      	ldr	r6, [r6, #0]
 800078a:	e7f7      	b.n	800077c <__sfp+0x18>
 800078c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000790:	b9d5      	cbnz	r5, 80007c8 <__sfp+0x64>
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <__sfp+0x88>)
 8000794:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000798:	60e3      	str	r3, [r4, #12]
 800079a:	6665      	str	r5, [r4, #100]	; 0x64
 800079c:	f000 f847 	bl	800082e <__retarget_lock_init_recursive>
 80007a0:	f7ff ff96 	bl	80006d0 <__sfp_lock_release>
 80007a4:	2208      	movs	r2, #8
 80007a6:	4629      	mov	r1, r5
 80007a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80007ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80007b0:	6025      	str	r5, [r4, #0]
 80007b2:	61a5      	str	r5, [r4, #24]
 80007b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80007b8:	f7ff ff24 	bl	8000604 <memset>
 80007bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80007c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80007c4:	4620      	mov	r0, r4
 80007c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007c8:	3468      	adds	r4, #104	; 0x68
 80007ca:	e7d9      	b.n	8000780 <__sfp+0x1c>
 80007cc:	2104      	movs	r1, #4
 80007ce:	4638      	mov	r0, r7
 80007d0:	f7ff ff62 	bl	8000698 <__sfmoreglue>
 80007d4:	4604      	mov	r4, r0
 80007d6:	6030      	str	r0, [r6, #0]
 80007d8:	2800      	cmp	r0, #0
 80007da:	d1d5      	bne.n	8000788 <__sfp+0x24>
 80007dc:	f7ff ff78 	bl	80006d0 <__sfp_lock_release>
 80007e0:	230c      	movs	r3, #12
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	e7ee      	b.n	80007c4 <__sfp+0x60>
 80007e6:	bf00      	nop
 80007e8:	08001568 	.word	0x08001568
 80007ec:	ffff0001 	.word	0xffff0001

080007f0 <_fwalk_reent>:
 80007f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007f4:	4606      	mov	r6, r0
 80007f6:	4688      	mov	r8, r1
 80007f8:	2700      	movs	r7, #0
 80007fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80007fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000802:	f1b9 0901 	subs.w	r9, r9, #1
 8000806:	d505      	bpl.n	8000814 <_fwalk_reent+0x24>
 8000808:	6824      	ldr	r4, [r4, #0]
 800080a:	2c00      	cmp	r4, #0
 800080c:	d1f7      	bne.n	80007fe <_fwalk_reent+0xe>
 800080e:	4638      	mov	r0, r7
 8000810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000814:	89ab      	ldrh	r3, [r5, #12]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d907      	bls.n	800082a <_fwalk_reent+0x3a>
 800081a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800081e:	3301      	adds	r3, #1
 8000820:	d003      	beq.n	800082a <_fwalk_reent+0x3a>
 8000822:	4629      	mov	r1, r5
 8000824:	4630      	mov	r0, r6
 8000826:	47c0      	blx	r8
 8000828:	4307      	orrs	r7, r0
 800082a:	3568      	adds	r5, #104	; 0x68
 800082c:	e7e9      	b.n	8000802 <_fwalk_reent+0x12>

0800082e <__retarget_lock_init_recursive>:
 800082e:	4770      	bx	lr

08000830 <__retarget_lock_acquire_recursive>:
 8000830:	4770      	bx	lr

08000832 <__retarget_lock_release_recursive>:
 8000832:	4770      	bx	lr

08000834 <sbrk_aligned>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	4e0e      	ldr	r6, [pc, #56]	; (8000870 <sbrk_aligned+0x3c>)
 8000838:	460c      	mov	r4, r1
 800083a:	6831      	ldr	r1, [r6, #0]
 800083c:	4605      	mov	r5, r0
 800083e:	b911      	cbnz	r1, 8000846 <sbrk_aligned+0x12>
 8000840:	f000 fb7a 	bl	8000f38 <_sbrk_r>
 8000844:	6030      	str	r0, [r6, #0]
 8000846:	4621      	mov	r1, r4
 8000848:	4628      	mov	r0, r5
 800084a:	f000 fb75 	bl	8000f38 <_sbrk_r>
 800084e:	1c43      	adds	r3, r0, #1
 8000850:	d00a      	beq.n	8000868 <sbrk_aligned+0x34>
 8000852:	1cc4      	adds	r4, r0, #3
 8000854:	f024 0403 	bic.w	r4, r4, #3
 8000858:	42a0      	cmp	r0, r4
 800085a:	d007      	beq.n	800086c <sbrk_aligned+0x38>
 800085c:	1a21      	subs	r1, r4, r0
 800085e:	4628      	mov	r0, r5
 8000860:	f000 fb6a 	bl	8000f38 <_sbrk_r>
 8000864:	3001      	adds	r0, #1
 8000866:	d101      	bne.n	800086c <sbrk_aligned+0x38>
 8000868:	f04f 34ff 	mov.w	r4, #4294967295
 800086c:	4620      	mov	r0, r4
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	20000098 	.word	0x20000098

08000874 <_malloc_r>:
 8000874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000878:	1ccd      	adds	r5, r1, #3
 800087a:	f025 0503 	bic.w	r5, r5, #3
 800087e:	3508      	adds	r5, #8
 8000880:	2d0c      	cmp	r5, #12
 8000882:	bf38      	it	cc
 8000884:	250c      	movcc	r5, #12
 8000886:	2d00      	cmp	r5, #0
 8000888:	4607      	mov	r7, r0
 800088a:	db01      	blt.n	8000890 <_malloc_r+0x1c>
 800088c:	42a9      	cmp	r1, r5
 800088e:	d905      	bls.n	800089c <_malloc_r+0x28>
 8000890:	230c      	movs	r3, #12
 8000892:	2600      	movs	r6, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4630      	mov	r0, r6
 8000898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800089c:	4e2e      	ldr	r6, [pc, #184]	; (8000958 <_malloc_r+0xe4>)
 800089e:	f000 fdc5 	bl	800142c <__malloc_lock>
 80008a2:	6833      	ldr	r3, [r6, #0]
 80008a4:	461c      	mov	r4, r3
 80008a6:	bb34      	cbnz	r4, 80008f6 <_malloc_r+0x82>
 80008a8:	4629      	mov	r1, r5
 80008aa:	4638      	mov	r0, r7
 80008ac:	f7ff ffc2 	bl	8000834 <sbrk_aligned>
 80008b0:	1c43      	adds	r3, r0, #1
 80008b2:	4604      	mov	r4, r0
 80008b4:	d14d      	bne.n	8000952 <_malloc_r+0xde>
 80008b6:	6834      	ldr	r4, [r6, #0]
 80008b8:	4626      	mov	r6, r4
 80008ba:	2e00      	cmp	r6, #0
 80008bc:	d140      	bne.n	8000940 <_malloc_r+0xcc>
 80008be:	6823      	ldr	r3, [r4, #0]
 80008c0:	4631      	mov	r1, r6
 80008c2:	4638      	mov	r0, r7
 80008c4:	eb04 0803 	add.w	r8, r4, r3
 80008c8:	f000 fb36 	bl	8000f38 <_sbrk_r>
 80008cc:	4580      	cmp	r8, r0
 80008ce:	d13a      	bne.n	8000946 <_malloc_r+0xd2>
 80008d0:	6821      	ldr	r1, [r4, #0]
 80008d2:	3503      	adds	r5, #3
 80008d4:	1a6d      	subs	r5, r5, r1
 80008d6:	f025 0503 	bic.w	r5, r5, #3
 80008da:	3508      	adds	r5, #8
 80008dc:	2d0c      	cmp	r5, #12
 80008de:	bf38      	it	cc
 80008e0:	250c      	movcc	r5, #12
 80008e2:	4638      	mov	r0, r7
 80008e4:	4629      	mov	r1, r5
 80008e6:	f7ff ffa5 	bl	8000834 <sbrk_aligned>
 80008ea:	3001      	adds	r0, #1
 80008ec:	d02b      	beq.n	8000946 <_malloc_r+0xd2>
 80008ee:	6823      	ldr	r3, [r4, #0]
 80008f0:	442b      	add	r3, r5
 80008f2:	6023      	str	r3, [r4, #0]
 80008f4:	e00e      	b.n	8000914 <_malloc_r+0xa0>
 80008f6:	6822      	ldr	r2, [r4, #0]
 80008f8:	1b52      	subs	r2, r2, r5
 80008fa:	d41e      	bmi.n	800093a <_malloc_r+0xc6>
 80008fc:	2a0b      	cmp	r2, #11
 80008fe:	d916      	bls.n	800092e <_malloc_r+0xba>
 8000900:	1961      	adds	r1, r4, r5
 8000902:	42a3      	cmp	r3, r4
 8000904:	6025      	str	r5, [r4, #0]
 8000906:	bf18      	it	ne
 8000908:	6059      	strne	r1, [r3, #4]
 800090a:	6863      	ldr	r3, [r4, #4]
 800090c:	bf08      	it	eq
 800090e:	6031      	streq	r1, [r6, #0]
 8000910:	5162      	str	r2, [r4, r5]
 8000912:	604b      	str	r3, [r1, #4]
 8000914:	4638      	mov	r0, r7
 8000916:	f104 060b 	add.w	r6, r4, #11
 800091a:	f000 fd8d 	bl	8001438 <__malloc_unlock>
 800091e:	f026 0607 	bic.w	r6, r6, #7
 8000922:	1d23      	adds	r3, r4, #4
 8000924:	1af2      	subs	r2, r6, r3
 8000926:	d0b6      	beq.n	8000896 <_malloc_r+0x22>
 8000928:	1b9b      	subs	r3, r3, r6
 800092a:	50a3      	str	r3, [r4, r2]
 800092c:	e7b3      	b.n	8000896 <_malloc_r+0x22>
 800092e:	6862      	ldr	r2, [r4, #4]
 8000930:	42a3      	cmp	r3, r4
 8000932:	bf0c      	ite	eq
 8000934:	6032      	streq	r2, [r6, #0]
 8000936:	605a      	strne	r2, [r3, #4]
 8000938:	e7ec      	b.n	8000914 <_malloc_r+0xa0>
 800093a:	4623      	mov	r3, r4
 800093c:	6864      	ldr	r4, [r4, #4]
 800093e:	e7b2      	b.n	80008a6 <_malloc_r+0x32>
 8000940:	4634      	mov	r4, r6
 8000942:	6876      	ldr	r6, [r6, #4]
 8000944:	e7b9      	b.n	80008ba <_malloc_r+0x46>
 8000946:	230c      	movs	r3, #12
 8000948:	4638      	mov	r0, r7
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	f000 fd74 	bl	8001438 <__malloc_unlock>
 8000950:	e7a1      	b.n	8000896 <_malloc_r+0x22>
 8000952:	6025      	str	r5, [r4, #0]
 8000954:	e7de      	b.n	8000914 <_malloc_r+0xa0>
 8000956:	bf00      	nop
 8000958:	20000094 	.word	0x20000094

0800095c <__sfputc_r>:
 800095c:	6893      	ldr	r3, [r2, #8]
 800095e:	b410      	push	{r4}
 8000960:	3b01      	subs	r3, #1
 8000962:	2b00      	cmp	r3, #0
 8000964:	6093      	str	r3, [r2, #8]
 8000966:	da07      	bge.n	8000978 <__sfputc_r+0x1c>
 8000968:	6994      	ldr	r4, [r2, #24]
 800096a:	42a3      	cmp	r3, r4
 800096c:	db01      	blt.n	8000972 <__sfputc_r+0x16>
 800096e:	290a      	cmp	r1, #10
 8000970:	d102      	bne.n	8000978 <__sfputc_r+0x1c>
 8000972:	bc10      	pop	{r4}
 8000974:	f000 bb34 	b.w	8000fe0 <__swbuf_r>
 8000978:	6813      	ldr	r3, [r2, #0]
 800097a:	1c58      	adds	r0, r3, #1
 800097c:	6010      	str	r0, [r2, #0]
 800097e:	7019      	strb	r1, [r3, #0]
 8000980:	4608      	mov	r0, r1
 8000982:	bc10      	pop	{r4}
 8000984:	4770      	bx	lr

08000986 <__sfputs_r>:
 8000986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000988:	4606      	mov	r6, r0
 800098a:	460f      	mov	r7, r1
 800098c:	4614      	mov	r4, r2
 800098e:	18d5      	adds	r5, r2, r3
 8000990:	42ac      	cmp	r4, r5
 8000992:	d101      	bne.n	8000998 <__sfputs_r+0x12>
 8000994:	2000      	movs	r0, #0
 8000996:	e007      	b.n	80009a8 <__sfputs_r+0x22>
 8000998:	463a      	mov	r2, r7
 800099a:	4630      	mov	r0, r6
 800099c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009a0:	f7ff ffdc 	bl	800095c <__sfputc_r>
 80009a4:	1c43      	adds	r3, r0, #1
 80009a6:	d1f3      	bne.n	8000990 <__sfputs_r+0xa>
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080009ac <_vfiprintf_r>:
 80009ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009b0:	460d      	mov	r5, r1
 80009b2:	4614      	mov	r4, r2
 80009b4:	4698      	mov	r8, r3
 80009b6:	4606      	mov	r6, r0
 80009b8:	b09d      	sub	sp, #116	; 0x74
 80009ba:	b118      	cbz	r0, 80009c4 <_vfiprintf_r+0x18>
 80009bc:	6983      	ldr	r3, [r0, #24]
 80009be:	b90b      	cbnz	r3, 80009c4 <_vfiprintf_r+0x18>
 80009c0:	f7ff fe98 	bl	80006f4 <__sinit>
 80009c4:	4b89      	ldr	r3, [pc, #548]	; (8000bec <_vfiprintf_r+0x240>)
 80009c6:	429d      	cmp	r5, r3
 80009c8:	d11b      	bne.n	8000a02 <_vfiprintf_r+0x56>
 80009ca:	6875      	ldr	r5, [r6, #4]
 80009cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80009ce:	07d9      	lsls	r1, r3, #31
 80009d0:	d405      	bmi.n	80009de <_vfiprintf_r+0x32>
 80009d2:	89ab      	ldrh	r3, [r5, #12]
 80009d4:	059a      	lsls	r2, r3, #22
 80009d6:	d402      	bmi.n	80009de <_vfiprintf_r+0x32>
 80009d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80009da:	f7ff ff29 	bl	8000830 <__retarget_lock_acquire_recursive>
 80009de:	89ab      	ldrh	r3, [r5, #12]
 80009e0:	071b      	lsls	r3, r3, #28
 80009e2:	d501      	bpl.n	80009e8 <_vfiprintf_r+0x3c>
 80009e4:	692b      	ldr	r3, [r5, #16]
 80009e6:	b9eb      	cbnz	r3, 8000a24 <_vfiprintf_r+0x78>
 80009e8:	4629      	mov	r1, r5
 80009ea:	4630      	mov	r0, r6
 80009ec:	f000 fb5c 	bl	80010a8 <__swsetup_r>
 80009f0:	b1c0      	cbz	r0, 8000a24 <_vfiprintf_r+0x78>
 80009f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80009f4:	07dc      	lsls	r4, r3, #31
 80009f6:	d50e      	bpl.n	8000a16 <_vfiprintf_r+0x6a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	b01d      	add	sp, #116	; 0x74
 80009fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a02:	4b7b      	ldr	r3, [pc, #492]	; (8000bf0 <_vfiprintf_r+0x244>)
 8000a04:	429d      	cmp	r5, r3
 8000a06:	d101      	bne.n	8000a0c <_vfiprintf_r+0x60>
 8000a08:	68b5      	ldr	r5, [r6, #8]
 8000a0a:	e7df      	b.n	80009cc <_vfiprintf_r+0x20>
 8000a0c:	4b79      	ldr	r3, [pc, #484]	; (8000bf4 <_vfiprintf_r+0x248>)
 8000a0e:	429d      	cmp	r5, r3
 8000a10:	bf08      	it	eq
 8000a12:	68f5      	ldreq	r5, [r6, #12]
 8000a14:	e7da      	b.n	80009cc <_vfiprintf_r+0x20>
 8000a16:	89ab      	ldrh	r3, [r5, #12]
 8000a18:	0598      	lsls	r0, r3, #22
 8000a1a:	d4ed      	bmi.n	80009f8 <_vfiprintf_r+0x4c>
 8000a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a1e:	f7ff ff08 	bl	8000832 <__retarget_lock_release_recursive>
 8000a22:	e7e9      	b.n	80009f8 <_vfiprintf_r+0x4c>
 8000a24:	2300      	movs	r3, #0
 8000a26:	9309      	str	r3, [sp, #36]	; 0x24
 8000a28:	2320      	movs	r3, #32
 8000a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000a2e:	2330      	movs	r3, #48	; 0x30
 8000a30:	f04f 0901 	mov.w	r9, #1
 8000a34:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a38:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000bf8 <_vfiprintf_r+0x24c>
 8000a3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a40:	4623      	mov	r3, r4
 8000a42:	469a      	mov	sl, r3
 8000a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a48:	b10a      	cbz	r2, 8000a4e <_vfiprintf_r+0xa2>
 8000a4a:	2a25      	cmp	r2, #37	; 0x25
 8000a4c:	d1f9      	bne.n	8000a42 <_vfiprintf_r+0x96>
 8000a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8000a52:	d00b      	beq.n	8000a6c <_vfiprintf_r+0xc0>
 8000a54:	465b      	mov	r3, fp
 8000a56:	4622      	mov	r2, r4
 8000a58:	4629      	mov	r1, r5
 8000a5a:	4630      	mov	r0, r6
 8000a5c:	f7ff ff93 	bl	8000986 <__sfputs_r>
 8000a60:	3001      	adds	r0, #1
 8000a62:	f000 80aa 	beq.w	8000bba <_vfiprintf_r+0x20e>
 8000a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000a68:	445a      	add	r2, fp
 8000a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8000a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f000 80a2 	beq.w	8000bba <_vfiprintf_r+0x20e>
 8000a76:	2300      	movs	r3, #0
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a80:	f10a 0a01 	add.w	sl, sl, #1
 8000a84:	9304      	str	r3, [sp, #16]
 8000a86:	9307      	str	r3, [sp, #28]
 8000a88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8000a8e:	4654      	mov	r4, sl
 8000a90:	2205      	movs	r2, #5
 8000a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a96:	4858      	ldr	r0, [pc, #352]	; (8000bf8 <_vfiprintf_r+0x24c>)
 8000a98:	f000 fcba 	bl	8001410 <memchr>
 8000a9c:	9a04      	ldr	r2, [sp, #16]
 8000a9e:	b9d8      	cbnz	r0, 8000ad8 <_vfiprintf_r+0x12c>
 8000aa0:	06d1      	lsls	r1, r2, #27
 8000aa2:	bf44      	itt	mi
 8000aa4:	2320      	movmi	r3, #32
 8000aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000aaa:	0713      	lsls	r3, r2, #28
 8000aac:	bf44      	itt	mi
 8000aae:	232b      	movmi	r3, #43	; 0x2b
 8000ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8000ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8000aba:	d015      	beq.n	8000ae8 <_vfiprintf_r+0x13c>
 8000abc:	4654      	mov	r4, sl
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f04f 0c0a 	mov.w	ip, #10
 8000ac4:	9a07      	ldr	r2, [sp, #28]
 8000ac6:	4621      	mov	r1, r4
 8000ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000acc:	3b30      	subs	r3, #48	; 0x30
 8000ace:	2b09      	cmp	r3, #9
 8000ad0:	d94e      	bls.n	8000b70 <_vfiprintf_r+0x1c4>
 8000ad2:	b1b0      	cbz	r0, 8000b02 <_vfiprintf_r+0x156>
 8000ad4:	9207      	str	r2, [sp, #28]
 8000ad6:	e014      	b.n	8000b02 <_vfiprintf_r+0x156>
 8000ad8:	eba0 0308 	sub.w	r3, r0, r8
 8000adc:	fa09 f303 	lsl.w	r3, r9, r3
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	46a2      	mov	sl, r4
 8000ae4:	9304      	str	r3, [sp, #16]
 8000ae6:	e7d2      	b.n	8000a8e <_vfiprintf_r+0xe2>
 8000ae8:	9b03      	ldr	r3, [sp, #12]
 8000aea:	1d19      	adds	r1, r3, #4
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	9103      	str	r1, [sp, #12]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	bfbb      	ittet	lt
 8000af4:	425b      	neglt	r3, r3
 8000af6:	f042 0202 	orrlt.w	r2, r2, #2
 8000afa:	9307      	strge	r3, [sp, #28]
 8000afc:	9307      	strlt	r3, [sp, #28]
 8000afe:	bfb8      	it	lt
 8000b00:	9204      	strlt	r2, [sp, #16]
 8000b02:	7823      	ldrb	r3, [r4, #0]
 8000b04:	2b2e      	cmp	r3, #46	; 0x2e
 8000b06:	d10c      	bne.n	8000b22 <_vfiprintf_r+0x176>
 8000b08:	7863      	ldrb	r3, [r4, #1]
 8000b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8000b0c:	d135      	bne.n	8000b7a <_vfiprintf_r+0x1ce>
 8000b0e:	9b03      	ldr	r3, [sp, #12]
 8000b10:	3402      	adds	r4, #2
 8000b12:	1d1a      	adds	r2, r3, #4
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	9203      	str	r2, [sp, #12]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	bfb8      	it	lt
 8000b1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8000b20:	9305      	str	r3, [sp, #20]
 8000b22:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8000bfc <_vfiprintf_r+0x250>
 8000b26:	2203      	movs	r2, #3
 8000b28:	4650      	mov	r0, sl
 8000b2a:	7821      	ldrb	r1, [r4, #0]
 8000b2c:	f000 fc70 	bl	8001410 <memchr>
 8000b30:	b140      	cbz	r0, 8000b44 <_vfiprintf_r+0x198>
 8000b32:	2340      	movs	r3, #64	; 0x40
 8000b34:	eba0 000a 	sub.w	r0, r0, sl
 8000b38:	fa03 f000 	lsl.w	r0, r3, r0
 8000b3c:	9b04      	ldr	r3, [sp, #16]
 8000b3e:	3401      	adds	r4, #1
 8000b40:	4303      	orrs	r3, r0
 8000b42:	9304      	str	r3, [sp, #16]
 8000b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b48:	2206      	movs	r2, #6
 8000b4a:	482d      	ldr	r0, [pc, #180]	; (8000c00 <_vfiprintf_r+0x254>)
 8000b4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000b50:	f000 fc5e 	bl	8001410 <memchr>
 8000b54:	2800      	cmp	r0, #0
 8000b56:	d03f      	beq.n	8000bd8 <_vfiprintf_r+0x22c>
 8000b58:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <_vfiprintf_r+0x258>)
 8000b5a:	bb1b      	cbnz	r3, 8000ba4 <_vfiprintf_r+0x1f8>
 8000b5c:	9b03      	ldr	r3, [sp, #12]
 8000b5e:	3307      	adds	r3, #7
 8000b60:	f023 0307 	bic.w	r3, r3, #7
 8000b64:	3308      	adds	r3, #8
 8000b66:	9303      	str	r3, [sp, #12]
 8000b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b6a:	443b      	add	r3, r7
 8000b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8000b6e:	e767      	b.n	8000a40 <_vfiprintf_r+0x94>
 8000b70:	460c      	mov	r4, r1
 8000b72:	2001      	movs	r0, #1
 8000b74:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b78:	e7a5      	b.n	8000ac6 <_vfiprintf_r+0x11a>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f04f 0c0a 	mov.w	ip, #10
 8000b80:	4619      	mov	r1, r3
 8000b82:	3401      	adds	r4, #1
 8000b84:	9305      	str	r3, [sp, #20]
 8000b86:	4620      	mov	r0, r4
 8000b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b8c:	3a30      	subs	r2, #48	; 0x30
 8000b8e:	2a09      	cmp	r2, #9
 8000b90:	d903      	bls.n	8000b9a <_vfiprintf_r+0x1ee>
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0c5      	beq.n	8000b22 <_vfiprintf_r+0x176>
 8000b96:	9105      	str	r1, [sp, #20]
 8000b98:	e7c3      	b.n	8000b22 <_vfiprintf_r+0x176>
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ba2:	e7f0      	b.n	8000b86 <_vfiprintf_r+0x1da>
 8000ba4:	ab03      	add	r3, sp, #12
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	462a      	mov	r2, r5
 8000baa:	4630      	mov	r0, r6
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <_vfiprintf_r+0x25c>)
 8000bae:	a904      	add	r1, sp, #16
 8000bb0:	f3af 8000 	nop.w
 8000bb4:	4607      	mov	r7, r0
 8000bb6:	1c78      	adds	r0, r7, #1
 8000bb8:	d1d6      	bne.n	8000b68 <_vfiprintf_r+0x1bc>
 8000bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bbc:	07d9      	lsls	r1, r3, #31
 8000bbe:	d405      	bmi.n	8000bcc <_vfiprintf_r+0x220>
 8000bc0:	89ab      	ldrh	r3, [r5, #12]
 8000bc2:	059a      	lsls	r2, r3, #22
 8000bc4:	d402      	bmi.n	8000bcc <_vfiprintf_r+0x220>
 8000bc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bc8:	f7ff fe33 	bl	8000832 <__retarget_lock_release_recursive>
 8000bcc:	89ab      	ldrh	r3, [r5, #12]
 8000bce:	065b      	lsls	r3, r3, #25
 8000bd0:	f53f af12 	bmi.w	80009f8 <_vfiprintf_r+0x4c>
 8000bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000bd6:	e711      	b.n	80009fc <_vfiprintf_r+0x50>
 8000bd8:	ab03      	add	r3, sp, #12
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	462a      	mov	r2, r5
 8000bde:	4630      	mov	r0, r6
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <_vfiprintf_r+0x25c>)
 8000be2:	a904      	add	r1, sp, #16
 8000be4:	f000 f882 	bl	8000cec <_printf_i>
 8000be8:	e7e4      	b.n	8000bb4 <_vfiprintf_r+0x208>
 8000bea:	bf00      	nop
 8000bec:	0800158c 	.word	0x0800158c
 8000bf0:	080015ac 	.word	0x080015ac
 8000bf4:	0800156c 	.word	0x0800156c
 8000bf8:	080015cc 	.word	0x080015cc
 8000bfc:	080015d2 	.word	0x080015d2
 8000c00:	080015d6 	.word	0x080015d6
 8000c04:	00000000 	.word	0x00000000
 8000c08:	08000987 	.word	0x08000987

08000c0c <_printf_common>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	4616      	mov	r6, r2
 8000c12:	4699      	mov	r9, r3
 8000c14:	688a      	ldr	r2, [r1, #8]
 8000c16:	690b      	ldr	r3, [r1, #16]
 8000c18:	4607      	mov	r7, r0
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	bfb8      	it	lt
 8000c1e:	4613      	movlt	r3, r2
 8000c20:	6033      	str	r3, [r6, #0]
 8000c22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c26:	460c      	mov	r4, r1
 8000c28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c2c:	b10a      	cbz	r2, 8000c32 <_printf_common+0x26>
 8000c2e:	3301      	adds	r3, #1
 8000c30:	6033      	str	r3, [r6, #0]
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	0699      	lsls	r1, r3, #26
 8000c36:	bf42      	ittt	mi
 8000c38:	6833      	ldrmi	r3, [r6, #0]
 8000c3a:	3302      	addmi	r3, #2
 8000c3c:	6033      	strmi	r3, [r6, #0]
 8000c3e:	6825      	ldr	r5, [r4, #0]
 8000c40:	f015 0506 	ands.w	r5, r5, #6
 8000c44:	d106      	bne.n	8000c54 <_printf_common+0x48>
 8000c46:	f104 0a19 	add.w	sl, r4, #25
 8000c4a:	68e3      	ldr	r3, [r4, #12]
 8000c4c:	6832      	ldr	r2, [r6, #0]
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	dc28      	bgt.n	8000ca6 <_printf_common+0x9a>
 8000c54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000c58:	1e13      	subs	r3, r2, #0
 8000c5a:	6822      	ldr	r2, [r4, #0]
 8000c5c:	bf18      	it	ne
 8000c5e:	2301      	movne	r3, #1
 8000c60:	0692      	lsls	r2, r2, #26
 8000c62:	d42d      	bmi.n	8000cc0 <_printf_common+0xb4>
 8000c64:	4649      	mov	r1, r9
 8000c66:	4638      	mov	r0, r7
 8000c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c6c:	47c0      	blx	r8
 8000c6e:	3001      	adds	r0, #1
 8000c70:	d020      	beq.n	8000cb4 <_printf_common+0xa8>
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	68e5      	ldr	r5, [r4, #12]
 8000c76:	f003 0306 	and.w	r3, r3, #6
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf18      	it	ne
 8000c7e:	2500      	movne	r5, #0
 8000c80:	6832      	ldr	r2, [r6, #0]
 8000c82:	f04f 0600 	mov.w	r6, #0
 8000c86:	68a3      	ldr	r3, [r4, #8]
 8000c88:	bf08      	it	eq
 8000c8a:	1aad      	subeq	r5, r5, r2
 8000c8c:	6922      	ldr	r2, [r4, #16]
 8000c8e:	bf08      	it	eq
 8000c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c94:	4293      	cmp	r3, r2
 8000c96:	bfc4      	itt	gt
 8000c98:	1a9b      	subgt	r3, r3, r2
 8000c9a:	18ed      	addgt	r5, r5, r3
 8000c9c:	341a      	adds	r4, #26
 8000c9e:	42b5      	cmp	r5, r6
 8000ca0:	d11a      	bne.n	8000cd8 <_printf_common+0xcc>
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	e008      	b.n	8000cb8 <_printf_common+0xac>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	4652      	mov	r2, sl
 8000caa:	4649      	mov	r1, r9
 8000cac:	4638      	mov	r0, r7
 8000cae:	47c0      	blx	r8
 8000cb0:	3001      	adds	r0, #1
 8000cb2:	d103      	bne.n	8000cbc <_printf_common+0xb0>
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	3501      	adds	r5, #1
 8000cbe:	e7c4      	b.n	8000c4a <_printf_common+0x3e>
 8000cc0:	2030      	movs	r0, #48	; 0x30
 8000cc2:	18e1      	adds	r1, r4, r3
 8000cc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000cc8:	1c5a      	adds	r2, r3, #1
 8000cca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000cce:	4422      	add	r2, r4
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000cd6:	e7c5      	b.n	8000c64 <_printf_common+0x58>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	4622      	mov	r2, r4
 8000cdc:	4649      	mov	r1, r9
 8000cde:	4638      	mov	r0, r7
 8000ce0:	47c0      	blx	r8
 8000ce2:	3001      	adds	r0, #1
 8000ce4:	d0e6      	beq.n	8000cb4 <_printf_common+0xa8>
 8000ce6:	3601      	adds	r6, #1
 8000ce8:	e7d9      	b.n	8000c9e <_printf_common+0x92>
	...

08000cec <_printf_i>:
 8000cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	7e0f      	ldrb	r7, [r1, #24]
 8000cf2:	4691      	mov	r9, r2
 8000cf4:	2f78      	cmp	r7, #120	; 0x78
 8000cf6:	4680      	mov	r8, r0
 8000cf8:	460c      	mov	r4, r1
 8000cfa:	469a      	mov	sl, r3
 8000cfc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000cfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000d02:	d807      	bhi.n	8000d14 <_printf_i+0x28>
 8000d04:	2f62      	cmp	r7, #98	; 0x62
 8000d06:	d80a      	bhi.n	8000d1e <_printf_i+0x32>
 8000d08:	2f00      	cmp	r7, #0
 8000d0a:	f000 80d9 	beq.w	8000ec0 <_printf_i+0x1d4>
 8000d0e:	2f58      	cmp	r7, #88	; 0x58
 8000d10:	f000 80a4 	beq.w	8000e5c <_printf_i+0x170>
 8000d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d1c:	e03a      	b.n	8000d94 <_printf_i+0xa8>
 8000d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d22:	2b15      	cmp	r3, #21
 8000d24:	d8f6      	bhi.n	8000d14 <_printf_i+0x28>
 8000d26:	a101      	add	r1, pc, #4	; (adr r1, 8000d2c <_printf_i+0x40>)
 8000d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d2c:	08000d85 	.word	0x08000d85
 8000d30:	08000d99 	.word	0x08000d99
 8000d34:	08000d15 	.word	0x08000d15
 8000d38:	08000d15 	.word	0x08000d15
 8000d3c:	08000d15 	.word	0x08000d15
 8000d40:	08000d15 	.word	0x08000d15
 8000d44:	08000d99 	.word	0x08000d99
 8000d48:	08000d15 	.word	0x08000d15
 8000d4c:	08000d15 	.word	0x08000d15
 8000d50:	08000d15 	.word	0x08000d15
 8000d54:	08000d15 	.word	0x08000d15
 8000d58:	08000ea7 	.word	0x08000ea7
 8000d5c:	08000dc9 	.word	0x08000dc9
 8000d60:	08000e89 	.word	0x08000e89
 8000d64:	08000d15 	.word	0x08000d15
 8000d68:	08000d15 	.word	0x08000d15
 8000d6c:	08000ec9 	.word	0x08000ec9
 8000d70:	08000d15 	.word	0x08000d15
 8000d74:	08000dc9 	.word	0x08000dc9
 8000d78:	08000d15 	.word	0x08000d15
 8000d7c:	08000d15 	.word	0x08000d15
 8000d80:	08000e91 	.word	0x08000e91
 8000d84:	682b      	ldr	r3, [r5, #0]
 8000d86:	1d1a      	adds	r2, r3, #4
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	602a      	str	r2, [r5, #0]
 8000d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000d94:	2301      	movs	r3, #1
 8000d96:	e0a4      	b.n	8000ee2 <_printf_i+0x1f6>
 8000d98:	6820      	ldr	r0, [r4, #0]
 8000d9a:	6829      	ldr	r1, [r5, #0]
 8000d9c:	0606      	lsls	r6, r0, #24
 8000d9e:	f101 0304 	add.w	r3, r1, #4
 8000da2:	d50a      	bpl.n	8000dba <_printf_i+0xce>
 8000da4:	680e      	ldr	r6, [r1, #0]
 8000da6:	602b      	str	r3, [r5, #0]
 8000da8:	2e00      	cmp	r6, #0
 8000daa:	da03      	bge.n	8000db4 <_printf_i+0xc8>
 8000dac:	232d      	movs	r3, #45	; 0x2d
 8000dae:	4276      	negs	r6, r6
 8000db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000db4:	230a      	movs	r3, #10
 8000db6:	485e      	ldr	r0, [pc, #376]	; (8000f30 <_printf_i+0x244>)
 8000db8:	e019      	b.n	8000dee <_printf_i+0x102>
 8000dba:	680e      	ldr	r6, [r1, #0]
 8000dbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000dc0:	602b      	str	r3, [r5, #0]
 8000dc2:	bf18      	it	ne
 8000dc4:	b236      	sxthne	r6, r6
 8000dc6:	e7ef      	b.n	8000da8 <_printf_i+0xbc>
 8000dc8:	682b      	ldr	r3, [r5, #0]
 8000dca:	6820      	ldr	r0, [r4, #0]
 8000dcc:	1d19      	adds	r1, r3, #4
 8000dce:	6029      	str	r1, [r5, #0]
 8000dd0:	0601      	lsls	r1, r0, #24
 8000dd2:	d501      	bpl.n	8000dd8 <_printf_i+0xec>
 8000dd4:	681e      	ldr	r6, [r3, #0]
 8000dd6:	e002      	b.n	8000dde <_printf_i+0xf2>
 8000dd8:	0646      	lsls	r6, r0, #25
 8000dda:	d5fb      	bpl.n	8000dd4 <_printf_i+0xe8>
 8000ddc:	881e      	ldrh	r6, [r3, #0]
 8000dde:	2f6f      	cmp	r7, #111	; 0x6f
 8000de0:	bf0c      	ite	eq
 8000de2:	2308      	moveq	r3, #8
 8000de4:	230a      	movne	r3, #10
 8000de6:	4852      	ldr	r0, [pc, #328]	; (8000f30 <_printf_i+0x244>)
 8000de8:	2100      	movs	r1, #0
 8000dea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000dee:	6865      	ldr	r5, [r4, #4]
 8000df0:	2d00      	cmp	r5, #0
 8000df2:	bfa8      	it	ge
 8000df4:	6821      	ldrge	r1, [r4, #0]
 8000df6:	60a5      	str	r5, [r4, #8]
 8000df8:	bfa4      	itt	ge
 8000dfa:	f021 0104 	bicge.w	r1, r1, #4
 8000dfe:	6021      	strge	r1, [r4, #0]
 8000e00:	b90e      	cbnz	r6, 8000e06 <_printf_i+0x11a>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d04d      	beq.n	8000ea2 <_printf_i+0x1b6>
 8000e06:	4615      	mov	r5, r2
 8000e08:	fbb6 f1f3 	udiv	r1, r6, r3
 8000e0c:	fb03 6711 	mls	r7, r3, r1, r6
 8000e10:	5dc7      	ldrb	r7, [r0, r7]
 8000e12:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000e16:	4637      	mov	r7, r6
 8000e18:	42bb      	cmp	r3, r7
 8000e1a:	460e      	mov	r6, r1
 8000e1c:	d9f4      	bls.n	8000e08 <_printf_i+0x11c>
 8000e1e:	2b08      	cmp	r3, #8
 8000e20:	d10b      	bne.n	8000e3a <_printf_i+0x14e>
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	07de      	lsls	r6, r3, #31
 8000e26:	d508      	bpl.n	8000e3a <_printf_i+0x14e>
 8000e28:	6923      	ldr	r3, [r4, #16]
 8000e2a:	6861      	ldr	r1, [r4, #4]
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	bfde      	ittt	le
 8000e30:	2330      	movle	r3, #48	; 0x30
 8000e32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000e36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000e3a:	1b52      	subs	r2, r2, r5
 8000e3c:	6122      	str	r2, [r4, #16]
 8000e3e:	464b      	mov	r3, r9
 8000e40:	4621      	mov	r1, r4
 8000e42:	4640      	mov	r0, r8
 8000e44:	f8cd a000 	str.w	sl, [sp]
 8000e48:	aa03      	add	r2, sp, #12
 8000e4a:	f7ff fedf 	bl	8000c0c <_printf_common>
 8000e4e:	3001      	adds	r0, #1
 8000e50:	d14c      	bne.n	8000eec <_printf_i+0x200>
 8000e52:	f04f 30ff 	mov.w	r0, #4294967295
 8000e56:	b004      	add	sp, #16
 8000e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5c:	4834      	ldr	r0, [pc, #208]	; (8000f30 <_printf_i+0x244>)
 8000e5e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000e62:	6829      	ldr	r1, [r5, #0]
 8000e64:	6823      	ldr	r3, [r4, #0]
 8000e66:	f851 6b04 	ldr.w	r6, [r1], #4
 8000e6a:	6029      	str	r1, [r5, #0]
 8000e6c:	061d      	lsls	r5, r3, #24
 8000e6e:	d514      	bpl.n	8000e9a <_printf_i+0x1ae>
 8000e70:	07df      	lsls	r7, r3, #31
 8000e72:	bf44      	itt	mi
 8000e74:	f043 0320 	orrmi.w	r3, r3, #32
 8000e78:	6023      	strmi	r3, [r4, #0]
 8000e7a:	b91e      	cbnz	r6, 8000e84 <_printf_i+0x198>
 8000e7c:	6823      	ldr	r3, [r4, #0]
 8000e7e:	f023 0320 	bic.w	r3, r3, #32
 8000e82:	6023      	str	r3, [r4, #0]
 8000e84:	2310      	movs	r3, #16
 8000e86:	e7af      	b.n	8000de8 <_printf_i+0xfc>
 8000e88:	6823      	ldr	r3, [r4, #0]
 8000e8a:	f043 0320 	orr.w	r3, r3, #32
 8000e8e:	6023      	str	r3, [r4, #0]
 8000e90:	2378      	movs	r3, #120	; 0x78
 8000e92:	4828      	ldr	r0, [pc, #160]	; (8000f34 <_printf_i+0x248>)
 8000e94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000e98:	e7e3      	b.n	8000e62 <_printf_i+0x176>
 8000e9a:	0659      	lsls	r1, r3, #25
 8000e9c:	bf48      	it	mi
 8000e9e:	b2b6      	uxthmi	r6, r6
 8000ea0:	e7e6      	b.n	8000e70 <_printf_i+0x184>
 8000ea2:	4615      	mov	r5, r2
 8000ea4:	e7bb      	b.n	8000e1e <_printf_i+0x132>
 8000ea6:	682b      	ldr	r3, [r5, #0]
 8000ea8:	6826      	ldr	r6, [r4, #0]
 8000eaa:	1d18      	adds	r0, r3, #4
 8000eac:	6961      	ldr	r1, [r4, #20]
 8000eae:	6028      	str	r0, [r5, #0]
 8000eb0:	0635      	lsls	r5, r6, #24
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	d501      	bpl.n	8000eba <_printf_i+0x1ce>
 8000eb6:	6019      	str	r1, [r3, #0]
 8000eb8:	e002      	b.n	8000ec0 <_printf_i+0x1d4>
 8000eba:	0670      	lsls	r0, r6, #25
 8000ebc:	d5fb      	bpl.n	8000eb6 <_printf_i+0x1ca>
 8000ebe:	8019      	strh	r1, [r3, #0]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	4615      	mov	r5, r2
 8000ec4:	6123      	str	r3, [r4, #16]
 8000ec6:	e7ba      	b.n	8000e3e <_printf_i+0x152>
 8000ec8:	682b      	ldr	r3, [r5, #0]
 8000eca:	2100      	movs	r1, #0
 8000ecc:	1d1a      	adds	r2, r3, #4
 8000ece:	602a      	str	r2, [r5, #0]
 8000ed0:	681d      	ldr	r5, [r3, #0]
 8000ed2:	6862      	ldr	r2, [r4, #4]
 8000ed4:	4628      	mov	r0, r5
 8000ed6:	f000 fa9b 	bl	8001410 <memchr>
 8000eda:	b108      	cbz	r0, 8000ee0 <_printf_i+0x1f4>
 8000edc:	1b40      	subs	r0, r0, r5
 8000ede:	6060      	str	r0, [r4, #4]
 8000ee0:	6863      	ldr	r3, [r4, #4]
 8000ee2:	6123      	str	r3, [r4, #16]
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000eea:	e7a8      	b.n	8000e3e <_printf_i+0x152>
 8000eec:	462a      	mov	r2, r5
 8000eee:	4649      	mov	r1, r9
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	6923      	ldr	r3, [r4, #16]
 8000ef4:	47d0      	blx	sl
 8000ef6:	3001      	adds	r0, #1
 8000ef8:	d0ab      	beq.n	8000e52 <_printf_i+0x166>
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	079b      	lsls	r3, r3, #30
 8000efe:	d413      	bmi.n	8000f28 <_printf_i+0x23c>
 8000f00:	68e0      	ldr	r0, [r4, #12]
 8000f02:	9b03      	ldr	r3, [sp, #12]
 8000f04:	4298      	cmp	r0, r3
 8000f06:	bfb8      	it	lt
 8000f08:	4618      	movlt	r0, r3
 8000f0a:	e7a4      	b.n	8000e56 <_printf_i+0x16a>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	4632      	mov	r2, r6
 8000f10:	4649      	mov	r1, r9
 8000f12:	4640      	mov	r0, r8
 8000f14:	47d0      	blx	sl
 8000f16:	3001      	adds	r0, #1
 8000f18:	d09b      	beq.n	8000e52 <_printf_i+0x166>
 8000f1a:	3501      	adds	r5, #1
 8000f1c:	68e3      	ldr	r3, [r4, #12]
 8000f1e:	9903      	ldr	r1, [sp, #12]
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	42ab      	cmp	r3, r5
 8000f24:	dcf2      	bgt.n	8000f0c <_printf_i+0x220>
 8000f26:	e7eb      	b.n	8000f00 <_printf_i+0x214>
 8000f28:	2500      	movs	r5, #0
 8000f2a:	f104 0619 	add.w	r6, r4, #25
 8000f2e:	e7f5      	b.n	8000f1c <_printf_i+0x230>
 8000f30:	080015dd 	.word	0x080015dd
 8000f34:	080015ee 	.word	0x080015ee

08000f38 <_sbrk_r>:
 8000f38:	b538      	push	{r3, r4, r5, lr}
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	4d05      	ldr	r5, [pc, #20]	; (8000f54 <_sbrk_r+0x1c>)
 8000f3e:	4604      	mov	r4, r0
 8000f40:	4608      	mov	r0, r1
 8000f42:	602b      	str	r3, [r5, #0]
 8000f44:	f7ff f9fe 	bl	8000344 <_sbrk>
 8000f48:	1c43      	adds	r3, r0, #1
 8000f4a:	d102      	bne.n	8000f52 <_sbrk_r+0x1a>
 8000f4c:	682b      	ldr	r3, [r5, #0]
 8000f4e:	b103      	cbz	r3, 8000f52 <_sbrk_r+0x1a>
 8000f50:	6023      	str	r3, [r4, #0]
 8000f52:	bd38      	pop	{r3, r4, r5, pc}
 8000f54:	2000009c 	.word	0x2000009c

08000f58 <__sread>:
 8000f58:	b510      	push	{r4, lr}
 8000f5a:	460c      	mov	r4, r1
 8000f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f60:	f000 fab8 	bl	80014d4 <_read_r>
 8000f64:	2800      	cmp	r0, #0
 8000f66:	bfab      	itete	ge
 8000f68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8000f6c:	181b      	addge	r3, r3, r0
 8000f6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f72:	bfac      	ite	ge
 8000f74:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f76:	81a3      	strhlt	r3, [r4, #12]
 8000f78:	bd10      	pop	{r4, pc}

08000f7a <__swrite>:
 8000f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f7e:	461f      	mov	r7, r3
 8000f80:	898b      	ldrh	r3, [r1, #12]
 8000f82:	4605      	mov	r5, r0
 8000f84:	05db      	lsls	r3, r3, #23
 8000f86:	460c      	mov	r4, r1
 8000f88:	4616      	mov	r6, r2
 8000f8a:	d505      	bpl.n	8000f98 <__swrite+0x1e>
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f94:	f000 f9c4 	bl	8001320 <_lseek_r>
 8000f98:	89a3      	ldrh	r3, [r4, #12]
 8000f9a:	4632      	mov	r2, r6
 8000f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fa0:	81a3      	strh	r3, [r4, #12]
 8000fa2:	4628      	mov	r0, r5
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fae:	f000 b869 	b.w	8001084 <_write_r>

08000fb2 <__sseek>:
 8000fb2:	b510      	push	{r4, lr}
 8000fb4:	460c      	mov	r4, r1
 8000fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fba:	f000 f9b1 	bl	8001320 <_lseek_r>
 8000fbe:	1c43      	adds	r3, r0, #1
 8000fc0:	89a3      	ldrh	r3, [r4, #12]
 8000fc2:	bf15      	itete	ne
 8000fc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8000fc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000fca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000fce:	81a3      	strheq	r3, [r4, #12]
 8000fd0:	bf18      	it	ne
 8000fd2:	81a3      	strhne	r3, [r4, #12]
 8000fd4:	bd10      	pop	{r4, pc}

08000fd6 <__sclose>:
 8000fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fda:	f000 b8d3 	b.w	8001184 <_close_r>
	...

08000fe0 <__swbuf_r>:
 8000fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe2:	460e      	mov	r6, r1
 8000fe4:	4614      	mov	r4, r2
 8000fe6:	4605      	mov	r5, r0
 8000fe8:	b118      	cbz	r0, 8000ff2 <__swbuf_r+0x12>
 8000fea:	6983      	ldr	r3, [r0, #24]
 8000fec:	b90b      	cbnz	r3, 8000ff2 <__swbuf_r+0x12>
 8000fee:	f7ff fb81 	bl	80006f4 <__sinit>
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <__swbuf_r+0x98>)
 8000ff4:	429c      	cmp	r4, r3
 8000ff6:	d12b      	bne.n	8001050 <__swbuf_r+0x70>
 8000ff8:	686c      	ldr	r4, [r5, #4]
 8000ffa:	69a3      	ldr	r3, [r4, #24]
 8000ffc:	60a3      	str	r3, [r4, #8]
 8000ffe:	89a3      	ldrh	r3, [r4, #12]
 8001000:	071a      	lsls	r2, r3, #28
 8001002:	d52f      	bpl.n	8001064 <__swbuf_r+0x84>
 8001004:	6923      	ldr	r3, [r4, #16]
 8001006:	b36b      	cbz	r3, 8001064 <__swbuf_r+0x84>
 8001008:	6923      	ldr	r3, [r4, #16]
 800100a:	6820      	ldr	r0, [r4, #0]
 800100c:	b2f6      	uxtb	r6, r6
 800100e:	1ac0      	subs	r0, r0, r3
 8001010:	6963      	ldr	r3, [r4, #20]
 8001012:	4637      	mov	r7, r6
 8001014:	4283      	cmp	r3, r0
 8001016:	dc04      	bgt.n	8001022 <__swbuf_r+0x42>
 8001018:	4621      	mov	r1, r4
 800101a:	4628      	mov	r0, r5
 800101c:	f000 f944 	bl	80012a8 <_fflush_r>
 8001020:	bb30      	cbnz	r0, 8001070 <__swbuf_r+0x90>
 8001022:	68a3      	ldr	r3, [r4, #8]
 8001024:	3001      	adds	r0, #1
 8001026:	3b01      	subs	r3, #1
 8001028:	60a3      	str	r3, [r4, #8]
 800102a:	6823      	ldr	r3, [r4, #0]
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	6022      	str	r2, [r4, #0]
 8001030:	701e      	strb	r6, [r3, #0]
 8001032:	6963      	ldr	r3, [r4, #20]
 8001034:	4283      	cmp	r3, r0
 8001036:	d004      	beq.n	8001042 <__swbuf_r+0x62>
 8001038:	89a3      	ldrh	r3, [r4, #12]
 800103a:	07db      	lsls	r3, r3, #31
 800103c:	d506      	bpl.n	800104c <__swbuf_r+0x6c>
 800103e:	2e0a      	cmp	r6, #10
 8001040:	d104      	bne.n	800104c <__swbuf_r+0x6c>
 8001042:	4621      	mov	r1, r4
 8001044:	4628      	mov	r0, r5
 8001046:	f000 f92f 	bl	80012a8 <_fflush_r>
 800104a:	b988      	cbnz	r0, 8001070 <__swbuf_r+0x90>
 800104c:	4638      	mov	r0, r7
 800104e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <__swbuf_r+0x9c>)
 8001052:	429c      	cmp	r4, r3
 8001054:	d101      	bne.n	800105a <__swbuf_r+0x7a>
 8001056:	68ac      	ldr	r4, [r5, #8]
 8001058:	e7cf      	b.n	8000ffa <__swbuf_r+0x1a>
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <__swbuf_r+0xa0>)
 800105c:	429c      	cmp	r4, r3
 800105e:	bf08      	it	eq
 8001060:	68ec      	ldreq	r4, [r5, #12]
 8001062:	e7ca      	b.n	8000ffa <__swbuf_r+0x1a>
 8001064:	4621      	mov	r1, r4
 8001066:	4628      	mov	r0, r5
 8001068:	f000 f81e 	bl	80010a8 <__swsetup_r>
 800106c:	2800      	cmp	r0, #0
 800106e:	d0cb      	beq.n	8001008 <__swbuf_r+0x28>
 8001070:	f04f 37ff 	mov.w	r7, #4294967295
 8001074:	e7ea      	b.n	800104c <__swbuf_r+0x6c>
 8001076:	bf00      	nop
 8001078:	0800158c 	.word	0x0800158c
 800107c:	080015ac 	.word	0x080015ac
 8001080:	0800156c 	.word	0x0800156c

08001084 <_write_r>:
 8001084:	b538      	push	{r3, r4, r5, lr}
 8001086:	4604      	mov	r4, r0
 8001088:	4608      	mov	r0, r1
 800108a:	4611      	mov	r1, r2
 800108c:	2200      	movs	r2, #0
 800108e:	4d05      	ldr	r5, [pc, #20]	; (80010a4 <_write_r+0x20>)
 8001090:	602a      	str	r2, [r5, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	f7ff f90a 	bl	80002ac <_write>
 8001098:	1c43      	adds	r3, r0, #1
 800109a:	d102      	bne.n	80010a2 <_write_r+0x1e>
 800109c:	682b      	ldr	r3, [r5, #0]
 800109e:	b103      	cbz	r3, 80010a2 <_write_r+0x1e>
 80010a0:	6023      	str	r3, [r4, #0]
 80010a2:	bd38      	pop	{r3, r4, r5, pc}
 80010a4:	2000009c 	.word	0x2000009c

080010a8 <__swsetup_r>:
 80010a8:	4b32      	ldr	r3, [pc, #200]	; (8001174 <__swsetup_r+0xcc>)
 80010aa:	b570      	push	{r4, r5, r6, lr}
 80010ac:	681d      	ldr	r5, [r3, #0]
 80010ae:	4606      	mov	r6, r0
 80010b0:	460c      	mov	r4, r1
 80010b2:	b125      	cbz	r5, 80010be <__swsetup_r+0x16>
 80010b4:	69ab      	ldr	r3, [r5, #24]
 80010b6:	b913      	cbnz	r3, 80010be <__swsetup_r+0x16>
 80010b8:	4628      	mov	r0, r5
 80010ba:	f7ff fb1b 	bl	80006f4 <__sinit>
 80010be:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <__swsetup_r+0xd0>)
 80010c0:	429c      	cmp	r4, r3
 80010c2:	d10f      	bne.n	80010e4 <__swsetup_r+0x3c>
 80010c4:	686c      	ldr	r4, [r5, #4]
 80010c6:	89a3      	ldrh	r3, [r4, #12]
 80010c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80010cc:	0719      	lsls	r1, r3, #28
 80010ce:	d42c      	bmi.n	800112a <__swsetup_r+0x82>
 80010d0:	06dd      	lsls	r5, r3, #27
 80010d2:	d411      	bmi.n	80010f8 <__swsetup_r+0x50>
 80010d4:	2309      	movs	r3, #9
 80010d6:	6033      	str	r3, [r6, #0]
 80010d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	81a3      	strh	r3, [r4, #12]
 80010e2:	e03e      	b.n	8001162 <__swsetup_r+0xba>
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <__swsetup_r+0xd4>)
 80010e6:	429c      	cmp	r4, r3
 80010e8:	d101      	bne.n	80010ee <__swsetup_r+0x46>
 80010ea:	68ac      	ldr	r4, [r5, #8]
 80010ec:	e7eb      	b.n	80010c6 <__swsetup_r+0x1e>
 80010ee:	4b24      	ldr	r3, [pc, #144]	; (8001180 <__swsetup_r+0xd8>)
 80010f0:	429c      	cmp	r4, r3
 80010f2:	bf08      	it	eq
 80010f4:	68ec      	ldreq	r4, [r5, #12]
 80010f6:	e7e6      	b.n	80010c6 <__swsetup_r+0x1e>
 80010f8:	0758      	lsls	r0, r3, #29
 80010fa:	d512      	bpl.n	8001122 <__swsetup_r+0x7a>
 80010fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010fe:	b141      	cbz	r1, 8001112 <__swsetup_r+0x6a>
 8001100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001104:	4299      	cmp	r1, r3
 8001106:	d002      	beq.n	800110e <__swsetup_r+0x66>
 8001108:	4630      	mov	r0, r6
 800110a:	f000 f99b 	bl	8001444 <_free_r>
 800110e:	2300      	movs	r3, #0
 8001110:	6363      	str	r3, [r4, #52]	; 0x34
 8001112:	89a3      	ldrh	r3, [r4, #12]
 8001114:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001118:	81a3      	strh	r3, [r4, #12]
 800111a:	2300      	movs	r3, #0
 800111c:	6063      	str	r3, [r4, #4]
 800111e:	6923      	ldr	r3, [r4, #16]
 8001120:	6023      	str	r3, [r4, #0]
 8001122:	89a3      	ldrh	r3, [r4, #12]
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	81a3      	strh	r3, [r4, #12]
 800112a:	6923      	ldr	r3, [r4, #16]
 800112c:	b94b      	cbnz	r3, 8001142 <__swsetup_r+0x9a>
 800112e:	89a3      	ldrh	r3, [r4, #12]
 8001130:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001138:	d003      	beq.n	8001142 <__swsetup_r+0x9a>
 800113a:	4621      	mov	r1, r4
 800113c:	4630      	mov	r0, r6
 800113e:	f000 f927 	bl	8001390 <__smakebuf_r>
 8001142:	89a0      	ldrh	r0, [r4, #12]
 8001144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001148:	f010 0301 	ands.w	r3, r0, #1
 800114c:	d00a      	beq.n	8001164 <__swsetup_r+0xbc>
 800114e:	2300      	movs	r3, #0
 8001150:	60a3      	str	r3, [r4, #8]
 8001152:	6963      	ldr	r3, [r4, #20]
 8001154:	425b      	negs	r3, r3
 8001156:	61a3      	str	r3, [r4, #24]
 8001158:	6923      	ldr	r3, [r4, #16]
 800115a:	b943      	cbnz	r3, 800116e <__swsetup_r+0xc6>
 800115c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001160:	d1ba      	bne.n	80010d8 <__swsetup_r+0x30>
 8001162:	bd70      	pop	{r4, r5, r6, pc}
 8001164:	0781      	lsls	r1, r0, #30
 8001166:	bf58      	it	pl
 8001168:	6963      	ldrpl	r3, [r4, #20]
 800116a:	60a3      	str	r3, [r4, #8]
 800116c:	e7f4      	b.n	8001158 <__swsetup_r+0xb0>
 800116e:	2000      	movs	r0, #0
 8001170:	e7f7      	b.n	8001162 <__swsetup_r+0xba>
 8001172:	bf00      	nop
 8001174:	20000004 	.word	0x20000004
 8001178:	0800158c 	.word	0x0800158c
 800117c:	080015ac 	.word	0x080015ac
 8001180:	0800156c 	.word	0x0800156c

08001184 <_close_r>:
 8001184:	b538      	push	{r3, r4, r5, lr}
 8001186:	2300      	movs	r3, #0
 8001188:	4d05      	ldr	r5, [pc, #20]	; (80011a0 <_close_r+0x1c>)
 800118a:	4604      	mov	r4, r0
 800118c:	4608      	mov	r0, r1
 800118e:	602b      	str	r3, [r5, #0]
 8001190:	f7ff f8a8 	bl	80002e4 <_close>
 8001194:	1c43      	adds	r3, r0, #1
 8001196:	d102      	bne.n	800119e <_close_r+0x1a>
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	b103      	cbz	r3, 800119e <_close_r+0x1a>
 800119c:	6023      	str	r3, [r4, #0]
 800119e:	bd38      	pop	{r3, r4, r5, pc}
 80011a0:	2000009c 	.word	0x2000009c

080011a4 <__sflush_r>:
 80011a4:	898a      	ldrh	r2, [r1, #12]
 80011a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a8:	4605      	mov	r5, r0
 80011aa:	0710      	lsls	r0, r2, #28
 80011ac:	460c      	mov	r4, r1
 80011ae:	d457      	bmi.n	8001260 <__sflush_r+0xbc>
 80011b0:	684b      	ldr	r3, [r1, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	dc04      	bgt.n	80011c0 <__sflush_r+0x1c>
 80011b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dc01      	bgt.n	80011c0 <__sflush_r+0x1c>
 80011bc:	2000      	movs	r0, #0
 80011be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011c2:	2e00      	cmp	r6, #0
 80011c4:	d0fa      	beq.n	80011bc <__sflush_r+0x18>
 80011c6:	2300      	movs	r3, #0
 80011c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80011cc:	682f      	ldr	r7, [r5, #0]
 80011ce:	602b      	str	r3, [r5, #0]
 80011d0:	d032      	beq.n	8001238 <__sflush_r+0x94>
 80011d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011d4:	89a3      	ldrh	r3, [r4, #12]
 80011d6:	075a      	lsls	r2, r3, #29
 80011d8:	d505      	bpl.n	80011e6 <__sflush_r+0x42>
 80011da:	6863      	ldr	r3, [r4, #4]
 80011dc:	1ac0      	subs	r0, r0, r3
 80011de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011e0:	b10b      	cbz	r3, 80011e6 <__sflush_r+0x42>
 80011e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011e4:	1ac0      	subs	r0, r0, r3
 80011e6:	2300      	movs	r3, #0
 80011e8:	4602      	mov	r2, r0
 80011ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011ec:	4628      	mov	r0, r5
 80011ee:	6a21      	ldr	r1, [r4, #32]
 80011f0:	47b0      	blx	r6
 80011f2:	1c43      	adds	r3, r0, #1
 80011f4:	89a3      	ldrh	r3, [r4, #12]
 80011f6:	d106      	bne.n	8001206 <__sflush_r+0x62>
 80011f8:	6829      	ldr	r1, [r5, #0]
 80011fa:	291d      	cmp	r1, #29
 80011fc:	d82c      	bhi.n	8001258 <__sflush_r+0xb4>
 80011fe:	4a29      	ldr	r2, [pc, #164]	; (80012a4 <__sflush_r+0x100>)
 8001200:	40ca      	lsrs	r2, r1
 8001202:	07d6      	lsls	r6, r2, #31
 8001204:	d528      	bpl.n	8001258 <__sflush_r+0xb4>
 8001206:	2200      	movs	r2, #0
 8001208:	6062      	str	r2, [r4, #4]
 800120a:	6922      	ldr	r2, [r4, #16]
 800120c:	04d9      	lsls	r1, r3, #19
 800120e:	6022      	str	r2, [r4, #0]
 8001210:	d504      	bpl.n	800121c <__sflush_r+0x78>
 8001212:	1c42      	adds	r2, r0, #1
 8001214:	d101      	bne.n	800121a <__sflush_r+0x76>
 8001216:	682b      	ldr	r3, [r5, #0]
 8001218:	b903      	cbnz	r3, 800121c <__sflush_r+0x78>
 800121a:	6560      	str	r0, [r4, #84]	; 0x54
 800121c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800121e:	602f      	str	r7, [r5, #0]
 8001220:	2900      	cmp	r1, #0
 8001222:	d0cb      	beq.n	80011bc <__sflush_r+0x18>
 8001224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001228:	4299      	cmp	r1, r3
 800122a:	d002      	beq.n	8001232 <__sflush_r+0x8e>
 800122c:	4628      	mov	r0, r5
 800122e:	f000 f909 	bl	8001444 <_free_r>
 8001232:	2000      	movs	r0, #0
 8001234:	6360      	str	r0, [r4, #52]	; 0x34
 8001236:	e7c2      	b.n	80011be <__sflush_r+0x1a>
 8001238:	6a21      	ldr	r1, [r4, #32]
 800123a:	2301      	movs	r3, #1
 800123c:	4628      	mov	r0, r5
 800123e:	47b0      	blx	r6
 8001240:	1c41      	adds	r1, r0, #1
 8001242:	d1c7      	bne.n	80011d4 <__sflush_r+0x30>
 8001244:	682b      	ldr	r3, [r5, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0c4      	beq.n	80011d4 <__sflush_r+0x30>
 800124a:	2b1d      	cmp	r3, #29
 800124c:	d001      	beq.n	8001252 <__sflush_r+0xae>
 800124e:	2b16      	cmp	r3, #22
 8001250:	d101      	bne.n	8001256 <__sflush_r+0xb2>
 8001252:	602f      	str	r7, [r5, #0]
 8001254:	e7b2      	b.n	80011bc <__sflush_r+0x18>
 8001256:	89a3      	ldrh	r3, [r4, #12]
 8001258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800125c:	81a3      	strh	r3, [r4, #12]
 800125e:	e7ae      	b.n	80011be <__sflush_r+0x1a>
 8001260:	690f      	ldr	r7, [r1, #16]
 8001262:	2f00      	cmp	r7, #0
 8001264:	d0aa      	beq.n	80011bc <__sflush_r+0x18>
 8001266:	0793      	lsls	r3, r2, #30
 8001268:	bf18      	it	ne
 800126a:	2300      	movne	r3, #0
 800126c:	680e      	ldr	r6, [r1, #0]
 800126e:	bf08      	it	eq
 8001270:	694b      	ldreq	r3, [r1, #20]
 8001272:	1bf6      	subs	r6, r6, r7
 8001274:	600f      	str	r7, [r1, #0]
 8001276:	608b      	str	r3, [r1, #8]
 8001278:	2e00      	cmp	r6, #0
 800127a:	dd9f      	ble.n	80011bc <__sflush_r+0x18>
 800127c:	4633      	mov	r3, r6
 800127e:	463a      	mov	r2, r7
 8001280:	4628      	mov	r0, r5
 8001282:	6a21      	ldr	r1, [r4, #32]
 8001284:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001288:	47e0      	blx	ip
 800128a:	2800      	cmp	r0, #0
 800128c:	dc06      	bgt.n	800129c <__sflush_r+0xf8>
 800128e:	89a3      	ldrh	r3, [r4, #12]
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001298:	81a3      	strh	r3, [r4, #12]
 800129a:	e790      	b.n	80011be <__sflush_r+0x1a>
 800129c:	4407      	add	r7, r0
 800129e:	1a36      	subs	r6, r6, r0
 80012a0:	e7ea      	b.n	8001278 <__sflush_r+0xd4>
 80012a2:	bf00      	nop
 80012a4:	20400001 	.word	0x20400001

080012a8 <_fflush_r>:
 80012a8:	b538      	push	{r3, r4, r5, lr}
 80012aa:	690b      	ldr	r3, [r1, #16]
 80012ac:	4605      	mov	r5, r0
 80012ae:	460c      	mov	r4, r1
 80012b0:	b913      	cbnz	r3, 80012b8 <_fflush_r+0x10>
 80012b2:	2500      	movs	r5, #0
 80012b4:	4628      	mov	r0, r5
 80012b6:	bd38      	pop	{r3, r4, r5, pc}
 80012b8:	b118      	cbz	r0, 80012c2 <_fflush_r+0x1a>
 80012ba:	6983      	ldr	r3, [r0, #24]
 80012bc:	b90b      	cbnz	r3, 80012c2 <_fflush_r+0x1a>
 80012be:	f7ff fa19 	bl	80006f4 <__sinit>
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <_fflush_r+0x6c>)
 80012c4:	429c      	cmp	r4, r3
 80012c6:	d11b      	bne.n	8001300 <_fflush_r+0x58>
 80012c8:	686c      	ldr	r4, [r5, #4]
 80012ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0ef      	beq.n	80012b2 <_fflush_r+0xa>
 80012d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80012d4:	07d0      	lsls	r0, r2, #31
 80012d6:	d404      	bmi.n	80012e2 <_fflush_r+0x3a>
 80012d8:	0599      	lsls	r1, r3, #22
 80012da:	d402      	bmi.n	80012e2 <_fflush_r+0x3a>
 80012dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012de:	f7ff faa7 	bl	8000830 <__retarget_lock_acquire_recursive>
 80012e2:	4628      	mov	r0, r5
 80012e4:	4621      	mov	r1, r4
 80012e6:	f7ff ff5d 	bl	80011a4 <__sflush_r>
 80012ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012ec:	4605      	mov	r5, r0
 80012ee:	07da      	lsls	r2, r3, #31
 80012f0:	d4e0      	bmi.n	80012b4 <_fflush_r+0xc>
 80012f2:	89a3      	ldrh	r3, [r4, #12]
 80012f4:	059b      	lsls	r3, r3, #22
 80012f6:	d4dd      	bmi.n	80012b4 <_fflush_r+0xc>
 80012f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012fa:	f7ff fa9a 	bl	8000832 <__retarget_lock_release_recursive>
 80012fe:	e7d9      	b.n	80012b4 <_fflush_r+0xc>
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <_fflush_r+0x70>)
 8001302:	429c      	cmp	r4, r3
 8001304:	d101      	bne.n	800130a <_fflush_r+0x62>
 8001306:	68ac      	ldr	r4, [r5, #8]
 8001308:	e7df      	b.n	80012ca <_fflush_r+0x22>
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <_fflush_r+0x74>)
 800130c:	429c      	cmp	r4, r3
 800130e:	bf08      	it	eq
 8001310:	68ec      	ldreq	r4, [r5, #12]
 8001312:	e7da      	b.n	80012ca <_fflush_r+0x22>
 8001314:	0800158c 	.word	0x0800158c
 8001318:	080015ac 	.word	0x080015ac
 800131c:	0800156c 	.word	0x0800156c

08001320 <_lseek_r>:
 8001320:	b538      	push	{r3, r4, r5, lr}
 8001322:	4604      	mov	r4, r0
 8001324:	4608      	mov	r0, r1
 8001326:	4611      	mov	r1, r2
 8001328:	2200      	movs	r2, #0
 800132a:	4d05      	ldr	r5, [pc, #20]	; (8001340 <_lseek_r+0x20>)
 800132c:	602a      	str	r2, [r5, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	f7fe fffc 	bl	800032c <_lseek>
 8001334:	1c43      	adds	r3, r0, #1
 8001336:	d102      	bne.n	800133e <_lseek_r+0x1e>
 8001338:	682b      	ldr	r3, [r5, #0]
 800133a:	b103      	cbz	r3, 800133e <_lseek_r+0x1e>
 800133c:	6023      	str	r3, [r4, #0]
 800133e:	bd38      	pop	{r3, r4, r5, pc}
 8001340:	2000009c 	.word	0x2000009c

08001344 <__swhatbuf_r>:
 8001344:	b570      	push	{r4, r5, r6, lr}
 8001346:	460e      	mov	r6, r1
 8001348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800134c:	4614      	mov	r4, r2
 800134e:	2900      	cmp	r1, #0
 8001350:	461d      	mov	r5, r3
 8001352:	b096      	sub	sp, #88	; 0x58
 8001354:	da08      	bge.n	8001368 <__swhatbuf_r+0x24>
 8001356:	2200      	movs	r2, #0
 8001358:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800135c:	602a      	str	r2, [r5, #0]
 800135e:	061a      	lsls	r2, r3, #24
 8001360:	d410      	bmi.n	8001384 <__swhatbuf_r+0x40>
 8001362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001366:	e00e      	b.n	8001386 <__swhatbuf_r+0x42>
 8001368:	466a      	mov	r2, sp
 800136a:	f000 f8c5 	bl	80014f8 <_fstat_r>
 800136e:	2800      	cmp	r0, #0
 8001370:	dbf1      	blt.n	8001356 <__swhatbuf_r+0x12>
 8001372:	9a01      	ldr	r2, [sp, #4]
 8001374:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001378:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800137c:	425a      	negs	r2, r3
 800137e:	415a      	adcs	r2, r3
 8001380:	602a      	str	r2, [r5, #0]
 8001382:	e7ee      	b.n	8001362 <__swhatbuf_r+0x1e>
 8001384:	2340      	movs	r3, #64	; 0x40
 8001386:	2000      	movs	r0, #0
 8001388:	6023      	str	r3, [r4, #0]
 800138a:	b016      	add	sp, #88	; 0x58
 800138c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001390 <__smakebuf_r>:
 8001390:	898b      	ldrh	r3, [r1, #12]
 8001392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001394:	079d      	lsls	r5, r3, #30
 8001396:	4606      	mov	r6, r0
 8001398:	460c      	mov	r4, r1
 800139a:	d507      	bpl.n	80013ac <__smakebuf_r+0x1c>
 800139c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80013a0:	6023      	str	r3, [r4, #0]
 80013a2:	6123      	str	r3, [r4, #16]
 80013a4:	2301      	movs	r3, #1
 80013a6:	6163      	str	r3, [r4, #20]
 80013a8:	b002      	add	sp, #8
 80013aa:	bd70      	pop	{r4, r5, r6, pc}
 80013ac:	466a      	mov	r2, sp
 80013ae:	ab01      	add	r3, sp, #4
 80013b0:	f7ff ffc8 	bl	8001344 <__swhatbuf_r>
 80013b4:	9900      	ldr	r1, [sp, #0]
 80013b6:	4605      	mov	r5, r0
 80013b8:	4630      	mov	r0, r6
 80013ba:	f7ff fa5b 	bl	8000874 <_malloc_r>
 80013be:	b948      	cbnz	r0, 80013d4 <__smakebuf_r+0x44>
 80013c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013c4:	059a      	lsls	r2, r3, #22
 80013c6:	d4ef      	bmi.n	80013a8 <__smakebuf_r+0x18>
 80013c8:	f023 0303 	bic.w	r3, r3, #3
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	81a3      	strh	r3, [r4, #12]
 80013d2:	e7e3      	b.n	800139c <__smakebuf_r+0xc>
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <__smakebuf_r+0x7c>)
 80013d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80013d8:	89a3      	ldrh	r3, [r4, #12]
 80013da:	6020      	str	r0, [r4, #0]
 80013dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e0:	81a3      	strh	r3, [r4, #12]
 80013e2:	9b00      	ldr	r3, [sp, #0]
 80013e4:	6120      	str	r0, [r4, #16]
 80013e6:	6163      	str	r3, [r4, #20]
 80013e8:	9b01      	ldr	r3, [sp, #4]
 80013ea:	b15b      	cbz	r3, 8001404 <__smakebuf_r+0x74>
 80013ec:	4630      	mov	r0, r6
 80013ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013f2:	f000 f893 	bl	800151c <_isatty_r>
 80013f6:	b128      	cbz	r0, 8001404 <__smakebuf_r+0x74>
 80013f8:	89a3      	ldrh	r3, [r4, #12]
 80013fa:	f023 0303 	bic.w	r3, r3, #3
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	81a3      	strh	r3, [r4, #12]
 8001404:	89a0      	ldrh	r0, [r4, #12]
 8001406:	4305      	orrs	r5, r0
 8001408:	81a5      	strh	r5, [r4, #12]
 800140a:	e7cd      	b.n	80013a8 <__smakebuf_r+0x18>
 800140c:	0800068d 	.word	0x0800068d

08001410 <memchr>:
 8001410:	4603      	mov	r3, r0
 8001412:	b510      	push	{r4, lr}
 8001414:	b2c9      	uxtb	r1, r1
 8001416:	4402      	add	r2, r0
 8001418:	4293      	cmp	r3, r2
 800141a:	4618      	mov	r0, r3
 800141c:	d101      	bne.n	8001422 <memchr+0x12>
 800141e:	2000      	movs	r0, #0
 8001420:	e003      	b.n	800142a <memchr+0x1a>
 8001422:	7804      	ldrb	r4, [r0, #0]
 8001424:	3301      	adds	r3, #1
 8001426:	428c      	cmp	r4, r1
 8001428:	d1f6      	bne.n	8001418 <memchr+0x8>
 800142a:	bd10      	pop	{r4, pc}

0800142c <__malloc_lock>:
 800142c:	4801      	ldr	r0, [pc, #4]	; (8001434 <__malloc_lock+0x8>)
 800142e:	f7ff b9ff 	b.w	8000830 <__retarget_lock_acquire_recursive>
 8001432:	bf00      	nop
 8001434:	20000090 	.word	0x20000090

08001438 <__malloc_unlock>:
 8001438:	4801      	ldr	r0, [pc, #4]	; (8001440 <__malloc_unlock+0x8>)
 800143a:	f7ff b9fa 	b.w	8000832 <__retarget_lock_release_recursive>
 800143e:	bf00      	nop
 8001440:	20000090 	.word	0x20000090

08001444 <_free_r>:
 8001444:	b538      	push	{r3, r4, r5, lr}
 8001446:	4605      	mov	r5, r0
 8001448:	2900      	cmp	r1, #0
 800144a:	d040      	beq.n	80014ce <_free_r+0x8a>
 800144c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001450:	1f0c      	subs	r4, r1, #4
 8001452:	2b00      	cmp	r3, #0
 8001454:	bfb8      	it	lt
 8001456:	18e4      	addlt	r4, r4, r3
 8001458:	f7ff ffe8 	bl	800142c <__malloc_lock>
 800145c:	4a1c      	ldr	r2, [pc, #112]	; (80014d0 <_free_r+0x8c>)
 800145e:	6813      	ldr	r3, [r2, #0]
 8001460:	b933      	cbnz	r3, 8001470 <_free_r+0x2c>
 8001462:	6063      	str	r3, [r4, #4]
 8001464:	6014      	str	r4, [r2, #0]
 8001466:	4628      	mov	r0, r5
 8001468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800146c:	f7ff bfe4 	b.w	8001438 <__malloc_unlock>
 8001470:	42a3      	cmp	r3, r4
 8001472:	d908      	bls.n	8001486 <_free_r+0x42>
 8001474:	6820      	ldr	r0, [r4, #0]
 8001476:	1821      	adds	r1, r4, r0
 8001478:	428b      	cmp	r3, r1
 800147a:	bf01      	itttt	eq
 800147c:	6819      	ldreq	r1, [r3, #0]
 800147e:	685b      	ldreq	r3, [r3, #4]
 8001480:	1809      	addeq	r1, r1, r0
 8001482:	6021      	streq	r1, [r4, #0]
 8001484:	e7ed      	b.n	8001462 <_free_r+0x1e>
 8001486:	461a      	mov	r2, r3
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	b10b      	cbz	r3, 8001490 <_free_r+0x4c>
 800148c:	42a3      	cmp	r3, r4
 800148e:	d9fa      	bls.n	8001486 <_free_r+0x42>
 8001490:	6811      	ldr	r1, [r2, #0]
 8001492:	1850      	adds	r0, r2, r1
 8001494:	42a0      	cmp	r0, r4
 8001496:	d10b      	bne.n	80014b0 <_free_r+0x6c>
 8001498:	6820      	ldr	r0, [r4, #0]
 800149a:	4401      	add	r1, r0
 800149c:	1850      	adds	r0, r2, r1
 800149e:	4283      	cmp	r3, r0
 80014a0:	6011      	str	r1, [r2, #0]
 80014a2:	d1e0      	bne.n	8001466 <_free_r+0x22>
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4401      	add	r1, r0
 80014aa:	6011      	str	r1, [r2, #0]
 80014ac:	6053      	str	r3, [r2, #4]
 80014ae:	e7da      	b.n	8001466 <_free_r+0x22>
 80014b0:	d902      	bls.n	80014b8 <_free_r+0x74>
 80014b2:	230c      	movs	r3, #12
 80014b4:	602b      	str	r3, [r5, #0]
 80014b6:	e7d6      	b.n	8001466 <_free_r+0x22>
 80014b8:	6820      	ldr	r0, [r4, #0]
 80014ba:	1821      	adds	r1, r4, r0
 80014bc:	428b      	cmp	r3, r1
 80014be:	bf01      	itttt	eq
 80014c0:	6819      	ldreq	r1, [r3, #0]
 80014c2:	685b      	ldreq	r3, [r3, #4]
 80014c4:	1809      	addeq	r1, r1, r0
 80014c6:	6021      	streq	r1, [r4, #0]
 80014c8:	6063      	str	r3, [r4, #4]
 80014ca:	6054      	str	r4, [r2, #4]
 80014cc:	e7cb      	b.n	8001466 <_free_r+0x22>
 80014ce:	bd38      	pop	{r3, r4, r5, pc}
 80014d0:	20000094 	.word	0x20000094

080014d4 <_read_r>:
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	4604      	mov	r4, r0
 80014d8:	4608      	mov	r0, r1
 80014da:	4611      	mov	r1, r2
 80014dc:	2200      	movs	r2, #0
 80014de:	4d05      	ldr	r5, [pc, #20]	; (80014f4 <_read_r+0x20>)
 80014e0:	602a      	str	r2, [r5, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	f7fe fec5 	bl	8000272 <_read>
 80014e8:	1c43      	adds	r3, r0, #1
 80014ea:	d102      	bne.n	80014f2 <_read_r+0x1e>
 80014ec:	682b      	ldr	r3, [r5, #0]
 80014ee:	b103      	cbz	r3, 80014f2 <_read_r+0x1e>
 80014f0:	6023      	str	r3, [r4, #0]
 80014f2:	bd38      	pop	{r3, r4, r5, pc}
 80014f4:	2000009c 	.word	0x2000009c

080014f8 <_fstat_r>:
 80014f8:	b538      	push	{r3, r4, r5, lr}
 80014fa:	2300      	movs	r3, #0
 80014fc:	4d06      	ldr	r5, [pc, #24]	; (8001518 <_fstat_r+0x20>)
 80014fe:	4604      	mov	r4, r0
 8001500:	4608      	mov	r0, r1
 8001502:	4611      	mov	r1, r2
 8001504:	602b      	str	r3, [r5, #0]
 8001506:	f7fe fef8 	bl	80002fa <_fstat>
 800150a:	1c43      	adds	r3, r0, #1
 800150c:	d102      	bne.n	8001514 <_fstat_r+0x1c>
 800150e:	682b      	ldr	r3, [r5, #0]
 8001510:	b103      	cbz	r3, 8001514 <_fstat_r+0x1c>
 8001512:	6023      	str	r3, [r4, #0]
 8001514:	bd38      	pop	{r3, r4, r5, pc}
 8001516:	bf00      	nop
 8001518:	2000009c 	.word	0x2000009c

0800151c <_isatty_r>:
 800151c:	b538      	push	{r3, r4, r5, lr}
 800151e:	2300      	movs	r3, #0
 8001520:	4d05      	ldr	r5, [pc, #20]	; (8001538 <_isatty_r+0x1c>)
 8001522:	4604      	mov	r4, r0
 8001524:	4608      	mov	r0, r1
 8001526:	602b      	str	r3, [r5, #0]
 8001528:	f7fe fef6 	bl	8000318 <_isatty>
 800152c:	1c43      	adds	r3, r0, #1
 800152e:	d102      	bne.n	8001536 <_isatty_r+0x1a>
 8001530:	682b      	ldr	r3, [r5, #0]
 8001532:	b103      	cbz	r3, 8001536 <_isatty_r+0x1a>
 8001534:	6023      	str	r3, [r4, #0]
 8001536:	bd38      	pop	{r3, r4, r5, pc}
 8001538:	2000009c 	.word	0x2000009c

0800153c <_init>:
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	bf00      	nop
 8001540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001542:	bc08      	pop	{r3}
 8001544:	469e      	mov	lr, r3
 8001546:	4770      	bx	lr

08001548 <_fini>:
 8001548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154a:	bf00      	nop
 800154c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800154e:	bc08      	pop	{r3}
 8001550:	469e      	mov	lr, r3
 8001552:	4770      	bx	lr
