
19_Timer_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080015bc  080015bc  000115bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001670  08001670  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001670  08001670  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001670  08001670  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001670  08001670  00011670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001674  08001674  00011674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  080016e0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080016e0  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000257f  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bc5  00000000  00000000  00022610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000368  00000000  00000000  000231d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002d0  00000000  00000000  00023540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000243d  00000000  00000000  00023810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003dde  00000000  00000000  00025c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080c3c  00000000  00000000  00029a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aa667  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001300  00000000  00000000  000aa6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080015a4 	.word	0x080015a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080015a4 	.word	0x080015a4

0800014c <main>:
#define LED_PIN				PIN5

uint32_t count = 0;
void TIM2_callback(void);

int main(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	/*1. Enable clock access to GPIOA*/
	RCC->APB2ENR |= GPIOAEN;
 8000150:	4b11      	ldr	r3, [pc, #68]	; (8000198 <main+0x4c>)
 8000152:	699b      	ldr	r3, [r3, #24]
 8000154:	4a10      	ldr	r2, [pc, #64]	; (8000198 <main+0x4c>)
 8000156:	f043 0304 	orr.w	r3, r3, #4
 800015a:	6193      	str	r3, [r2, #24]

	/*2. Set PA5 as output pin*/
	GPIOA->CRL &= ~(1U << 23);
 800015c:	4b0f      	ldr	r3, [pc, #60]	; (800019c <main+0x50>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	4a0e      	ldr	r2, [pc, #56]	; (800019c <main+0x50>)
 8000162:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000166:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 22);
 8000168:	4b0c      	ldr	r3, [pc, #48]	; (800019c <main+0x50>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <main+0x50>)
 800016e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000172:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 21);
 8000174:	4b09      	ldr	r3, [pc, #36]	; (800019c <main+0x50>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a08      	ldr	r2, [pc, #32]	; (800019c <main+0x50>)
 800017a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800017e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 20);
 8000180:	4b06      	ldr	r3, [pc, #24]	; (800019c <main+0x50>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a05      	ldr	r2, [pc, #20]	; (800019c <main+0x50>)
 8000186:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800018a:	6013      	str	r3, [r2, #0]

	uart2_tx_init();
 800018c:	f000 f956 	bl	800043c <uart2_tx_init>
	//tim2_1hz_int();
	tim2_1hz_interrupt_init();
 8000190:	f000 f91e 	bl	80003d0 <tim2_1hz_interrupt_init>

	while(1){
 8000194:	e7fe      	b.n	8000194 <main+0x48>
 8000196:	bf00      	nop
 8000198:	40021000 	.word	0x40021000
 800019c:	40010800 	.word	0x40010800

080001a0 <TIM2_callback>:

	}


}
void TIM2_callback(void){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
	printf("%d. A second passed !! \n\r", (int)count++);
 80001a4:	4b08      	ldr	r3, [pc, #32]	; (80001c8 <TIM2_callback+0x28>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	1c5a      	adds	r2, r3, #1
 80001aa:	4907      	ldr	r1, [pc, #28]	; (80001c8 <TIM2_callback+0x28>)
 80001ac:	600a      	str	r2, [r1, #0]
 80001ae:	4619      	mov	r1, r3
 80001b0:	4806      	ldr	r0, [pc, #24]	; (80001cc <TIM2_callback+0x2c>)
 80001b2:	f000 fa63 	bl	800067c <iprintf>
	GPIOA->ODR ^= LED_PIN;
 80001b6:	4b06      	ldr	r3, [pc, #24]	; (80001d0 <TIM2_callback+0x30>)
 80001b8:	68db      	ldr	r3, [r3, #12]
 80001ba:	4a05      	ldr	r2, [pc, #20]	; (80001d0 <TIM2_callback+0x30>)
 80001bc:	f083 0320 	eor.w	r3, r3, #32
 80001c0:	60d3      	str	r3, [r2, #12]
}
 80001c2:	bf00      	nop
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080015bc 	.word	0x080015bc
 80001d0:	40010800 	.word	0x40010800

080001d4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

	/*1. Clear update interrupt flag */
	TIM2->SR &= ~SR_UIF;
 80001d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001dc:	691b      	ldr	r3, [r3, #16]
 80001de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001e2:	f023 0301 	bic.w	r3, r3, #1
 80001e6:	6113      	str	r3, [r2, #16]

	/*2. Do something*/
	TIM2_callback();
 80001e8:	f7ff ffda 	bl	80001a0 <TIM2_callback>
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80001f4:	e7fe      	b.n	80001f4 <NMI_Handler+0x4>

080001f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001f6:	b480      	push	{r7}
 80001f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001fa:	e7fe      	b.n	80001fa <HardFault_Handler+0x4>

080001fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000200:	e7fe      	b.n	8000200 <MemManage_Handler+0x4>

08000202 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000202:	b480      	push	{r7}
 8000204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000206:	e7fe      	b.n	8000206 <BusFault_Handler+0x4>

08000208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800020c:	e7fe      	b.n	800020c <UsageFault_Handler+0x4>

0800020e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800020e:	b480      	push	{r7}
 8000210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000212:	bf00      	nop
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr

0800021a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800021a:	b480      	push	{r7}
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800021e:	bf00      	nop
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr

08000226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000226:	b480      	push	{r7}
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800022a:	bf00      	nop
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr

08000232 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000232:	b580      	push	{r7, lr}
 8000234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000236:	f000 f9bb 	bl	80005b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}

0800023e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800023e:	b580      	push	{r7, lr}
 8000240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000242:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000246:	f000 f9c5 	bl	80005d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800024a:	bf00      	nop
 800024c:	bd80      	pop	{r7, pc}

0800024e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800024e:	b580      	push	{r7, lr}
 8000250:	b086      	sub	sp, #24
 8000252:	af00      	add	r7, sp, #0
 8000254:	60f8      	str	r0, [r7, #12]
 8000256:	60b9      	str	r1, [r7, #8]
 8000258:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]
 800025e:	e00a      	b.n	8000276 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000260:	f3af 8000 	nop.w
 8000264:	4601      	mov	r1, r0
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	1c5a      	adds	r2, r3, #1
 800026a:	60ba      	str	r2, [r7, #8]
 800026c:	b2ca      	uxtb	r2, r1
 800026e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	3301      	adds	r3, #1
 8000274:	617b      	str	r3, [r7, #20]
 8000276:	697a      	ldr	r2, [r7, #20]
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	429a      	cmp	r2, r3
 800027c:	dbf0      	blt.n	8000260 <_read+0x12>
	}

return len;
 800027e:	687b      	ldr	r3, [r7, #4]
}
 8000280:	4618      	mov	r0, r3
 8000282:	3718      	adds	r7, #24
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b086      	sub	sp, #24
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	e009      	b.n	80002ae <_write+0x26>
	{
		__io_putchar(*ptr++);
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	1c5a      	adds	r2, r3, #1
 800029e:	60ba      	str	r2, [r7, #8]
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 f8be 	bl	8000424 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	3301      	adds	r3, #1
 80002ac:	617b      	str	r3, [r7, #20]
 80002ae:	697a      	ldr	r2, [r7, #20]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	dbf1      	blt.n	800029a <_write+0x12>
	}
	return len;
 80002b6:	687b      	ldr	r3, [r7, #4]
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3718      	adds	r7, #24
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <_close>:

int _close(int file)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	return -1;
 80002c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr

080002d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002d6:	b480      	push	{r7}
 80002d8:	b083      	sub	sp, #12
 80002da:	af00      	add	r7, sp, #0
 80002dc:	6078      	str	r0, [r7, #4]
 80002de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002e6:	605a      	str	r2, [r3, #4]
	return 0;
 80002e8:	2300      	movs	r3, #0
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr

080002f4 <_isatty>:

int _isatty(int file)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	return 1;
 80002fc:	2301      	movs	r3, #1
}
 80002fe:	4618      	mov	r0, r3
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr

08000308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
 800030e:	60f8      	str	r0, [r7, #12]
 8000310:	60b9      	str	r1, [r7, #8]
 8000312:	607a      	str	r2, [r7, #4]
	return 0;
 8000314:	2300      	movs	r3, #0
}
 8000316:	4618      	mov	r0, r3
 8000318:	3714      	adds	r7, #20
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr

08000320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <_sbrk+0x5c>)
 800032a:	4b15      	ldr	r3, [pc, #84]	; (8000380 <_sbrk+0x60>)
 800032c:	1ad3      	subs	r3, r2, r3
 800032e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <_sbrk+0x64>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d102      	bne.n	8000342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <_sbrk+0x64>)
 800033e:	4a12      	ldr	r2, [pc, #72]	; (8000388 <_sbrk+0x68>)
 8000340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000342:	4b10      	ldr	r3, [pc, #64]	; (8000384 <_sbrk+0x64>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	693a      	ldr	r2, [r7, #16]
 800034c:	429a      	cmp	r2, r3
 800034e:	d207      	bcs.n	8000360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000350:	f000 f962 	bl	8000618 <__errno>
 8000354:	4603      	mov	r3, r0
 8000356:	220c      	movs	r2, #12
 8000358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800035a:	f04f 33ff 	mov.w	r3, #4294967295
 800035e:	e009      	b.n	8000374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <_sbrk+0x64>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000366:	4b07      	ldr	r3, [pc, #28]	; (8000384 <_sbrk+0x64>)
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4413      	add	r3, r2
 800036e:	4a05      	ldr	r2, [pc, #20]	; (8000384 <_sbrk+0x64>)
 8000370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000372:	68fb      	ldr	r3, [r7, #12]
}
 8000374:	4618      	mov	r0, r3
 8000376:	3718      	adds	r7, #24
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20005000 	.word	0x20005000
 8000380:	00000400 	.word	0x00000400
 8000384:	20000088 	.word	0x20000088
 8000388:	200000a0 	.word	0x200000a0

0800038c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr

08000398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db0b      	blt.n	80003c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	f003 021f 	and.w	r2, r3, #31
 80003b0:	4906      	ldr	r1, [pc, #24]	; (80003cc <__NVIC_EnableIRQ+0x34>)
 80003b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b6:	095b      	lsrs	r3, r3, #5
 80003b8:	2001      	movs	r0, #1
 80003ba:	fa00 f202 	lsl.w	r2, r0, r2
 80003be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
 80003cc:	e000e100 	.word	0xe000e100

080003d0 <tim2_1hz_interrupt_init>:
	TIM2->CR1 = CR1_CEN;


}

void tim2_1hz_interrupt_init(void){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0

	/*1. Enable clock access to timer2*/
	RCC->APB1ENR |= TIM2EN;
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <tim2_1hz_interrupt_init+0x50>)
 80003d6:	69db      	ldr	r3, [r3, #28]
 80003d8:	4a11      	ldr	r2, [pc, #68]	; (8000420 <tim2_1hz_interrupt_init+0x50>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	61d3      	str	r3, [r2, #28]

	/*2. Set a pre-scaler value*/
	TIM2->PSC = 800 - 1; // 8 000 000 / 800 = 10 000
 80003e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e4:	f240 321f 	movw	r2, #799	; 0x31f
 80003e8:	629a      	str	r2, [r3, #40]	; 0x28

	/*3. Set an auto-reload value*/
	TIM2->ARR = 10000 - 1; // 10 000 / 10 000 = 1
 80003ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80003f2:	62da      	str	r2, [r3, #44]	; 0x2c

	/*4. Clear Counter*/
	TIM2->CNT = 0;
 80003f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f8:	2200      	movs	r2, #0
 80003fa:	625a      	str	r2, [r3, #36]	; 0x24

	/*5. Enable timer*/
	TIM2->CR1 = CR1_CEN;
 80003fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000400:	2201      	movs	r2, #1
 8000402:	601a      	str	r2, [r3, #0]

	/*6. Enable Timer interrupt */
	TIM2->DIER |= TIM_DIER_UIE;
 8000404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	60d3      	str	r3, [r2, #12]

	/*7. Enable Timer interrupt in NVIC*/
	NVIC_EnableIRQ(TIM2_IRQn);
 8000414:	201c      	movs	r0, #28
 8000416:	f7ff ffbf 	bl	8000398 <__NVIC_EnableIRQ>


}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000

08000424 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PheriphClk, uint32_t BaudRate);


void uart2_write(int ch);

int __io_putchar(int ch){
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 800042c:	6878      	ldr	r0, [r7, #4]
 800042e:	f000 f85f 	bl	80004f0 <uart2_write>
	return ch;
 8000432:	687b      	ldr	r3, [r7, #4]
}
 8000434:	4618      	mov	r0, r3
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <uart2_tx_init>:
	/*Configure the transfer direction */
	USART2->CR1 |= CR1_TE | CR1_RE;
	/*Enable uart module */
	USART2->CR1 |= CR1_UE;
}
void uart2_tx_init(void){
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	/********** Configure uart gpio pin **********/
	/*Enable clock access to gpioa */
	RCC->APB2ENR |= GPIOAEN;
 8000440:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <uart2_tx_init+0xa4>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a26      	ldr	r2, [pc, #152]	; (80004e0 <uart2_tx_init+0xa4>)
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	6193      	str	r3, [r2, #24]
	/*Set PA2 mode to alternate function mode (TX/PA9, RX/PA10) */
//	AFIO->MAPR = 0x00000000;
//	AFIO->MAPR &= ~(1U << 2);
	GPIOA->CRL &= ~(1U << 15);
 800044c:	4b25      	ldr	r3, [pc, #148]	; (80004e4 <uart2_tx_init+0xa8>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a24      	ldr	r2, [pc, #144]	; (80004e4 <uart2_tx_init+0xa8>)
 8000452:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000456:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 14);
 8000458:	4b22      	ldr	r3, [pc, #136]	; (80004e4 <uart2_tx_init+0xa8>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a21      	ldr	r2, [pc, #132]	; (80004e4 <uart2_tx_init+0xa8>)
 800045e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000462:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 13);
 8000464:	4b1f      	ldr	r3, [pc, #124]	; (80004e4 <uart2_tx_init+0xa8>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a1e      	ldr	r2, [pc, #120]	; (80004e4 <uart2_tx_init+0xa8>)
 800046a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800046e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 12);
 8000470:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <uart2_tx_init+0xa8>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a1b      	ldr	r2, [pc, #108]	; (80004e4 <uart2_tx_init+0xa8>)
 8000476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800047a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 11);
 800047c:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <uart2_tx_init+0xa8>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a18      	ldr	r2, [pc, #96]	; (80004e4 <uart2_tx_init+0xa8>)
 8000482:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000486:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 10);
 8000488:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <uart2_tx_init+0xa8>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a15      	ldr	r2, [pc, #84]	; (80004e4 <uart2_tx_init+0xa8>)
 800048e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000492:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 9);
 8000494:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <uart2_tx_init+0xa8>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <uart2_tx_init+0xa8>)
 800049a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800049e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 8);
 80004a0:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <uart2_tx_init+0xa8>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a0f      	ldr	r2, [pc, #60]	; (80004e4 <uart2_tx_init+0xa8>)
 80004a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004aa:	6013      	str	r3, [r2, #0]

	/********** Configure uart module **********/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <uart2_tx_init+0xa4>)
 80004ae:	69db      	ldr	r3, [r3, #28]
 80004b0:	4a0b      	ldr	r2, [pc, #44]	; (80004e0 <uart2_tx_init+0xa4>)
 80004b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b6:	61d3      	str	r3, [r2, #28]
	/*Configure baudrate */
	//USART2->BRR = 0x0EA6;
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80004b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004bc:	490a      	ldr	r1, [pc, #40]	; (80004e8 <uart2_tx_init+0xac>)
 80004be:	480b      	ldr	r0, [pc, #44]	; (80004ec <uart2_tx_init+0xb0>)
 80004c0:	f000 f82c 	bl	800051c <uart_set_baudrate>
	/*Configure the transfer direction */
	USART2->CR1 |= CR1_TE;
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <uart2_tx_init+0xb0>)
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	4a08      	ldr	r2, [pc, #32]	; (80004ec <uart2_tx_init+0xb0>)
 80004ca:	f043 0308 	orr.w	r3, r3, #8
 80004ce:	60d3      	str	r3, [r2, #12]
	/*Enable uart module */
	USART2->CR1 |= CR1_UE;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <uart2_tx_init+0xb0>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	4a05      	ldr	r2, [pc, #20]	; (80004ec <uart2_tx_init+0xb0>)
 80004d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004da:	60d3      	str	r3, [r2, #12]
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010800 	.word	0x40010800
 80004e8:	007a1200 	.word	0x007a1200
 80004ec:	40004400 	.word	0x40004400

080004f0 <uart2_write>:
	while(!(USART2->SR & SR_RXNE)){}
	/*Read data*/
	return USART2->DR;
}

void uart2_write(int ch){
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty before sending again*/
	while(!(USART2->SR & SR_TXE)){}
 80004f8:	bf00      	nop
 80004fa:	4b07      	ldr	r3, [pc, #28]	; (8000518 <uart2_write+0x28>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0f9      	beq.n	80004fa <uart2_write+0xa>
	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4a03      	ldr	r2, [pc, #12]	; (8000518 <uart2_write+0x28>)
 800050a:	b2db      	uxtb	r3, r3
 800050c:	6053      	str	r3, [r2, #4]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	40004400 	.word	0x40004400

0800051c <uart_set_baudrate>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PheriphClk, uint32_t BaudRate){
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PheriphClk, BaudRate);
 8000528:	6879      	ldr	r1, [r7, #4]
 800052a:	68b8      	ldr	r0, [r7, #8]
 800052c:	f000 f808 	bl	8000540 <compute_uart_bd>
 8000530:	4603      	mov	r3, r0
 8000532:	461a      	mov	r2, r3
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	609a      	str	r2, [r3, #8]
}
 8000538:	bf00      	nop
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PheriphClk, uint32_t BaudRate){
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	return ( (PheriphClk + (BaudRate/2U)) / BaudRate);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	085a      	lsrs	r2, r3, #1
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	441a      	add	r2, r3
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	fbb2 f3f3 	udiv	r3, r2, r3
 8000558:	b29b      	uxth	r3, r3
}
 800055a:	4618      	mov	r0, r3
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000564:	480c      	ldr	r0, [pc, #48]	; (8000598 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000566:	490d      	ldr	r1, [pc, #52]	; (800059c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000568:	4a0d      	ldr	r2, [pc, #52]	; (80005a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800056c:	e002      	b.n	8000574 <LoopCopyDataInit>

0800056e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000572:	3304      	adds	r3, #4

08000574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000578:	d3f9      	bcc.n	800056e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057a:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800057c:	4c0a      	ldr	r4, [pc, #40]	; (80005a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000580:	e001      	b.n	8000586 <LoopFillZerobss>

08000582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000584:	3204      	adds	r2, #4

08000586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000588:	d3fb      	bcc.n	8000582 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800058a:	f7ff feff 	bl	800038c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800058e:	f000 f849 	bl	8000624 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000592:	f7ff fddb 	bl	800014c <main>
  bx lr
 8000596:	4770      	bx	lr
  ldr r0, =_sdata
 8000598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800059c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80005a0:	08001678 	.word	0x08001678
  ldr r2, =_sbss
 80005a4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80005a8:	200000a0 	.word	0x200000a0

080005ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ac:	e7fe      	b.n	80005ac <ADC1_2_IRQHandler>
	...

080005b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <HAL_IncTick+0x1c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <HAL_IncTick+0x20>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	4a03      	ldr	r2, [pc, #12]	; (80005d0 <HAL_IncTick+0x20>)
 80005c2:	6013      	str	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	20000000 	.word	0x20000000
 80005d0:	2000008c 	.word	0x2000008c

080005d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80005e0:	695a      	ldr	r2, [r3, #20]
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	4013      	ands	r3, r2
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d006      	beq.n	80005f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80005ea:	4a05      	ldr	r2, [pc, #20]	; (8000600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f806 	bl	8000604 <HAL_GPIO_EXTI_Callback>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40010400 	.word	0x40010400

08000604 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <__errno>:
 8000618:	4b01      	ldr	r3, [pc, #4]	; (8000620 <__errno+0x8>)
 800061a:	6818      	ldr	r0, [r3, #0]
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000004 	.word	0x20000004

08000624 <__libc_init_array>:
 8000624:	b570      	push	{r4, r5, r6, lr}
 8000626:	2600      	movs	r6, #0
 8000628:	4d0c      	ldr	r5, [pc, #48]	; (800065c <__libc_init_array+0x38>)
 800062a:	4c0d      	ldr	r4, [pc, #52]	; (8000660 <__libc_init_array+0x3c>)
 800062c:	1b64      	subs	r4, r4, r5
 800062e:	10a4      	asrs	r4, r4, #2
 8000630:	42a6      	cmp	r6, r4
 8000632:	d109      	bne.n	8000648 <__libc_init_array+0x24>
 8000634:	f000 ffb6 	bl	80015a4 <_init>
 8000638:	2600      	movs	r6, #0
 800063a:	4d0a      	ldr	r5, [pc, #40]	; (8000664 <__libc_init_array+0x40>)
 800063c:	4c0a      	ldr	r4, [pc, #40]	; (8000668 <__libc_init_array+0x44>)
 800063e:	1b64      	subs	r4, r4, r5
 8000640:	10a4      	asrs	r4, r4, #2
 8000642:	42a6      	cmp	r6, r4
 8000644:	d105      	bne.n	8000652 <__libc_init_array+0x2e>
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	f855 3b04 	ldr.w	r3, [r5], #4
 800064c:	4798      	blx	r3
 800064e:	3601      	adds	r6, #1
 8000650:	e7ee      	b.n	8000630 <__libc_init_array+0xc>
 8000652:	f855 3b04 	ldr.w	r3, [r5], #4
 8000656:	4798      	blx	r3
 8000658:	3601      	adds	r6, #1
 800065a:	e7f2      	b.n	8000642 <__libc_init_array+0x1e>
 800065c:	08001670 	.word	0x08001670
 8000660:	08001670 	.word	0x08001670
 8000664:	08001670 	.word	0x08001670
 8000668:	08001674 	.word	0x08001674

0800066c <memset>:
 800066c:	4603      	mov	r3, r0
 800066e:	4402      	add	r2, r0
 8000670:	4293      	cmp	r3, r2
 8000672:	d100      	bne.n	8000676 <memset+0xa>
 8000674:	4770      	bx	lr
 8000676:	f803 1b01 	strb.w	r1, [r3], #1
 800067a:	e7f9      	b.n	8000670 <memset+0x4>

0800067c <iprintf>:
 800067c:	b40f      	push	{r0, r1, r2, r3}
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <iprintf+0x2c>)
 8000680:	b513      	push	{r0, r1, r4, lr}
 8000682:	681c      	ldr	r4, [r3, #0]
 8000684:	b124      	cbz	r4, 8000690 <iprintf+0x14>
 8000686:	69a3      	ldr	r3, [r4, #24]
 8000688:	b913      	cbnz	r3, 8000690 <iprintf+0x14>
 800068a:	4620      	mov	r0, r4
 800068c:	f000 f866 	bl	800075c <__sinit>
 8000690:	ab05      	add	r3, sp, #20
 8000692:	4620      	mov	r0, r4
 8000694:	9a04      	ldr	r2, [sp, #16]
 8000696:	68a1      	ldr	r1, [r4, #8]
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	f000 f9bb 	bl	8000a14 <_vfiprintf_r>
 800069e:	b002      	add	sp, #8
 80006a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006a4:	b004      	add	sp, #16
 80006a6:	4770      	bx	lr
 80006a8:	20000004 	.word	0x20000004

080006ac <std>:
 80006ac:	2300      	movs	r3, #0
 80006ae:	b510      	push	{r4, lr}
 80006b0:	4604      	mov	r4, r0
 80006b2:	e9c0 3300 	strd	r3, r3, [r0]
 80006b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006ba:	6083      	str	r3, [r0, #8]
 80006bc:	8181      	strh	r1, [r0, #12]
 80006be:	6643      	str	r3, [r0, #100]	; 0x64
 80006c0:	81c2      	strh	r2, [r0, #14]
 80006c2:	6183      	str	r3, [r0, #24]
 80006c4:	4619      	mov	r1, r3
 80006c6:	2208      	movs	r2, #8
 80006c8:	305c      	adds	r0, #92	; 0x5c
 80006ca:	f7ff ffcf 	bl	800066c <memset>
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <std+0x38>)
 80006d0:	6224      	str	r4, [r4, #32]
 80006d2:	6263      	str	r3, [r4, #36]	; 0x24
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <std+0x3c>)
 80006d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <std+0x40>)
 80006da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006dc:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <std+0x44>)
 80006de:	6323      	str	r3, [r4, #48]	; 0x30
 80006e0:	bd10      	pop	{r4, pc}
 80006e2:	bf00      	nop
 80006e4:	08000fc1 	.word	0x08000fc1
 80006e8:	08000fe3 	.word	0x08000fe3
 80006ec:	0800101b 	.word	0x0800101b
 80006f0:	0800103f 	.word	0x0800103f

080006f4 <_cleanup_r>:
 80006f4:	4901      	ldr	r1, [pc, #4]	; (80006fc <_cleanup_r+0x8>)
 80006f6:	f000 b8af 	b.w	8000858 <_fwalk_reent>
 80006fa:	bf00      	nop
 80006fc:	08001311 	.word	0x08001311

08000700 <__sfmoreglue>:
 8000700:	2268      	movs	r2, #104	; 0x68
 8000702:	b570      	push	{r4, r5, r6, lr}
 8000704:	1e4d      	subs	r5, r1, #1
 8000706:	4355      	muls	r5, r2
 8000708:	460e      	mov	r6, r1
 800070a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800070e:	f000 f8e5 	bl	80008dc <_malloc_r>
 8000712:	4604      	mov	r4, r0
 8000714:	b140      	cbz	r0, 8000728 <__sfmoreglue+0x28>
 8000716:	2100      	movs	r1, #0
 8000718:	e9c0 1600 	strd	r1, r6, [r0]
 800071c:	300c      	adds	r0, #12
 800071e:	60a0      	str	r0, [r4, #8]
 8000720:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000724:	f7ff ffa2 	bl	800066c <memset>
 8000728:	4620      	mov	r0, r4
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__sfp_lock_acquire>:
 800072c:	4801      	ldr	r0, [pc, #4]	; (8000734 <__sfp_lock_acquire+0x8>)
 800072e:	f000 b8b3 	b.w	8000898 <__retarget_lock_acquire_recursive>
 8000732:	bf00      	nop
 8000734:	20000091 	.word	0x20000091

08000738 <__sfp_lock_release>:
 8000738:	4801      	ldr	r0, [pc, #4]	; (8000740 <__sfp_lock_release+0x8>)
 800073a:	f000 b8ae 	b.w	800089a <__retarget_lock_release_recursive>
 800073e:	bf00      	nop
 8000740:	20000091 	.word	0x20000091

08000744 <__sinit_lock_acquire>:
 8000744:	4801      	ldr	r0, [pc, #4]	; (800074c <__sinit_lock_acquire+0x8>)
 8000746:	f000 b8a7 	b.w	8000898 <__retarget_lock_acquire_recursive>
 800074a:	bf00      	nop
 800074c:	20000092 	.word	0x20000092

08000750 <__sinit_lock_release>:
 8000750:	4801      	ldr	r0, [pc, #4]	; (8000758 <__sinit_lock_release+0x8>)
 8000752:	f000 b8a2 	b.w	800089a <__retarget_lock_release_recursive>
 8000756:	bf00      	nop
 8000758:	20000092 	.word	0x20000092

0800075c <__sinit>:
 800075c:	b510      	push	{r4, lr}
 800075e:	4604      	mov	r4, r0
 8000760:	f7ff fff0 	bl	8000744 <__sinit_lock_acquire>
 8000764:	69a3      	ldr	r3, [r4, #24]
 8000766:	b11b      	cbz	r3, 8000770 <__sinit+0x14>
 8000768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800076c:	f7ff bff0 	b.w	8000750 <__sinit_lock_release>
 8000770:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000774:	6523      	str	r3, [r4, #80]	; 0x50
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <__sinit+0x68>)
 8000778:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <__sinit+0x6c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	62a2      	str	r2, [r4, #40]	; 0x28
 800077e:	42a3      	cmp	r3, r4
 8000780:	bf08      	it	eq
 8000782:	2301      	moveq	r3, #1
 8000784:	4620      	mov	r0, r4
 8000786:	bf08      	it	eq
 8000788:	61a3      	streq	r3, [r4, #24]
 800078a:	f000 f81f 	bl	80007cc <__sfp>
 800078e:	6060      	str	r0, [r4, #4]
 8000790:	4620      	mov	r0, r4
 8000792:	f000 f81b 	bl	80007cc <__sfp>
 8000796:	60a0      	str	r0, [r4, #8]
 8000798:	4620      	mov	r0, r4
 800079a:	f000 f817 	bl	80007cc <__sfp>
 800079e:	2200      	movs	r2, #0
 80007a0:	2104      	movs	r1, #4
 80007a2:	60e0      	str	r0, [r4, #12]
 80007a4:	6860      	ldr	r0, [r4, #4]
 80007a6:	f7ff ff81 	bl	80006ac <std>
 80007aa:	2201      	movs	r2, #1
 80007ac:	2109      	movs	r1, #9
 80007ae:	68a0      	ldr	r0, [r4, #8]
 80007b0:	f7ff ff7c 	bl	80006ac <std>
 80007b4:	2202      	movs	r2, #2
 80007b6:	2112      	movs	r1, #18
 80007b8:	68e0      	ldr	r0, [r4, #12]
 80007ba:	f7ff ff77 	bl	80006ac <std>
 80007be:	2301      	movs	r3, #1
 80007c0:	61a3      	str	r3, [r4, #24]
 80007c2:	e7d1      	b.n	8000768 <__sinit+0xc>
 80007c4:	080015d8 	.word	0x080015d8
 80007c8:	080006f5 	.word	0x080006f5

080007cc <__sfp>:
 80007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ce:	4607      	mov	r7, r0
 80007d0:	f7ff ffac 	bl	800072c <__sfp_lock_acquire>
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <__sfp+0x84>)
 80007d6:	681e      	ldr	r6, [r3, #0]
 80007d8:	69b3      	ldr	r3, [r6, #24]
 80007da:	b913      	cbnz	r3, 80007e2 <__sfp+0x16>
 80007dc:	4630      	mov	r0, r6
 80007de:	f7ff ffbd 	bl	800075c <__sinit>
 80007e2:	3648      	adds	r6, #72	; 0x48
 80007e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80007e8:	3b01      	subs	r3, #1
 80007ea:	d503      	bpl.n	80007f4 <__sfp+0x28>
 80007ec:	6833      	ldr	r3, [r6, #0]
 80007ee:	b30b      	cbz	r3, 8000834 <__sfp+0x68>
 80007f0:	6836      	ldr	r6, [r6, #0]
 80007f2:	e7f7      	b.n	80007e4 <__sfp+0x18>
 80007f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80007f8:	b9d5      	cbnz	r5, 8000830 <__sfp+0x64>
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <__sfp+0x88>)
 80007fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000800:	60e3      	str	r3, [r4, #12]
 8000802:	6665      	str	r5, [r4, #100]	; 0x64
 8000804:	f000 f847 	bl	8000896 <__retarget_lock_init_recursive>
 8000808:	f7ff ff96 	bl	8000738 <__sfp_lock_release>
 800080c:	2208      	movs	r2, #8
 800080e:	4629      	mov	r1, r5
 8000810:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000814:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000818:	6025      	str	r5, [r4, #0]
 800081a:	61a5      	str	r5, [r4, #24]
 800081c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000820:	f7ff ff24 	bl	800066c <memset>
 8000824:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000828:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800082c:	4620      	mov	r0, r4
 800082e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000830:	3468      	adds	r4, #104	; 0x68
 8000832:	e7d9      	b.n	80007e8 <__sfp+0x1c>
 8000834:	2104      	movs	r1, #4
 8000836:	4638      	mov	r0, r7
 8000838:	f7ff ff62 	bl	8000700 <__sfmoreglue>
 800083c:	4604      	mov	r4, r0
 800083e:	6030      	str	r0, [r6, #0]
 8000840:	2800      	cmp	r0, #0
 8000842:	d1d5      	bne.n	80007f0 <__sfp+0x24>
 8000844:	f7ff ff78 	bl	8000738 <__sfp_lock_release>
 8000848:	230c      	movs	r3, #12
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	e7ee      	b.n	800082c <__sfp+0x60>
 800084e:	bf00      	nop
 8000850:	080015d8 	.word	0x080015d8
 8000854:	ffff0001 	.word	0xffff0001

08000858 <_fwalk_reent>:
 8000858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800085c:	4606      	mov	r6, r0
 800085e:	4688      	mov	r8, r1
 8000860:	2700      	movs	r7, #0
 8000862:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000866:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800086a:	f1b9 0901 	subs.w	r9, r9, #1
 800086e:	d505      	bpl.n	800087c <_fwalk_reent+0x24>
 8000870:	6824      	ldr	r4, [r4, #0]
 8000872:	2c00      	cmp	r4, #0
 8000874:	d1f7      	bne.n	8000866 <_fwalk_reent+0xe>
 8000876:	4638      	mov	r0, r7
 8000878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800087c:	89ab      	ldrh	r3, [r5, #12]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d907      	bls.n	8000892 <_fwalk_reent+0x3a>
 8000882:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000886:	3301      	adds	r3, #1
 8000888:	d003      	beq.n	8000892 <_fwalk_reent+0x3a>
 800088a:	4629      	mov	r1, r5
 800088c:	4630      	mov	r0, r6
 800088e:	47c0      	blx	r8
 8000890:	4307      	orrs	r7, r0
 8000892:	3568      	adds	r5, #104	; 0x68
 8000894:	e7e9      	b.n	800086a <_fwalk_reent+0x12>

08000896 <__retarget_lock_init_recursive>:
 8000896:	4770      	bx	lr

08000898 <__retarget_lock_acquire_recursive>:
 8000898:	4770      	bx	lr

0800089a <__retarget_lock_release_recursive>:
 800089a:	4770      	bx	lr

0800089c <sbrk_aligned>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	4e0e      	ldr	r6, [pc, #56]	; (80008d8 <sbrk_aligned+0x3c>)
 80008a0:	460c      	mov	r4, r1
 80008a2:	6831      	ldr	r1, [r6, #0]
 80008a4:	4605      	mov	r5, r0
 80008a6:	b911      	cbnz	r1, 80008ae <sbrk_aligned+0x12>
 80008a8:	f000 fb7a 	bl	8000fa0 <_sbrk_r>
 80008ac:	6030      	str	r0, [r6, #0]
 80008ae:	4621      	mov	r1, r4
 80008b0:	4628      	mov	r0, r5
 80008b2:	f000 fb75 	bl	8000fa0 <_sbrk_r>
 80008b6:	1c43      	adds	r3, r0, #1
 80008b8:	d00a      	beq.n	80008d0 <sbrk_aligned+0x34>
 80008ba:	1cc4      	adds	r4, r0, #3
 80008bc:	f024 0403 	bic.w	r4, r4, #3
 80008c0:	42a0      	cmp	r0, r4
 80008c2:	d007      	beq.n	80008d4 <sbrk_aligned+0x38>
 80008c4:	1a21      	subs	r1, r4, r0
 80008c6:	4628      	mov	r0, r5
 80008c8:	f000 fb6a 	bl	8000fa0 <_sbrk_r>
 80008cc:	3001      	adds	r0, #1
 80008ce:	d101      	bne.n	80008d4 <sbrk_aligned+0x38>
 80008d0:	f04f 34ff 	mov.w	r4, #4294967295
 80008d4:	4620      	mov	r0, r4
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	20000098 	.word	0x20000098

080008dc <_malloc_r>:
 80008dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008e0:	1ccd      	adds	r5, r1, #3
 80008e2:	f025 0503 	bic.w	r5, r5, #3
 80008e6:	3508      	adds	r5, #8
 80008e8:	2d0c      	cmp	r5, #12
 80008ea:	bf38      	it	cc
 80008ec:	250c      	movcc	r5, #12
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	4607      	mov	r7, r0
 80008f2:	db01      	blt.n	80008f8 <_malloc_r+0x1c>
 80008f4:	42a9      	cmp	r1, r5
 80008f6:	d905      	bls.n	8000904 <_malloc_r+0x28>
 80008f8:	230c      	movs	r3, #12
 80008fa:	2600      	movs	r6, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4630      	mov	r0, r6
 8000900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000904:	4e2e      	ldr	r6, [pc, #184]	; (80009c0 <_malloc_r+0xe4>)
 8000906:	f000 fdc5 	bl	8001494 <__malloc_lock>
 800090a:	6833      	ldr	r3, [r6, #0]
 800090c:	461c      	mov	r4, r3
 800090e:	bb34      	cbnz	r4, 800095e <_malloc_r+0x82>
 8000910:	4629      	mov	r1, r5
 8000912:	4638      	mov	r0, r7
 8000914:	f7ff ffc2 	bl	800089c <sbrk_aligned>
 8000918:	1c43      	adds	r3, r0, #1
 800091a:	4604      	mov	r4, r0
 800091c:	d14d      	bne.n	80009ba <_malloc_r+0xde>
 800091e:	6834      	ldr	r4, [r6, #0]
 8000920:	4626      	mov	r6, r4
 8000922:	2e00      	cmp	r6, #0
 8000924:	d140      	bne.n	80009a8 <_malloc_r+0xcc>
 8000926:	6823      	ldr	r3, [r4, #0]
 8000928:	4631      	mov	r1, r6
 800092a:	4638      	mov	r0, r7
 800092c:	eb04 0803 	add.w	r8, r4, r3
 8000930:	f000 fb36 	bl	8000fa0 <_sbrk_r>
 8000934:	4580      	cmp	r8, r0
 8000936:	d13a      	bne.n	80009ae <_malloc_r+0xd2>
 8000938:	6821      	ldr	r1, [r4, #0]
 800093a:	3503      	adds	r5, #3
 800093c:	1a6d      	subs	r5, r5, r1
 800093e:	f025 0503 	bic.w	r5, r5, #3
 8000942:	3508      	adds	r5, #8
 8000944:	2d0c      	cmp	r5, #12
 8000946:	bf38      	it	cc
 8000948:	250c      	movcc	r5, #12
 800094a:	4638      	mov	r0, r7
 800094c:	4629      	mov	r1, r5
 800094e:	f7ff ffa5 	bl	800089c <sbrk_aligned>
 8000952:	3001      	adds	r0, #1
 8000954:	d02b      	beq.n	80009ae <_malloc_r+0xd2>
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	442b      	add	r3, r5
 800095a:	6023      	str	r3, [r4, #0]
 800095c:	e00e      	b.n	800097c <_malloc_r+0xa0>
 800095e:	6822      	ldr	r2, [r4, #0]
 8000960:	1b52      	subs	r2, r2, r5
 8000962:	d41e      	bmi.n	80009a2 <_malloc_r+0xc6>
 8000964:	2a0b      	cmp	r2, #11
 8000966:	d916      	bls.n	8000996 <_malloc_r+0xba>
 8000968:	1961      	adds	r1, r4, r5
 800096a:	42a3      	cmp	r3, r4
 800096c:	6025      	str	r5, [r4, #0]
 800096e:	bf18      	it	ne
 8000970:	6059      	strne	r1, [r3, #4]
 8000972:	6863      	ldr	r3, [r4, #4]
 8000974:	bf08      	it	eq
 8000976:	6031      	streq	r1, [r6, #0]
 8000978:	5162      	str	r2, [r4, r5]
 800097a:	604b      	str	r3, [r1, #4]
 800097c:	4638      	mov	r0, r7
 800097e:	f104 060b 	add.w	r6, r4, #11
 8000982:	f000 fd8d 	bl	80014a0 <__malloc_unlock>
 8000986:	f026 0607 	bic.w	r6, r6, #7
 800098a:	1d23      	adds	r3, r4, #4
 800098c:	1af2      	subs	r2, r6, r3
 800098e:	d0b6      	beq.n	80008fe <_malloc_r+0x22>
 8000990:	1b9b      	subs	r3, r3, r6
 8000992:	50a3      	str	r3, [r4, r2]
 8000994:	e7b3      	b.n	80008fe <_malloc_r+0x22>
 8000996:	6862      	ldr	r2, [r4, #4]
 8000998:	42a3      	cmp	r3, r4
 800099a:	bf0c      	ite	eq
 800099c:	6032      	streq	r2, [r6, #0]
 800099e:	605a      	strne	r2, [r3, #4]
 80009a0:	e7ec      	b.n	800097c <_malloc_r+0xa0>
 80009a2:	4623      	mov	r3, r4
 80009a4:	6864      	ldr	r4, [r4, #4]
 80009a6:	e7b2      	b.n	800090e <_malloc_r+0x32>
 80009a8:	4634      	mov	r4, r6
 80009aa:	6876      	ldr	r6, [r6, #4]
 80009ac:	e7b9      	b.n	8000922 <_malloc_r+0x46>
 80009ae:	230c      	movs	r3, #12
 80009b0:	4638      	mov	r0, r7
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	f000 fd74 	bl	80014a0 <__malloc_unlock>
 80009b8:	e7a1      	b.n	80008fe <_malloc_r+0x22>
 80009ba:	6025      	str	r5, [r4, #0]
 80009bc:	e7de      	b.n	800097c <_malloc_r+0xa0>
 80009be:	bf00      	nop
 80009c0:	20000094 	.word	0x20000094

080009c4 <__sfputc_r>:
 80009c4:	6893      	ldr	r3, [r2, #8]
 80009c6:	b410      	push	{r4}
 80009c8:	3b01      	subs	r3, #1
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	6093      	str	r3, [r2, #8]
 80009ce:	da07      	bge.n	80009e0 <__sfputc_r+0x1c>
 80009d0:	6994      	ldr	r4, [r2, #24]
 80009d2:	42a3      	cmp	r3, r4
 80009d4:	db01      	blt.n	80009da <__sfputc_r+0x16>
 80009d6:	290a      	cmp	r1, #10
 80009d8:	d102      	bne.n	80009e0 <__sfputc_r+0x1c>
 80009da:	bc10      	pop	{r4}
 80009dc:	f000 bb34 	b.w	8001048 <__swbuf_r>
 80009e0:	6813      	ldr	r3, [r2, #0]
 80009e2:	1c58      	adds	r0, r3, #1
 80009e4:	6010      	str	r0, [r2, #0]
 80009e6:	7019      	strb	r1, [r3, #0]
 80009e8:	4608      	mov	r0, r1
 80009ea:	bc10      	pop	{r4}
 80009ec:	4770      	bx	lr

080009ee <__sfputs_r>:
 80009ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f0:	4606      	mov	r6, r0
 80009f2:	460f      	mov	r7, r1
 80009f4:	4614      	mov	r4, r2
 80009f6:	18d5      	adds	r5, r2, r3
 80009f8:	42ac      	cmp	r4, r5
 80009fa:	d101      	bne.n	8000a00 <__sfputs_r+0x12>
 80009fc:	2000      	movs	r0, #0
 80009fe:	e007      	b.n	8000a10 <__sfputs_r+0x22>
 8000a00:	463a      	mov	r2, r7
 8000a02:	4630      	mov	r0, r6
 8000a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a08:	f7ff ffdc 	bl	80009c4 <__sfputc_r>
 8000a0c:	1c43      	adds	r3, r0, #1
 8000a0e:	d1f3      	bne.n	80009f8 <__sfputs_r+0xa>
 8000a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000a14 <_vfiprintf_r>:
 8000a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a18:	460d      	mov	r5, r1
 8000a1a:	4614      	mov	r4, r2
 8000a1c:	4698      	mov	r8, r3
 8000a1e:	4606      	mov	r6, r0
 8000a20:	b09d      	sub	sp, #116	; 0x74
 8000a22:	b118      	cbz	r0, 8000a2c <_vfiprintf_r+0x18>
 8000a24:	6983      	ldr	r3, [r0, #24]
 8000a26:	b90b      	cbnz	r3, 8000a2c <_vfiprintf_r+0x18>
 8000a28:	f7ff fe98 	bl	800075c <__sinit>
 8000a2c:	4b89      	ldr	r3, [pc, #548]	; (8000c54 <_vfiprintf_r+0x240>)
 8000a2e:	429d      	cmp	r5, r3
 8000a30:	d11b      	bne.n	8000a6a <_vfiprintf_r+0x56>
 8000a32:	6875      	ldr	r5, [r6, #4]
 8000a34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a36:	07d9      	lsls	r1, r3, #31
 8000a38:	d405      	bmi.n	8000a46 <_vfiprintf_r+0x32>
 8000a3a:	89ab      	ldrh	r3, [r5, #12]
 8000a3c:	059a      	lsls	r2, r3, #22
 8000a3e:	d402      	bmi.n	8000a46 <_vfiprintf_r+0x32>
 8000a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a42:	f7ff ff29 	bl	8000898 <__retarget_lock_acquire_recursive>
 8000a46:	89ab      	ldrh	r3, [r5, #12]
 8000a48:	071b      	lsls	r3, r3, #28
 8000a4a:	d501      	bpl.n	8000a50 <_vfiprintf_r+0x3c>
 8000a4c:	692b      	ldr	r3, [r5, #16]
 8000a4e:	b9eb      	cbnz	r3, 8000a8c <_vfiprintf_r+0x78>
 8000a50:	4629      	mov	r1, r5
 8000a52:	4630      	mov	r0, r6
 8000a54:	f000 fb5c 	bl	8001110 <__swsetup_r>
 8000a58:	b1c0      	cbz	r0, 8000a8c <_vfiprintf_r+0x78>
 8000a5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a5c:	07dc      	lsls	r4, r3, #31
 8000a5e:	d50e      	bpl.n	8000a7e <_vfiprintf_r+0x6a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	b01d      	add	sp, #116	; 0x74
 8000a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a6a:	4b7b      	ldr	r3, [pc, #492]	; (8000c58 <_vfiprintf_r+0x244>)
 8000a6c:	429d      	cmp	r5, r3
 8000a6e:	d101      	bne.n	8000a74 <_vfiprintf_r+0x60>
 8000a70:	68b5      	ldr	r5, [r6, #8]
 8000a72:	e7df      	b.n	8000a34 <_vfiprintf_r+0x20>
 8000a74:	4b79      	ldr	r3, [pc, #484]	; (8000c5c <_vfiprintf_r+0x248>)
 8000a76:	429d      	cmp	r5, r3
 8000a78:	bf08      	it	eq
 8000a7a:	68f5      	ldreq	r5, [r6, #12]
 8000a7c:	e7da      	b.n	8000a34 <_vfiprintf_r+0x20>
 8000a7e:	89ab      	ldrh	r3, [r5, #12]
 8000a80:	0598      	lsls	r0, r3, #22
 8000a82:	d4ed      	bmi.n	8000a60 <_vfiprintf_r+0x4c>
 8000a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a86:	f7ff ff08 	bl	800089a <__retarget_lock_release_recursive>
 8000a8a:	e7e9      	b.n	8000a60 <_vfiprintf_r+0x4c>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8000a90:	2320      	movs	r3, #32
 8000a92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000a96:	2330      	movs	r3, #48	; 0x30
 8000a98:	f04f 0901 	mov.w	r9, #1
 8000a9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000aa0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000c60 <_vfiprintf_r+0x24c>
 8000aa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000aa8:	4623      	mov	r3, r4
 8000aaa:	469a      	mov	sl, r3
 8000aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ab0:	b10a      	cbz	r2, 8000ab6 <_vfiprintf_r+0xa2>
 8000ab2:	2a25      	cmp	r2, #37	; 0x25
 8000ab4:	d1f9      	bne.n	8000aaa <_vfiprintf_r+0x96>
 8000ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8000aba:	d00b      	beq.n	8000ad4 <_vfiprintf_r+0xc0>
 8000abc:	465b      	mov	r3, fp
 8000abe:	4622      	mov	r2, r4
 8000ac0:	4629      	mov	r1, r5
 8000ac2:	4630      	mov	r0, r6
 8000ac4:	f7ff ff93 	bl	80009ee <__sfputs_r>
 8000ac8:	3001      	adds	r0, #1
 8000aca:	f000 80aa 	beq.w	8000c22 <_vfiprintf_r+0x20e>
 8000ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ad0:	445a      	add	r2, fp
 8000ad2:	9209      	str	r2, [sp, #36]	; 0x24
 8000ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	f000 80a2 	beq.w	8000c22 <_vfiprintf_r+0x20e>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ae8:	f10a 0a01 	add.w	sl, sl, #1
 8000aec:	9304      	str	r3, [sp, #16]
 8000aee:	9307      	str	r3, [sp, #28]
 8000af0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000af4:	931a      	str	r3, [sp, #104]	; 0x68
 8000af6:	4654      	mov	r4, sl
 8000af8:	2205      	movs	r2, #5
 8000afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000afe:	4858      	ldr	r0, [pc, #352]	; (8000c60 <_vfiprintf_r+0x24c>)
 8000b00:	f000 fcba 	bl	8001478 <memchr>
 8000b04:	9a04      	ldr	r2, [sp, #16]
 8000b06:	b9d8      	cbnz	r0, 8000b40 <_vfiprintf_r+0x12c>
 8000b08:	06d1      	lsls	r1, r2, #27
 8000b0a:	bf44      	itt	mi
 8000b0c:	2320      	movmi	r3, #32
 8000b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b12:	0713      	lsls	r3, r2, #28
 8000b14:	bf44      	itt	mi
 8000b16:	232b      	movmi	r3, #43	; 0x2b
 8000b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8000b20:	2b2a      	cmp	r3, #42	; 0x2a
 8000b22:	d015      	beq.n	8000b50 <_vfiprintf_r+0x13c>
 8000b24:	4654      	mov	r4, sl
 8000b26:	2000      	movs	r0, #0
 8000b28:	f04f 0c0a 	mov.w	ip, #10
 8000b2c:	9a07      	ldr	r2, [sp, #28]
 8000b2e:	4621      	mov	r1, r4
 8000b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b34:	3b30      	subs	r3, #48	; 0x30
 8000b36:	2b09      	cmp	r3, #9
 8000b38:	d94e      	bls.n	8000bd8 <_vfiprintf_r+0x1c4>
 8000b3a:	b1b0      	cbz	r0, 8000b6a <_vfiprintf_r+0x156>
 8000b3c:	9207      	str	r2, [sp, #28]
 8000b3e:	e014      	b.n	8000b6a <_vfiprintf_r+0x156>
 8000b40:	eba0 0308 	sub.w	r3, r0, r8
 8000b44:	fa09 f303 	lsl.w	r3, r9, r3
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	46a2      	mov	sl, r4
 8000b4c:	9304      	str	r3, [sp, #16]
 8000b4e:	e7d2      	b.n	8000af6 <_vfiprintf_r+0xe2>
 8000b50:	9b03      	ldr	r3, [sp, #12]
 8000b52:	1d19      	adds	r1, r3, #4
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	9103      	str	r1, [sp, #12]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	bfbb      	ittet	lt
 8000b5c:	425b      	neglt	r3, r3
 8000b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8000b62:	9307      	strge	r3, [sp, #28]
 8000b64:	9307      	strlt	r3, [sp, #28]
 8000b66:	bfb8      	it	lt
 8000b68:	9204      	strlt	r2, [sp, #16]
 8000b6a:	7823      	ldrb	r3, [r4, #0]
 8000b6c:	2b2e      	cmp	r3, #46	; 0x2e
 8000b6e:	d10c      	bne.n	8000b8a <_vfiprintf_r+0x176>
 8000b70:	7863      	ldrb	r3, [r4, #1]
 8000b72:	2b2a      	cmp	r3, #42	; 0x2a
 8000b74:	d135      	bne.n	8000be2 <_vfiprintf_r+0x1ce>
 8000b76:	9b03      	ldr	r3, [sp, #12]
 8000b78:	3402      	adds	r4, #2
 8000b7a:	1d1a      	adds	r2, r3, #4
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	9203      	str	r2, [sp, #12]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	bfb8      	it	lt
 8000b84:	f04f 33ff 	movlt.w	r3, #4294967295
 8000b88:	9305      	str	r3, [sp, #20]
 8000b8a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8000c64 <_vfiprintf_r+0x250>
 8000b8e:	2203      	movs	r2, #3
 8000b90:	4650      	mov	r0, sl
 8000b92:	7821      	ldrb	r1, [r4, #0]
 8000b94:	f000 fc70 	bl	8001478 <memchr>
 8000b98:	b140      	cbz	r0, 8000bac <_vfiprintf_r+0x198>
 8000b9a:	2340      	movs	r3, #64	; 0x40
 8000b9c:	eba0 000a 	sub.w	r0, r0, sl
 8000ba0:	fa03 f000 	lsl.w	r0, r3, r0
 8000ba4:	9b04      	ldr	r3, [sp, #16]
 8000ba6:	3401      	adds	r4, #1
 8000ba8:	4303      	orrs	r3, r0
 8000baa:	9304      	str	r3, [sp, #16]
 8000bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bb0:	2206      	movs	r2, #6
 8000bb2:	482d      	ldr	r0, [pc, #180]	; (8000c68 <_vfiprintf_r+0x254>)
 8000bb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000bb8:	f000 fc5e 	bl	8001478 <memchr>
 8000bbc:	2800      	cmp	r0, #0
 8000bbe:	d03f      	beq.n	8000c40 <_vfiprintf_r+0x22c>
 8000bc0:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <_vfiprintf_r+0x258>)
 8000bc2:	bb1b      	cbnz	r3, 8000c0c <_vfiprintf_r+0x1f8>
 8000bc4:	9b03      	ldr	r3, [sp, #12]
 8000bc6:	3307      	adds	r3, #7
 8000bc8:	f023 0307 	bic.w	r3, r3, #7
 8000bcc:	3308      	adds	r3, #8
 8000bce:	9303      	str	r3, [sp, #12]
 8000bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000bd2:	443b      	add	r3, r7
 8000bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8000bd6:	e767      	b.n	8000aa8 <_vfiprintf_r+0x94>
 8000bd8:	460c      	mov	r4, r1
 8000bda:	2001      	movs	r0, #1
 8000bdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8000be0:	e7a5      	b.n	8000b2e <_vfiprintf_r+0x11a>
 8000be2:	2300      	movs	r3, #0
 8000be4:	f04f 0c0a 	mov.w	ip, #10
 8000be8:	4619      	mov	r1, r3
 8000bea:	3401      	adds	r4, #1
 8000bec:	9305      	str	r3, [sp, #20]
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000bf4:	3a30      	subs	r2, #48	; 0x30
 8000bf6:	2a09      	cmp	r2, #9
 8000bf8:	d903      	bls.n	8000c02 <_vfiprintf_r+0x1ee>
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0c5      	beq.n	8000b8a <_vfiprintf_r+0x176>
 8000bfe:	9105      	str	r1, [sp, #20]
 8000c00:	e7c3      	b.n	8000b8a <_vfiprintf_r+0x176>
 8000c02:	4604      	mov	r4, r0
 8000c04:	2301      	movs	r3, #1
 8000c06:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c0a:	e7f0      	b.n	8000bee <_vfiprintf_r+0x1da>
 8000c0c:	ab03      	add	r3, sp, #12
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	462a      	mov	r2, r5
 8000c12:	4630      	mov	r0, r6
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <_vfiprintf_r+0x25c>)
 8000c16:	a904      	add	r1, sp, #16
 8000c18:	f3af 8000 	nop.w
 8000c1c:	4607      	mov	r7, r0
 8000c1e:	1c78      	adds	r0, r7, #1
 8000c20:	d1d6      	bne.n	8000bd0 <_vfiprintf_r+0x1bc>
 8000c22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c24:	07d9      	lsls	r1, r3, #31
 8000c26:	d405      	bmi.n	8000c34 <_vfiprintf_r+0x220>
 8000c28:	89ab      	ldrh	r3, [r5, #12]
 8000c2a:	059a      	lsls	r2, r3, #22
 8000c2c:	d402      	bmi.n	8000c34 <_vfiprintf_r+0x220>
 8000c2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c30:	f7ff fe33 	bl	800089a <__retarget_lock_release_recursive>
 8000c34:	89ab      	ldrh	r3, [r5, #12]
 8000c36:	065b      	lsls	r3, r3, #25
 8000c38:	f53f af12 	bmi.w	8000a60 <_vfiprintf_r+0x4c>
 8000c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c3e:	e711      	b.n	8000a64 <_vfiprintf_r+0x50>
 8000c40:	ab03      	add	r3, sp, #12
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	462a      	mov	r2, r5
 8000c46:	4630      	mov	r0, r6
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <_vfiprintf_r+0x25c>)
 8000c4a:	a904      	add	r1, sp, #16
 8000c4c:	f000 f882 	bl	8000d54 <_printf_i>
 8000c50:	e7e4      	b.n	8000c1c <_vfiprintf_r+0x208>
 8000c52:	bf00      	nop
 8000c54:	080015fc 	.word	0x080015fc
 8000c58:	0800161c 	.word	0x0800161c
 8000c5c:	080015dc 	.word	0x080015dc
 8000c60:	0800163c 	.word	0x0800163c
 8000c64:	08001642 	.word	0x08001642
 8000c68:	08001646 	.word	0x08001646
 8000c6c:	00000000 	.word	0x00000000
 8000c70:	080009ef 	.word	0x080009ef

08000c74 <_printf_common>:
 8000c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c78:	4616      	mov	r6, r2
 8000c7a:	4699      	mov	r9, r3
 8000c7c:	688a      	ldr	r2, [r1, #8]
 8000c7e:	690b      	ldr	r3, [r1, #16]
 8000c80:	4607      	mov	r7, r0
 8000c82:	4293      	cmp	r3, r2
 8000c84:	bfb8      	it	lt
 8000c86:	4613      	movlt	r3, r2
 8000c88:	6033      	str	r3, [r6, #0]
 8000c8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c8e:	460c      	mov	r4, r1
 8000c90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c94:	b10a      	cbz	r2, 8000c9a <_printf_common+0x26>
 8000c96:	3301      	adds	r3, #1
 8000c98:	6033      	str	r3, [r6, #0]
 8000c9a:	6823      	ldr	r3, [r4, #0]
 8000c9c:	0699      	lsls	r1, r3, #26
 8000c9e:	bf42      	ittt	mi
 8000ca0:	6833      	ldrmi	r3, [r6, #0]
 8000ca2:	3302      	addmi	r3, #2
 8000ca4:	6033      	strmi	r3, [r6, #0]
 8000ca6:	6825      	ldr	r5, [r4, #0]
 8000ca8:	f015 0506 	ands.w	r5, r5, #6
 8000cac:	d106      	bne.n	8000cbc <_printf_common+0x48>
 8000cae:	f104 0a19 	add.w	sl, r4, #25
 8000cb2:	68e3      	ldr	r3, [r4, #12]
 8000cb4:	6832      	ldr	r2, [r6, #0]
 8000cb6:	1a9b      	subs	r3, r3, r2
 8000cb8:	42ab      	cmp	r3, r5
 8000cba:	dc28      	bgt.n	8000d0e <_printf_common+0x9a>
 8000cbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000cc0:	1e13      	subs	r3, r2, #0
 8000cc2:	6822      	ldr	r2, [r4, #0]
 8000cc4:	bf18      	it	ne
 8000cc6:	2301      	movne	r3, #1
 8000cc8:	0692      	lsls	r2, r2, #26
 8000cca:	d42d      	bmi.n	8000d28 <_printf_common+0xb4>
 8000ccc:	4649      	mov	r1, r9
 8000cce:	4638      	mov	r0, r7
 8000cd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000cd4:	47c0      	blx	r8
 8000cd6:	3001      	adds	r0, #1
 8000cd8:	d020      	beq.n	8000d1c <_printf_common+0xa8>
 8000cda:	6823      	ldr	r3, [r4, #0]
 8000cdc:	68e5      	ldr	r5, [r4, #12]
 8000cde:	f003 0306 	and.w	r3, r3, #6
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf18      	it	ne
 8000ce6:	2500      	movne	r5, #0
 8000ce8:	6832      	ldr	r2, [r6, #0]
 8000cea:	f04f 0600 	mov.w	r6, #0
 8000cee:	68a3      	ldr	r3, [r4, #8]
 8000cf0:	bf08      	it	eq
 8000cf2:	1aad      	subeq	r5, r5, r2
 8000cf4:	6922      	ldr	r2, [r4, #16]
 8000cf6:	bf08      	it	eq
 8000cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	bfc4      	itt	gt
 8000d00:	1a9b      	subgt	r3, r3, r2
 8000d02:	18ed      	addgt	r5, r5, r3
 8000d04:	341a      	adds	r4, #26
 8000d06:	42b5      	cmp	r5, r6
 8000d08:	d11a      	bne.n	8000d40 <_printf_common+0xcc>
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	e008      	b.n	8000d20 <_printf_common+0xac>
 8000d0e:	2301      	movs	r3, #1
 8000d10:	4652      	mov	r2, sl
 8000d12:	4649      	mov	r1, r9
 8000d14:	4638      	mov	r0, r7
 8000d16:	47c0      	blx	r8
 8000d18:	3001      	adds	r0, #1
 8000d1a:	d103      	bne.n	8000d24 <_printf_common+0xb0>
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	3501      	adds	r5, #1
 8000d26:	e7c4      	b.n	8000cb2 <_printf_common+0x3e>
 8000d28:	2030      	movs	r0, #48	; 0x30
 8000d2a:	18e1      	adds	r1, r4, r3
 8000d2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d30:	1c5a      	adds	r2, r3, #1
 8000d32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000d36:	4422      	add	r2, r4
 8000d38:	3302      	adds	r3, #2
 8000d3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000d3e:	e7c5      	b.n	8000ccc <_printf_common+0x58>
 8000d40:	2301      	movs	r3, #1
 8000d42:	4622      	mov	r2, r4
 8000d44:	4649      	mov	r1, r9
 8000d46:	4638      	mov	r0, r7
 8000d48:	47c0      	blx	r8
 8000d4a:	3001      	adds	r0, #1
 8000d4c:	d0e6      	beq.n	8000d1c <_printf_common+0xa8>
 8000d4e:	3601      	adds	r6, #1
 8000d50:	e7d9      	b.n	8000d06 <_printf_common+0x92>
	...

08000d54 <_printf_i>:
 8000d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	7e0f      	ldrb	r7, [r1, #24]
 8000d5a:	4691      	mov	r9, r2
 8000d5c:	2f78      	cmp	r7, #120	; 0x78
 8000d5e:	4680      	mov	r8, r0
 8000d60:	460c      	mov	r4, r1
 8000d62:	469a      	mov	sl, r3
 8000d64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000d6a:	d807      	bhi.n	8000d7c <_printf_i+0x28>
 8000d6c:	2f62      	cmp	r7, #98	; 0x62
 8000d6e:	d80a      	bhi.n	8000d86 <_printf_i+0x32>
 8000d70:	2f00      	cmp	r7, #0
 8000d72:	f000 80d9 	beq.w	8000f28 <_printf_i+0x1d4>
 8000d76:	2f58      	cmp	r7, #88	; 0x58
 8000d78:	f000 80a4 	beq.w	8000ec4 <_printf_i+0x170>
 8000d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d84:	e03a      	b.n	8000dfc <_printf_i+0xa8>
 8000d86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d8a:	2b15      	cmp	r3, #21
 8000d8c:	d8f6      	bhi.n	8000d7c <_printf_i+0x28>
 8000d8e:	a101      	add	r1, pc, #4	; (adr r1, 8000d94 <_printf_i+0x40>)
 8000d90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d94:	08000ded 	.word	0x08000ded
 8000d98:	08000e01 	.word	0x08000e01
 8000d9c:	08000d7d 	.word	0x08000d7d
 8000da0:	08000d7d 	.word	0x08000d7d
 8000da4:	08000d7d 	.word	0x08000d7d
 8000da8:	08000d7d 	.word	0x08000d7d
 8000dac:	08000e01 	.word	0x08000e01
 8000db0:	08000d7d 	.word	0x08000d7d
 8000db4:	08000d7d 	.word	0x08000d7d
 8000db8:	08000d7d 	.word	0x08000d7d
 8000dbc:	08000d7d 	.word	0x08000d7d
 8000dc0:	08000f0f 	.word	0x08000f0f
 8000dc4:	08000e31 	.word	0x08000e31
 8000dc8:	08000ef1 	.word	0x08000ef1
 8000dcc:	08000d7d 	.word	0x08000d7d
 8000dd0:	08000d7d 	.word	0x08000d7d
 8000dd4:	08000f31 	.word	0x08000f31
 8000dd8:	08000d7d 	.word	0x08000d7d
 8000ddc:	08000e31 	.word	0x08000e31
 8000de0:	08000d7d 	.word	0x08000d7d
 8000de4:	08000d7d 	.word	0x08000d7d
 8000de8:	08000ef9 	.word	0x08000ef9
 8000dec:	682b      	ldr	r3, [r5, #0]
 8000dee:	1d1a      	adds	r2, r3, #4
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	602a      	str	r2, [r5, #0]
 8000df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e0a4      	b.n	8000f4a <_printf_i+0x1f6>
 8000e00:	6820      	ldr	r0, [r4, #0]
 8000e02:	6829      	ldr	r1, [r5, #0]
 8000e04:	0606      	lsls	r6, r0, #24
 8000e06:	f101 0304 	add.w	r3, r1, #4
 8000e0a:	d50a      	bpl.n	8000e22 <_printf_i+0xce>
 8000e0c:	680e      	ldr	r6, [r1, #0]
 8000e0e:	602b      	str	r3, [r5, #0]
 8000e10:	2e00      	cmp	r6, #0
 8000e12:	da03      	bge.n	8000e1c <_printf_i+0xc8>
 8000e14:	232d      	movs	r3, #45	; 0x2d
 8000e16:	4276      	negs	r6, r6
 8000e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	485e      	ldr	r0, [pc, #376]	; (8000f98 <_printf_i+0x244>)
 8000e20:	e019      	b.n	8000e56 <_printf_i+0x102>
 8000e22:	680e      	ldr	r6, [r1, #0]
 8000e24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000e28:	602b      	str	r3, [r5, #0]
 8000e2a:	bf18      	it	ne
 8000e2c:	b236      	sxthne	r6, r6
 8000e2e:	e7ef      	b.n	8000e10 <_printf_i+0xbc>
 8000e30:	682b      	ldr	r3, [r5, #0]
 8000e32:	6820      	ldr	r0, [r4, #0]
 8000e34:	1d19      	adds	r1, r3, #4
 8000e36:	6029      	str	r1, [r5, #0]
 8000e38:	0601      	lsls	r1, r0, #24
 8000e3a:	d501      	bpl.n	8000e40 <_printf_i+0xec>
 8000e3c:	681e      	ldr	r6, [r3, #0]
 8000e3e:	e002      	b.n	8000e46 <_printf_i+0xf2>
 8000e40:	0646      	lsls	r6, r0, #25
 8000e42:	d5fb      	bpl.n	8000e3c <_printf_i+0xe8>
 8000e44:	881e      	ldrh	r6, [r3, #0]
 8000e46:	2f6f      	cmp	r7, #111	; 0x6f
 8000e48:	bf0c      	ite	eq
 8000e4a:	2308      	moveq	r3, #8
 8000e4c:	230a      	movne	r3, #10
 8000e4e:	4852      	ldr	r0, [pc, #328]	; (8000f98 <_printf_i+0x244>)
 8000e50:	2100      	movs	r1, #0
 8000e52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e56:	6865      	ldr	r5, [r4, #4]
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	bfa8      	it	ge
 8000e5c:	6821      	ldrge	r1, [r4, #0]
 8000e5e:	60a5      	str	r5, [r4, #8]
 8000e60:	bfa4      	itt	ge
 8000e62:	f021 0104 	bicge.w	r1, r1, #4
 8000e66:	6021      	strge	r1, [r4, #0]
 8000e68:	b90e      	cbnz	r6, 8000e6e <_printf_i+0x11a>
 8000e6a:	2d00      	cmp	r5, #0
 8000e6c:	d04d      	beq.n	8000f0a <_printf_i+0x1b6>
 8000e6e:	4615      	mov	r5, r2
 8000e70:	fbb6 f1f3 	udiv	r1, r6, r3
 8000e74:	fb03 6711 	mls	r7, r3, r1, r6
 8000e78:	5dc7      	ldrb	r7, [r0, r7]
 8000e7a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000e7e:	4637      	mov	r7, r6
 8000e80:	42bb      	cmp	r3, r7
 8000e82:	460e      	mov	r6, r1
 8000e84:	d9f4      	bls.n	8000e70 <_printf_i+0x11c>
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d10b      	bne.n	8000ea2 <_printf_i+0x14e>
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	07de      	lsls	r6, r3, #31
 8000e8e:	d508      	bpl.n	8000ea2 <_printf_i+0x14e>
 8000e90:	6923      	ldr	r3, [r4, #16]
 8000e92:	6861      	ldr	r1, [r4, #4]
 8000e94:	4299      	cmp	r1, r3
 8000e96:	bfde      	ittt	le
 8000e98:	2330      	movle	r3, #48	; 0x30
 8000e9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000e9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000ea2:	1b52      	subs	r2, r2, r5
 8000ea4:	6122      	str	r2, [r4, #16]
 8000ea6:	464b      	mov	r3, r9
 8000ea8:	4621      	mov	r1, r4
 8000eaa:	4640      	mov	r0, r8
 8000eac:	f8cd a000 	str.w	sl, [sp]
 8000eb0:	aa03      	add	r2, sp, #12
 8000eb2:	f7ff fedf 	bl	8000c74 <_printf_common>
 8000eb6:	3001      	adds	r0, #1
 8000eb8:	d14c      	bne.n	8000f54 <_printf_i+0x200>
 8000eba:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebe:	b004      	add	sp, #16
 8000ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec4:	4834      	ldr	r0, [pc, #208]	; (8000f98 <_printf_i+0x244>)
 8000ec6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000eca:	6829      	ldr	r1, [r5, #0]
 8000ecc:	6823      	ldr	r3, [r4, #0]
 8000ece:	f851 6b04 	ldr.w	r6, [r1], #4
 8000ed2:	6029      	str	r1, [r5, #0]
 8000ed4:	061d      	lsls	r5, r3, #24
 8000ed6:	d514      	bpl.n	8000f02 <_printf_i+0x1ae>
 8000ed8:	07df      	lsls	r7, r3, #31
 8000eda:	bf44      	itt	mi
 8000edc:	f043 0320 	orrmi.w	r3, r3, #32
 8000ee0:	6023      	strmi	r3, [r4, #0]
 8000ee2:	b91e      	cbnz	r6, 8000eec <_printf_i+0x198>
 8000ee4:	6823      	ldr	r3, [r4, #0]
 8000ee6:	f023 0320 	bic.w	r3, r3, #32
 8000eea:	6023      	str	r3, [r4, #0]
 8000eec:	2310      	movs	r3, #16
 8000eee:	e7af      	b.n	8000e50 <_printf_i+0xfc>
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	f043 0320 	orr.w	r3, r3, #32
 8000ef6:	6023      	str	r3, [r4, #0]
 8000ef8:	2378      	movs	r3, #120	; 0x78
 8000efa:	4828      	ldr	r0, [pc, #160]	; (8000f9c <_printf_i+0x248>)
 8000efc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f00:	e7e3      	b.n	8000eca <_printf_i+0x176>
 8000f02:	0659      	lsls	r1, r3, #25
 8000f04:	bf48      	it	mi
 8000f06:	b2b6      	uxthmi	r6, r6
 8000f08:	e7e6      	b.n	8000ed8 <_printf_i+0x184>
 8000f0a:	4615      	mov	r5, r2
 8000f0c:	e7bb      	b.n	8000e86 <_printf_i+0x132>
 8000f0e:	682b      	ldr	r3, [r5, #0]
 8000f10:	6826      	ldr	r6, [r4, #0]
 8000f12:	1d18      	adds	r0, r3, #4
 8000f14:	6961      	ldr	r1, [r4, #20]
 8000f16:	6028      	str	r0, [r5, #0]
 8000f18:	0635      	lsls	r5, r6, #24
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	d501      	bpl.n	8000f22 <_printf_i+0x1ce>
 8000f1e:	6019      	str	r1, [r3, #0]
 8000f20:	e002      	b.n	8000f28 <_printf_i+0x1d4>
 8000f22:	0670      	lsls	r0, r6, #25
 8000f24:	d5fb      	bpl.n	8000f1e <_printf_i+0x1ca>
 8000f26:	8019      	strh	r1, [r3, #0]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4615      	mov	r5, r2
 8000f2c:	6123      	str	r3, [r4, #16]
 8000f2e:	e7ba      	b.n	8000ea6 <_printf_i+0x152>
 8000f30:	682b      	ldr	r3, [r5, #0]
 8000f32:	2100      	movs	r1, #0
 8000f34:	1d1a      	adds	r2, r3, #4
 8000f36:	602a      	str	r2, [r5, #0]
 8000f38:	681d      	ldr	r5, [r3, #0]
 8000f3a:	6862      	ldr	r2, [r4, #4]
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	f000 fa9b 	bl	8001478 <memchr>
 8000f42:	b108      	cbz	r0, 8000f48 <_printf_i+0x1f4>
 8000f44:	1b40      	subs	r0, r0, r5
 8000f46:	6060      	str	r0, [r4, #4]
 8000f48:	6863      	ldr	r3, [r4, #4]
 8000f4a:	6123      	str	r3, [r4, #16]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f52:	e7a8      	b.n	8000ea6 <_printf_i+0x152>
 8000f54:	462a      	mov	r2, r5
 8000f56:	4649      	mov	r1, r9
 8000f58:	4640      	mov	r0, r8
 8000f5a:	6923      	ldr	r3, [r4, #16]
 8000f5c:	47d0      	blx	sl
 8000f5e:	3001      	adds	r0, #1
 8000f60:	d0ab      	beq.n	8000eba <_printf_i+0x166>
 8000f62:	6823      	ldr	r3, [r4, #0]
 8000f64:	079b      	lsls	r3, r3, #30
 8000f66:	d413      	bmi.n	8000f90 <_printf_i+0x23c>
 8000f68:	68e0      	ldr	r0, [r4, #12]
 8000f6a:	9b03      	ldr	r3, [sp, #12]
 8000f6c:	4298      	cmp	r0, r3
 8000f6e:	bfb8      	it	lt
 8000f70:	4618      	movlt	r0, r3
 8000f72:	e7a4      	b.n	8000ebe <_printf_i+0x16a>
 8000f74:	2301      	movs	r3, #1
 8000f76:	4632      	mov	r2, r6
 8000f78:	4649      	mov	r1, r9
 8000f7a:	4640      	mov	r0, r8
 8000f7c:	47d0      	blx	sl
 8000f7e:	3001      	adds	r0, #1
 8000f80:	d09b      	beq.n	8000eba <_printf_i+0x166>
 8000f82:	3501      	adds	r5, #1
 8000f84:	68e3      	ldr	r3, [r4, #12]
 8000f86:	9903      	ldr	r1, [sp, #12]
 8000f88:	1a5b      	subs	r3, r3, r1
 8000f8a:	42ab      	cmp	r3, r5
 8000f8c:	dcf2      	bgt.n	8000f74 <_printf_i+0x220>
 8000f8e:	e7eb      	b.n	8000f68 <_printf_i+0x214>
 8000f90:	2500      	movs	r5, #0
 8000f92:	f104 0619 	add.w	r6, r4, #25
 8000f96:	e7f5      	b.n	8000f84 <_printf_i+0x230>
 8000f98:	0800164d 	.word	0x0800164d
 8000f9c:	0800165e 	.word	0x0800165e

08000fa0 <_sbrk_r>:
 8000fa0:	b538      	push	{r3, r4, r5, lr}
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	4d05      	ldr	r5, [pc, #20]	; (8000fbc <_sbrk_r+0x1c>)
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	4608      	mov	r0, r1
 8000faa:	602b      	str	r3, [r5, #0]
 8000fac:	f7ff f9b8 	bl	8000320 <_sbrk>
 8000fb0:	1c43      	adds	r3, r0, #1
 8000fb2:	d102      	bne.n	8000fba <_sbrk_r+0x1a>
 8000fb4:	682b      	ldr	r3, [r5, #0]
 8000fb6:	b103      	cbz	r3, 8000fba <_sbrk_r+0x1a>
 8000fb8:	6023      	str	r3, [r4, #0]
 8000fba:	bd38      	pop	{r3, r4, r5, pc}
 8000fbc:	2000009c 	.word	0x2000009c

08000fc0 <__sread>:
 8000fc0:	b510      	push	{r4, lr}
 8000fc2:	460c      	mov	r4, r1
 8000fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fc8:	f000 fab8 	bl	800153c <_read_r>
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	bfab      	itete	ge
 8000fd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8000fd4:	181b      	addge	r3, r3, r0
 8000fd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000fda:	bfac      	ite	ge
 8000fdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8000fde:	81a3      	strhlt	r3, [r4, #12]
 8000fe0:	bd10      	pop	{r4, pc}

08000fe2 <__swrite>:
 8000fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fe6:	461f      	mov	r7, r3
 8000fe8:	898b      	ldrh	r3, [r1, #12]
 8000fea:	4605      	mov	r5, r0
 8000fec:	05db      	lsls	r3, r3, #23
 8000fee:	460c      	mov	r4, r1
 8000ff0:	4616      	mov	r6, r2
 8000ff2:	d505      	bpl.n	8001000 <__swrite+0x1e>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ffc:	f000 f9c4 	bl	8001388 <_lseek_r>
 8001000:	89a3      	ldrh	r3, [r4, #12]
 8001002:	4632      	mov	r2, r6
 8001004:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001008:	81a3      	strh	r3, [r4, #12]
 800100a:	4628      	mov	r0, r5
 800100c:	463b      	mov	r3, r7
 800100e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001016:	f000 b869 	b.w	80010ec <_write_r>

0800101a <__sseek>:
 800101a:	b510      	push	{r4, lr}
 800101c:	460c      	mov	r4, r1
 800101e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001022:	f000 f9b1 	bl	8001388 <_lseek_r>
 8001026:	1c43      	adds	r3, r0, #1
 8001028:	89a3      	ldrh	r3, [r4, #12]
 800102a:	bf15      	itete	ne
 800102c:	6560      	strne	r0, [r4, #84]	; 0x54
 800102e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001036:	81a3      	strheq	r3, [r4, #12]
 8001038:	bf18      	it	ne
 800103a:	81a3      	strhne	r3, [r4, #12]
 800103c:	bd10      	pop	{r4, pc}

0800103e <__sclose>:
 800103e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001042:	f000 b8d3 	b.w	80011ec <_close_r>
	...

08001048 <__swbuf_r>:
 8001048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104a:	460e      	mov	r6, r1
 800104c:	4614      	mov	r4, r2
 800104e:	4605      	mov	r5, r0
 8001050:	b118      	cbz	r0, 800105a <__swbuf_r+0x12>
 8001052:	6983      	ldr	r3, [r0, #24]
 8001054:	b90b      	cbnz	r3, 800105a <__swbuf_r+0x12>
 8001056:	f7ff fb81 	bl	800075c <__sinit>
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <__swbuf_r+0x98>)
 800105c:	429c      	cmp	r4, r3
 800105e:	d12b      	bne.n	80010b8 <__swbuf_r+0x70>
 8001060:	686c      	ldr	r4, [r5, #4]
 8001062:	69a3      	ldr	r3, [r4, #24]
 8001064:	60a3      	str	r3, [r4, #8]
 8001066:	89a3      	ldrh	r3, [r4, #12]
 8001068:	071a      	lsls	r2, r3, #28
 800106a:	d52f      	bpl.n	80010cc <__swbuf_r+0x84>
 800106c:	6923      	ldr	r3, [r4, #16]
 800106e:	b36b      	cbz	r3, 80010cc <__swbuf_r+0x84>
 8001070:	6923      	ldr	r3, [r4, #16]
 8001072:	6820      	ldr	r0, [r4, #0]
 8001074:	b2f6      	uxtb	r6, r6
 8001076:	1ac0      	subs	r0, r0, r3
 8001078:	6963      	ldr	r3, [r4, #20]
 800107a:	4637      	mov	r7, r6
 800107c:	4283      	cmp	r3, r0
 800107e:	dc04      	bgt.n	800108a <__swbuf_r+0x42>
 8001080:	4621      	mov	r1, r4
 8001082:	4628      	mov	r0, r5
 8001084:	f000 f944 	bl	8001310 <_fflush_r>
 8001088:	bb30      	cbnz	r0, 80010d8 <__swbuf_r+0x90>
 800108a:	68a3      	ldr	r3, [r4, #8]
 800108c:	3001      	adds	r0, #1
 800108e:	3b01      	subs	r3, #1
 8001090:	60a3      	str	r3, [r4, #8]
 8001092:	6823      	ldr	r3, [r4, #0]
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	6022      	str	r2, [r4, #0]
 8001098:	701e      	strb	r6, [r3, #0]
 800109a:	6963      	ldr	r3, [r4, #20]
 800109c:	4283      	cmp	r3, r0
 800109e:	d004      	beq.n	80010aa <__swbuf_r+0x62>
 80010a0:	89a3      	ldrh	r3, [r4, #12]
 80010a2:	07db      	lsls	r3, r3, #31
 80010a4:	d506      	bpl.n	80010b4 <__swbuf_r+0x6c>
 80010a6:	2e0a      	cmp	r6, #10
 80010a8:	d104      	bne.n	80010b4 <__swbuf_r+0x6c>
 80010aa:	4621      	mov	r1, r4
 80010ac:	4628      	mov	r0, r5
 80010ae:	f000 f92f 	bl	8001310 <_fflush_r>
 80010b2:	b988      	cbnz	r0, 80010d8 <__swbuf_r+0x90>
 80010b4:	4638      	mov	r0, r7
 80010b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <__swbuf_r+0x9c>)
 80010ba:	429c      	cmp	r4, r3
 80010bc:	d101      	bne.n	80010c2 <__swbuf_r+0x7a>
 80010be:	68ac      	ldr	r4, [r5, #8]
 80010c0:	e7cf      	b.n	8001062 <__swbuf_r+0x1a>
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <__swbuf_r+0xa0>)
 80010c4:	429c      	cmp	r4, r3
 80010c6:	bf08      	it	eq
 80010c8:	68ec      	ldreq	r4, [r5, #12]
 80010ca:	e7ca      	b.n	8001062 <__swbuf_r+0x1a>
 80010cc:	4621      	mov	r1, r4
 80010ce:	4628      	mov	r0, r5
 80010d0:	f000 f81e 	bl	8001110 <__swsetup_r>
 80010d4:	2800      	cmp	r0, #0
 80010d6:	d0cb      	beq.n	8001070 <__swbuf_r+0x28>
 80010d8:	f04f 37ff 	mov.w	r7, #4294967295
 80010dc:	e7ea      	b.n	80010b4 <__swbuf_r+0x6c>
 80010de:	bf00      	nop
 80010e0:	080015fc 	.word	0x080015fc
 80010e4:	0800161c 	.word	0x0800161c
 80010e8:	080015dc 	.word	0x080015dc

080010ec <_write_r>:
 80010ec:	b538      	push	{r3, r4, r5, lr}
 80010ee:	4604      	mov	r4, r0
 80010f0:	4608      	mov	r0, r1
 80010f2:	4611      	mov	r1, r2
 80010f4:	2200      	movs	r2, #0
 80010f6:	4d05      	ldr	r5, [pc, #20]	; (800110c <_write_r+0x20>)
 80010f8:	602a      	str	r2, [r5, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	f7ff f8c4 	bl	8000288 <_write>
 8001100:	1c43      	adds	r3, r0, #1
 8001102:	d102      	bne.n	800110a <_write_r+0x1e>
 8001104:	682b      	ldr	r3, [r5, #0]
 8001106:	b103      	cbz	r3, 800110a <_write_r+0x1e>
 8001108:	6023      	str	r3, [r4, #0]
 800110a:	bd38      	pop	{r3, r4, r5, pc}
 800110c:	2000009c 	.word	0x2000009c

08001110 <__swsetup_r>:
 8001110:	4b32      	ldr	r3, [pc, #200]	; (80011dc <__swsetup_r+0xcc>)
 8001112:	b570      	push	{r4, r5, r6, lr}
 8001114:	681d      	ldr	r5, [r3, #0]
 8001116:	4606      	mov	r6, r0
 8001118:	460c      	mov	r4, r1
 800111a:	b125      	cbz	r5, 8001126 <__swsetup_r+0x16>
 800111c:	69ab      	ldr	r3, [r5, #24]
 800111e:	b913      	cbnz	r3, 8001126 <__swsetup_r+0x16>
 8001120:	4628      	mov	r0, r5
 8001122:	f7ff fb1b 	bl	800075c <__sinit>
 8001126:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <__swsetup_r+0xd0>)
 8001128:	429c      	cmp	r4, r3
 800112a:	d10f      	bne.n	800114c <__swsetup_r+0x3c>
 800112c:	686c      	ldr	r4, [r5, #4]
 800112e:	89a3      	ldrh	r3, [r4, #12]
 8001130:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001134:	0719      	lsls	r1, r3, #28
 8001136:	d42c      	bmi.n	8001192 <__swsetup_r+0x82>
 8001138:	06dd      	lsls	r5, r3, #27
 800113a:	d411      	bmi.n	8001160 <__swsetup_r+0x50>
 800113c:	2309      	movs	r3, #9
 800113e:	6033      	str	r3, [r6, #0]
 8001140:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	81a3      	strh	r3, [r4, #12]
 800114a:	e03e      	b.n	80011ca <__swsetup_r+0xba>
 800114c:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <__swsetup_r+0xd4>)
 800114e:	429c      	cmp	r4, r3
 8001150:	d101      	bne.n	8001156 <__swsetup_r+0x46>
 8001152:	68ac      	ldr	r4, [r5, #8]
 8001154:	e7eb      	b.n	800112e <__swsetup_r+0x1e>
 8001156:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <__swsetup_r+0xd8>)
 8001158:	429c      	cmp	r4, r3
 800115a:	bf08      	it	eq
 800115c:	68ec      	ldreq	r4, [r5, #12]
 800115e:	e7e6      	b.n	800112e <__swsetup_r+0x1e>
 8001160:	0758      	lsls	r0, r3, #29
 8001162:	d512      	bpl.n	800118a <__swsetup_r+0x7a>
 8001164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001166:	b141      	cbz	r1, 800117a <__swsetup_r+0x6a>
 8001168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800116c:	4299      	cmp	r1, r3
 800116e:	d002      	beq.n	8001176 <__swsetup_r+0x66>
 8001170:	4630      	mov	r0, r6
 8001172:	f000 f99b 	bl	80014ac <_free_r>
 8001176:	2300      	movs	r3, #0
 8001178:	6363      	str	r3, [r4, #52]	; 0x34
 800117a:	89a3      	ldrh	r3, [r4, #12]
 800117c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001180:	81a3      	strh	r3, [r4, #12]
 8001182:	2300      	movs	r3, #0
 8001184:	6063      	str	r3, [r4, #4]
 8001186:	6923      	ldr	r3, [r4, #16]
 8001188:	6023      	str	r3, [r4, #0]
 800118a:	89a3      	ldrh	r3, [r4, #12]
 800118c:	f043 0308 	orr.w	r3, r3, #8
 8001190:	81a3      	strh	r3, [r4, #12]
 8001192:	6923      	ldr	r3, [r4, #16]
 8001194:	b94b      	cbnz	r3, 80011aa <__swsetup_r+0x9a>
 8001196:	89a3      	ldrh	r3, [r4, #12]
 8001198:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800119c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011a0:	d003      	beq.n	80011aa <__swsetup_r+0x9a>
 80011a2:	4621      	mov	r1, r4
 80011a4:	4630      	mov	r0, r6
 80011a6:	f000 f927 	bl	80013f8 <__smakebuf_r>
 80011aa:	89a0      	ldrh	r0, [r4, #12]
 80011ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011b0:	f010 0301 	ands.w	r3, r0, #1
 80011b4:	d00a      	beq.n	80011cc <__swsetup_r+0xbc>
 80011b6:	2300      	movs	r3, #0
 80011b8:	60a3      	str	r3, [r4, #8]
 80011ba:	6963      	ldr	r3, [r4, #20]
 80011bc:	425b      	negs	r3, r3
 80011be:	61a3      	str	r3, [r4, #24]
 80011c0:	6923      	ldr	r3, [r4, #16]
 80011c2:	b943      	cbnz	r3, 80011d6 <__swsetup_r+0xc6>
 80011c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80011c8:	d1ba      	bne.n	8001140 <__swsetup_r+0x30>
 80011ca:	bd70      	pop	{r4, r5, r6, pc}
 80011cc:	0781      	lsls	r1, r0, #30
 80011ce:	bf58      	it	pl
 80011d0:	6963      	ldrpl	r3, [r4, #20]
 80011d2:	60a3      	str	r3, [r4, #8]
 80011d4:	e7f4      	b.n	80011c0 <__swsetup_r+0xb0>
 80011d6:	2000      	movs	r0, #0
 80011d8:	e7f7      	b.n	80011ca <__swsetup_r+0xba>
 80011da:	bf00      	nop
 80011dc:	20000004 	.word	0x20000004
 80011e0:	080015fc 	.word	0x080015fc
 80011e4:	0800161c 	.word	0x0800161c
 80011e8:	080015dc 	.word	0x080015dc

080011ec <_close_r>:
 80011ec:	b538      	push	{r3, r4, r5, lr}
 80011ee:	2300      	movs	r3, #0
 80011f0:	4d05      	ldr	r5, [pc, #20]	; (8001208 <_close_r+0x1c>)
 80011f2:	4604      	mov	r4, r0
 80011f4:	4608      	mov	r0, r1
 80011f6:	602b      	str	r3, [r5, #0]
 80011f8:	f7ff f862 	bl	80002c0 <_close>
 80011fc:	1c43      	adds	r3, r0, #1
 80011fe:	d102      	bne.n	8001206 <_close_r+0x1a>
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	b103      	cbz	r3, 8001206 <_close_r+0x1a>
 8001204:	6023      	str	r3, [r4, #0]
 8001206:	bd38      	pop	{r3, r4, r5, pc}
 8001208:	2000009c 	.word	0x2000009c

0800120c <__sflush_r>:
 800120c:	898a      	ldrh	r2, [r1, #12]
 800120e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001210:	4605      	mov	r5, r0
 8001212:	0710      	lsls	r0, r2, #28
 8001214:	460c      	mov	r4, r1
 8001216:	d457      	bmi.n	80012c8 <__sflush_r+0xbc>
 8001218:	684b      	ldr	r3, [r1, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	dc04      	bgt.n	8001228 <__sflush_r+0x1c>
 800121e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001220:	2b00      	cmp	r3, #0
 8001222:	dc01      	bgt.n	8001228 <__sflush_r+0x1c>
 8001224:	2000      	movs	r0, #0
 8001226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800122a:	2e00      	cmp	r6, #0
 800122c:	d0fa      	beq.n	8001224 <__sflush_r+0x18>
 800122e:	2300      	movs	r3, #0
 8001230:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001234:	682f      	ldr	r7, [r5, #0]
 8001236:	602b      	str	r3, [r5, #0]
 8001238:	d032      	beq.n	80012a0 <__sflush_r+0x94>
 800123a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800123c:	89a3      	ldrh	r3, [r4, #12]
 800123e:	075a      	lsls	r2, r3, #29
 8001240:	d505      	bpl.n	800124e <__sflush_r+0x42>
 8001242:	6863      	ldr	r3, [r4, #4]
 8001244:	1ac0      	subs	r0, r0, r3
 8001246:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001248:	b10b      	cbz	r3, 800124e <__sflush_r+0x42>
 800124a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800124c:	1ac0      	subs	r0, r0, r3
 800124e:	2300      	movs	r3, #0
 8001250:	4602      	mov	r2, r0
 8001252:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001254:	4628      	mov	r0, r5
 8001256:	6a21      	ldr	r1, [r4, #32]
 8001258:	47b0      	blx	r6
 800125a:	1c43      	adds	r3, r0, #1
 800125c:	89a3      	ldrh	r3, [r4, #12]
 800125e:	d106      	bne.n	800126e <__sflush_r+0x62>
 8001260:	6829      	ldr	r1, [r5, #0]
 8001262:	291d      	cmp	r1, #29
 8001264:	d82c      	bhi.n	80012c0 <__sflush_r+0xb4>
 8001266:	4a29      	ldr	r2, [pc, #164]	; (800130c <__sflush_r+0x100>)
 8001268:	40ca      	lsrs	r2, r1
 800126a:	07d6      	lsls	r6, r2, #31
 800126c:	d528      	bpl.n	80012c0 <__sflush_r+0xb4>
 800126e:	2200      	movs	r2, #0
 8001270:	6062      	str	r2, [r4, #4]
 8001272:	6922      	ldr	r2, [r4, #16]
 8001274:	04d9      	lsls	r1, r3, #19
 8001276:	6022      	str	r2, [r4, #0]
 8001278:	d504      	bpl.n	8001284 <__sflush_r+0x78>
 800127a:	1c42      	adds	r2, r0, #1
 800127c:	d101      	bne.n	8001282 <__sflush_r+0x76>
 800127e:	682b      	ldr	r3, [r5, #0]
 8001280:	b903      	cbnz	r3, 8001284 <__sflush_r+0x78>
 8001282:	6560      	str	r0, [r4, #84]	; 0x54
 8001284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001286:	602f      	str	r7, [r5, #0]
 8001288:	2900      	cmp	r1, #0
 800128a:	d0cb      	beq.n	8001224 <__sflush_r+0x18>
 800128c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001290:	4299      	cmp	r1, r3
 8001292:	d002      	beq.n	800129a <__sflush_r+0x8e>
 8001294:	4628      	mov	r0, r5
 8001296:	f000 f909 	bl	80014ac <_free_r>
 800129a:	2000      	movs	r0, #0
 800129c:	6360      	str	r0, [r4, #52]	; 0x34
 800129e:	e7c2      	b.n	8001226 <__sflush_r+0x1a>
 80012a0:	6a21      	ldr	r1, [r4, #32]
 80012a2:	2301      	movs	r3, #1
 80012a4:	4628      	mov	r0, r5
 80012a6:	47b0      	blx	r6
 80012a8:	1c41      	adds	r1, r0, #1
 80012aa:	d1c7      	bne.n	800123c <__sflush_r+0x30>
 80012ac:	682b      	ldr	r3, [r5, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0c4      	beq.n	800123c <__sflush_r+0x30>
 80012b2:	2b1d      	cmp	r3, #29
 80012b4:	d001      	beq.n	80012ba <__sflush_r+0xae>
 80012b6:	2b16      	cmp	r3, #22
 80012b8:	d101      	bne.n	80012be <__sflush_r+0xb2>
 80012ba:	602f      	str	r7, [r5, #0]
 80012bc:	e7b2      	b.n	8001224 <__sflush_r+0x18>
 80012be:	89a3      	ldrh	r3, [r4, #12]
 80012c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c4:	81a3      	strh	r3, [r4, #12]
 80012c6:	e7ae      	b.n	8001226 <__sflush_r+0x1a>
 80012c8:	690f      	ldr	r7, [r1, #16]
 80012ca:	2f00      	cmp	r7, #0
 80012cc:	d0aa      	beq.n	8001224 <__sflush_r+0x18>
 80012ce:	0793      	lsls	r3, r2, #30
 80012d0:	bf18      	it	ne
 80012d2:	2300      	movne	r3, #0
 80012d4:	680e      	ldr	r6, [r1, #0]
 80012d6:	bf08      	it	eq
 80012d8:	694b      	ldreq	r3, [r1, #20]
 80012da:	1bf6      	subs	r6, r6, r7
 80012dc:	600f      	str	r7, [r1, #0]
 80012de:	608b      	str	r3, [r1, #8]
 80012e0:	2e00      	cmp	r6, #0
 80012e2:	dd9f      	ble.n	8001224 <__sflush_r+0x18>
 80012e4:	4633      	mov	r3, r6
 80012e6:	463a      	mov	r2, r7
 80012e8:	4628      	mov	r0, r5
 80012ea:	6a21      	ldr	r1, [r4, #32]
 80012ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80012f0:	47e0      	blx	ip
 80012f2:	2800      	cmp	r0, #0
 80012f4:	dc06      	bgt.n	8001304 <__sflush_r+0xf8>
 80012f6:	89a3      	ldrh	r3, [r4, #12]
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001300:	81a3      	strh	r3, [r4, #12]
 8001302:	e790      	b.n	8001226 <__sflush_r+0x1a>
 8001304:	4407      	add	r7, r0
 8001306:	1a36      	subs	r6, r6, r0
 8001308:	e7ea      	b.n	80012e0 <__sflush_r+0xd4>
 800130a:	bf00      	nop
 800130c:	20400001 	.word	0x20400001

08001310 <_fflush_r>:
 8001310:	b538      	push	{r3, r4, r5, lr}
 8001312:	690b      	ldr	r3, [r1, #16]
 8001314:	4605      	mov	r5, r0
 8001316:	460c      	mov	r4, r1
 8001318:	b913      	cbnz	r3, 8001320 <_fflush_r+0x10>
 800131a:	2500      	movs	r5, #0
 800131c:	4628      	mov	r0, r5
 800131e:	bd38      	pop	{r3, r4, r5, pc}
 8001320:	b118      	cbz	r0, 800132a <_fflush_r+0x1a>
 8001322:	6983      	ldr	r3, [r0, #24]
 8001324:	b90b      	cbnz	r3, 800132a <_fflush_r+0x1a>
 8001326:	f7ff fa19 	bl	800075c <__sinit>
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <_fflush_r+0x6c>)
 800132c:	429c      	cmp	r4, r3
 800132e:	d11b      	bne.n	8001368 <_fflush_r+0x58>
 8001330:	686c      	ldr	r4, [r5, #4]
 8001332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0ef      	beq.n	800131a <_fflush_r+0xa>
 800133a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800133c:	07d0      	lsls	r0, r2, #31
 800133e:	d404      	bmi.n	800134a <_fflush_r+0x3a>
 8001340:	0599      	lsls	r1, r3, #22
 8001342:	d402      	bmi.n	800134a <_fflush_r+0x3a>
 8001344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001346:	f7ff faa7 	bl	8000898 <__retarget_lock_acquire_recursive>
 800134a:	4628      	mov	r0, r5
 800134c:	4621      	mov	r1, r4
 800134e:	f7ff ff5d 	bl	800120c <__sflush_r>
 8001352:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001354:	4605      	mov	r5, r0
 8001356:	07da      	lsls	r2, r3, #31
 8001358:	d4e0      	bmi.n	800131c <_fflush_r+0xc>
 800135a:	89a3      	ldrh	r3, [r4, #12]
 800135c:	059b      	lsls	r3, r3, #22
 800135e:	d4dd      	bmi.n	800131c <_fflush_r+0xc>
 8001360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001362:	f7ff fa9a 	bl	800089a <__retarget_lock_release_recursive>
 8001366:	e7d9      	b.n	800131c <_fflush_r+0xc>
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_fflush_r+0x70>)
 800136a:	429c      	cmp	r4, r3
 800136c:	d101      	bne.n	8001372 <_fflush_r+0x62>
 800136e:	68ac      	ldr	r4, [r5, #8]
 8001370:	e7df      	b.n	8001332 <_fflush_r+0x22>
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <_fflush_r+0x74>)
 8001374:	429c      	cmp	r4, r3
 8001376:	bf08      	it	eq
 8001378:	68ec      	ldreq	r4, [r5, #12]
 800137a:	e7da      	b.n	8001332 <_fflush_r+0x22>
 800137c:	080015fc 	.word	0x080015fc
 8001380:	0800161c 	.word	0x0800161c
 8001384:	080015dc 	.word	0x080015dc

08001388 <_lseek_r>:
 8001388:	b538      	push	{r3, r4, r5, lr}
 800138a:	4604      	mov	r4, r0
 800138c:	4608      	mov	r0, r1
 800138e:	4611      	mov	r1, r2
 8001390:	2200      	movs	r2, #0
 8001392:	4d05      	ldr	r5, [pc, #20]	; (80013a8 <_lseek_r+0x20>)
 8001394:	602a      	str	r2, [r5, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	f7fe ffb6 	bl	8000308 <_lseek>
 800139c:	1c43      	adds	r3, r0, #1
 800139e:	d102      	bne.n	80013a6 <_lseek_r+0x1e>
 80013a0:	682b      	ldr	r3, [r5, #0]
 80013a2:	b103      	cbz	r3, 80013a6 <_lseek_r+0x1e>
 80013a4:	6023      	str	r3, [r4, #0]
 80013a6:	bd38      	pop	{r3, r4, r5, pc}
 80013a8:	2000009c 	.word	0x2000009c

080013ac <__swhatbuf_r>:
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	460e      	mov	r6, r1
 80013b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013b4:	4614      	mov	r4, r2
 80013b6:	2900      	cmp	r1, #0
 80013b8:	461d      	mov	r5, r3
 80013ba:	b096      	sub	sp, #88	; 0x58
 80013bc:	da08      	bge.n	80013d0 <__swhatbuf_r+0x24>
 80013be:	2200      	movs	r2, #0
 80013c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80013c4:	602a      	str	r2, [r5, #0]
 80013c6:	061a      	lsls	r2, r3, #24
 80013c8:	d410      	bmi.n	80013ec <__swhatbuf_r+0x40>
 80013ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ce:	e00e      	b.n	80013ee <__swhatbuf_r+0x42>
 80013d0:	466a      	mov	r2, sp
 80013d2:	f000 f8c5 	bl	8001560 <_fstat_r>
 80013d6:	2800      	cmp	r0, #0
 80013d8:	dbf1      	blt.n	80013be <__swhatbuf_r+0x12>
 80013da:	9a01      	ldr	r2, [sp, #4]
 80013dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80013e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80013e4:	425a      	negs	r2, r3
 80013e6:	415a      	adcs	r2, r3
 80013e8:	602a      	str	r2, [r5, #0]
 80013ea:	e7ee      	b.n	80013ca <__swhatbuf_r+0x1e>
 80013ec:	2340      	movs	r3, #64	; 0x40
 80013ee:	2000      	movs	r0, #0
 80013f0:	6023      	str	r3, [r4, #0]
 80013f2:	b016      	add	sp, #88	; 0x58
 80013f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080013f8 <__smakebuf_r>:
 80013f8:	898b      	ldrh	r3, [r1, #12]
 80013fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013fc:	079d      	lsls	r5, r3, #30
 80013fe:	4606      	mov	r6, r0
 8001400:	460c      	mov	r4, r1
 8001402:	d507      	bpl.n	8001414 <__smakebuf_r+0x1c>
 8001404:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001408:	6023      	str	r3, [r4, #0]
 800140a:	6123      	str	r3, [r4, #16]
 800140c:	2301      	movs	r3, #1
 800140e:	6163      	str	r3, [r4, #20]
 8001410:	b002      	add	sp, #8
 8001412:	bd70      	pop	{r4, r5, r6, pc}
 8001414:	466a      	mov	r2, sp
 8001416:	ab01      	add	r3, sp, #4
 8001418:	f7ff ffc8 	bl	80013ac <__swhatbuf_r>
 800141c:	9900      	ldr	r1, [sp, #0]
 800141e:	4605      	mov	r5, r0
 8001420:	4630      	mov	r0, r6
 8001422:	f7ff fa5b 	bl	80008dc <_malloc_r>
 8001426:	b948      	cbnz	r0, 800143c <__smakebuf_r+0x44>
 8001428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800142c:	059a      	lsls	r2, r3, #22
 800142e:	d4ef      	bmi.n	8001410 <__smakebuf_r+0x18>
 8001430:	f023 0303 	bic.w	r3, r3, #3
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	81a3      	strh	r3, [r4, #12]
 800143a:	e7e3      	b.n	8001404 <__smakebuf_r+0xc>
 800143c:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <__smakebuf_r+0x7c>)
 800143e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001440:	89a3      	ldrh	r3, [r4, #12]
 8001442:	6020      	str	r0, [r4, #0]
 8001444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001448:	81a3      	strh	r3, [r4, #12]
 800144a:	9b00      	ldr	r3, [sp, #0]
 800144c:	6120      	str	r0, [r4, #16]
 800144e:	6163      	str	r3, [r4, #20]
 8001450:	9b01      	ldr	r3, [sp, #4]
 8001452:	b15b      	cbz	r3, 800146c <__smakebuf_r+0x74>
 8001454:	4630      	mov	r0, r6
 8001456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800145a:	f000 f893 	bl	8001584 <_isatty_r>
 800145e:	b128      	cbz	r0, 800146c <__smakebuf_r+0x74>
 8001460:	89a3      	ldrh	r3, [r4, #12]
 8001462:	f023 0303 	bic.w	r3, r3, #3
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	81a3      	strh	r3, [r4, #12]
 800146c:	89a0      	ldrh	r0, [r4, #12]
 800146e:	4305      	orrs	r5, r0
 8001470:	81a5      	strh	r5, [r4, #12]
 8001472:	e7cd      	b.n	8001410 <__smakebuf_r+0x18>
 8001474:	080006f5 	.word	0x080006f5

08001478 <memchr>:
 8001478:	4603      	mov	r3, r0
 800147a:	b510      	push	{r4, lr}
 800147c:	b2c9      	uxtb	r1, r1
 800147e:	4402      	add	r2, r0
 8001480:	4293      	cmp	r3, r2
 8001482:	4618      	mov	r0, r3
 8001484:	d101      	bne.n	800148a <memchr+0x12>
 8001486:	2000      	movs	r0, #0
 8001488:	e003      	b.n	8001492 <memchr+0x1a>
 800148a:	7804      	ldrb	r4, [r0, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	428c      	cmp	r4, r1
 8001490:	d1f6      	bne.n	8001480 <memchr+0x8>
 8001492:	bd10      	pop	{r4, pc}

08001494 <__malloc_lock>:
 8001494:	4801      	ldr	r0, [pc, #4]	; (800149c <__malloc_lock+0x8>)
 8001496:	f7ff b9ff 	b.w	8000898 <__retarget_lock_acquire_recursive>
 800149a:	bf00      	nop
 800149c:	20000090 	.word	0x20000090

080014a0 <__malloc_unlock>:
 80014a0:	4801      	ldr	r0, [pc, #4]	; (80014a8 <__malloc_unlock+0x8>)
 80014a2:	f7ff b9fa 	b.w	800089a <__retarget_lock_release_recursive>
 80014a6:	bf00      	nop
 80014a8:	20000090 	.word	0x20000090

080014ac <_free_r>:
 80014ac:	b538      	push	{r3, r4, r5, lr}
 80014ae:	4605      	mov	r5, r0
 80014b0:	2900      	cmp	r1, #0
 80014b2:	d040      	beq.n	8001536 <_free_r+0x8a>
 80014b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014b8:	1f0c      	subs	r4, r1, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	bfb8      	it	lt
 80014be:	18e4      	addlt	r4, r4, r3
 80014c0:	f7ff ffe8 	bl	8001494 <__malloc_lock>
 80014c4:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <_free_r+0x8c>)
 80014c6:	6813      	ldr	r3, [r2, #0]
 80014c8:	b933      	cbnz	r3, 80014d8 <_free_r+0x2c>
 80014ca:	6063      	str	r3, [r4, #4]
 80014cc:	6014      	str	r4, [r2, #0]
 80014ce:	4628      	mov	r0, r5
 80014d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014d4:	f7ff bfe4 	b.w	80014a0 <__malloc_unlock>
 80014d8:	42a3      	cmp	r3, r4
 80014da:	d908      	bls.n	80014ee <_free_r+0x42>
 80014dc:	6820      	ldr	r0, [r4, #0]
 80014de:	1821      	adds	r1, r4, r0
 80014e0:	428b      	cmp	r3, r1
 80014e2:	bf01      	itttt	eq
 80014e4:	6819      	ldreq	r1, [r3, #0]
 80014e6:	685b      	ldreq	r3, [r3, #4]
 80014e8:	1809      	addeq	r1, r1, r0
 80014ea:	6021      	streq	r1, [r4, #0]
 80014ec:	e7ed      	b.n	80014ca <_free_r+0x1e>
 80014ee:	461a      	mov	r2, r3
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	b10b      	cbz	r3, 80014f8 <_free_r+0x4c>
 80014f4:	42a3      	cmp	r3, r4
 80014f6:	d9fa      	bls.n	80014ee <_free_r+0x42>
 80014f8:	6811      	ldr	r1, [r2, #0]
 80014fa:	1850      	adds	r0, r2, r1
 80014fc:	42a0      	cmp	r0, r4
 80014fe:	d10b      	bne.n	8001518 <_free_r+0x6c>
 8001500:	6820      	ldr	r0, [r4, #0]
 8001502:	4401      	add	r1, r0
 8001504:	1850      	adds	r0, r2, r1
 8001506:	4283      	cmp	r3, r0
 8001508:	6011      	str	r1, [r2, #0]
 800150a:	d1e0      	bne.n	80014ce <_free_r+0x22>
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4401      	add	r1, r0
 8001512:	6011      	str	r1, [r2, #0]
 8001514:	6053      	str	r3, [r2, #4]
 8001516:	e7da      	b.n	80014ce <_free_r+0x22>
 8001518:	d902      	bls.n	8001520 <_free_r+0x74>
 800151a:	230c      	movs	r3, #12
 800151c:	602b      	str	r3, [r5, #0]
 800151e:	e7d6      	b.n	80014ce <_free_r+0x22>
 8001520:	6820      	ldr	r0, [r4, #0]
 8001522:	1821      	adds	r1, r4, r0
 8001524:	428b      	cmp	r3, r1
 8001526:	bf01      	itttt	eq
 8001528:	6819      	ldreq	r1, [r3, #0]
 800152a:	685b      	ldreq	r3, [r3, #4]
 800152c:	1809      	addeq	r1, r1, r0
 800152e:	6021      	streq	r1, [r4, #0]
 8001530:	6063      	str	r3, [r4, #4]
 8001532:	6054      	str	r4, [r2, #4]
 8001534:	e7cb      	b.n	80014ce <_free_r+0x22>
 8001536:	bd38      	pop	{r3, r4, r5, pc}
 8001538:	20000094 	.word	0x20000094

0800153c <_read_r>:
 800153c:	b538      	push	{r3, r4, r5, lr}
 800153e:	4604      	mov	r4, r0
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	2200      	movs	r2, #0
 8001546:	4d05      	ldr	r5, [pc, #20]	; (800155c <_read_r+0x20>)
 8001548:	602a      	str	r2, [r5, #0]
 800154a:	461a      	mov	r2, r3
 800154c:	f7fe fe7f 	bl	800024e <_read>
 8001550:	1c43      	adds	r3, r0, #1
 8001552:	d102      	bne.n	800155a <_read_r+0x1e>
 8001554:	682b      	ldr	r3, [r5, #0]
 8001556:	b103      	cbz	r3, 800155a <_read_r+0x1e>
 8001558:	6023      	str	r3, [r4, #0]
 800155a:	bd38      	pop	{r3, r4, r5, pc}
 800155c:	2000009c 	.word	0x2000009c

08001560 <_fstat_r>:
 8001560:	b538      	push	{r3, r4, r5, lr}
 8001562:	2300      	movs	r3, #0
 8001564:	4d06      	ldr	r5, [pc, #24]	; (8001580 <_fstat_r+0x20>)
 8001566:	4604      	mov	r4, r0
 8001568:	4608      	mov	r0, r1
 800156a:	4611      	mov	r1, r2
 800156c:	602b      	str	r3, [r5, #0]
 800156e:	f7fe feb2 	bl	80002d6 <_fstat>
 8001572:	1c43      	adds	r3, r0, #1
 8001574:	d102      	bne.n	800157c <_fstat_r+0x1c>
 8001576:	682b      	ldr	r3, [r5, #0]
 8001578:	b103      	cbz	r3, 800157c <_fstat_r+0x1c>
 800157a:	6023      	str	r3, [r4, #0]
 800157c:	bd38      	pop	{r3, r4, r5, pc}
 800157e:	bf00      	nop
 8001580:	2000009c 	.word	0x2000009c

08001584 <_isatty_r>:
 8001584:	b538      	push	{r3, r4, r5, lr}
 8001586:	2300      	movs	r3, #0
 8001588:	4d05      	ldr	r5, [pc, #20]	; (80015a0 <_isatty_r+0x1c>)
 800158a:	4604      	mov	r4, r0
 800158c:	4608      	mov	r0, r1
 800158e:	602b      	str	r3, [r5, #0]
 8001590:	f7fe feb0 	bl	80002f4 <_isatty>
 8001594:	1c43      	adds	r3, r0, #1
 8001596:	d102      	bne.n	800159e <_isatty_r+0x1a>
 8001598:	682b      	ldr	r3, [r5, #0]
 800159a:	b103      	cbz	r3, 800159e <_isatty_r+0x1a>
 800159c:	6023      	str	r3, [r4, #0]
 800159e:	bd38      	pop	{r3, r4, r5, pc}
 80015a0:	2000009c 	.word	0x2000009c

080015a4 <_init>:
 80015a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015a6:	bf00      	nop
 80015a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015aa:	bc08      	pop	{r3}
 80015ac:	469e      	mov	lr, r3
 80015ae:	4770      	bx	lr

080015b0 <_fini>:
 80015b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015b2:	bf00      	nop
 80015b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015b6:	bc08      	pop	{r3}
 80015b8:	469e      	mov	lr, r3
 80015ba:	4770      	bx	lr
