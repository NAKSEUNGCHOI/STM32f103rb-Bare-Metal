
20_UART_tx_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000394  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080004a0  080004a0  000104a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004c0  080004c0  000104c8  2**0
                  CONTENTS
  4 .ARM          00000000  080004c0  080004c0  000104c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004c0  080004c8  000104c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c0  080004c0  000104c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004c4  080004c4  000104c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004c8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004c8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000104c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c3e  00000000  00000000  000104f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000047a  00000000  00000000  0001112f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e8  00000000  00000000  000115b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b0  00000000  00000000  00011698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000011cf  00000000  00000000  00011748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000011eb  00000000  00000000  00012917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000589c6  00000000  00000000  00013b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006c4c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000025c  00000000  00000000  0006c518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000488 	.word	0x08000488

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000488 	.word	0x08000488

0800014c <main>:
#define PIN5				(1U << 5)
#define LED_PIN				PIN5

static void dma_callback(void);

int main(void){
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
	char message[31] = "Hello from Stm32 DMA transfer\n\r";
 8000152:	4b19      	ldr	r3, [pc, #100]	; (80001b8 <main+0x6c>)
 8000154:	463c      	mov	r4, r7
 8000156:	461d      	mov	r5, r3
 8000158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800015a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800015c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000160:	c407      	stmia	r4!, {r0, r1, r2}
 8000162:	8023      	strh	r3, [r4, #0]
 8000164:	3402      	adds	r4, #2
 8000166:	0c1b      	lsrs	r3, r3, #16
 8000168:	7023      	strb	r3, [r4, #0]

	/*1. Enable clock access to GPIOA*/
	RCC->APB2ENR |= GPIOAEN;
 800016a:	4b14      	ldr	r3, [pc, #80]	; (80001bc <main+0x70>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a13      	ldr	r2, [pc, #76]	; (80001bc <main+0x70>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]

	/*2. Set PA5 as output pin*/
	GPIOA->CRL &= ~(1U << 23);
 8000176:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <main+0x74>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a11      	ldr	r2, [pc, #68]	; (80001c0 <main+0x74>)
 800017c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000180:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 22);
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <main+0x74>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a0e      	ldr	r2, [pc, #56]	; (80001c0 <main+0x74>)
 8000188:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800018c:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 21);
 800018e:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <main+0x74>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <main+0x74>)
 8000194:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000198:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 20);
 800019a:	4b09      	ldr	r3, [pc, #36]	; (80001c0 <main+0x74>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a08      	ldr	r2, [pc, #32]	; (80001c0 <main+0x74>)
 80001a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80001a4:	6013      	str	r3, [r2, #0]

	uart2_tx_init();
 80001a6:	f000 f8a7 	bl	80002f8 <uart2_tx_init>
	dma1_ch7_init((uint32_t)message, (uint32_t)&USART2->DR, 31);
 80001aa:	463b      	mov	r3, r7
 80001ac:	221f      	movs	r2, #31
 80001ae:	4905      	ldr	r1, [pc, #20]	; (80001c4 <main+0x78>)
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 f84d 	bl	8000250 <dma1_ch7_init>


	while(1){
 80001b6:	e7fe      	b.n	80001b6 <main+0x6a>
 80001b8:	080004a0 	.word	0x080004a0
 80001bc:	40021000 	.word	0x40021000
 80001c0:	40010800 	.word	0x40010800
 80001c4:	40004404 	.word	0x40004404

080001c8 <dma_callback>:

	}


}
static void dma_callback(void){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

		GPIOA->ODR |= LED_PIN;
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <dma_callback+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	4a03      	ldr	r2, [pc, #12]	; (80001e0 <dma_callback+0x18>)
 80001d2:	f043 0320 	orr.w	r3, r3, #32
 80001d6:	60d3      	str	r3, [r2, #12]

}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr
 80001e0:	40010800 	.word	0x40010800

080001e4 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	/*1. Check for transfer complete interrupt*/
	if(DMA1->ISR & DMA_ISR_TCIF7){
 80001e8:	4b07      	ldr	r3, [pc, #28]	; (8000208 <DMA1_Channel7_IRQHandler+0x24>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d007      	beq.n	8000204 <DMA1_Channel7_IRQHandler+0x20>

		/*2. Clear flag */
		DMA1->IFCR |= DMA_IFCR_CTCIF7;
 80001f4:	4b04      	ldr	r3, [pc, #16]	; (8000208 <DMA1_Channel7_IRQHandler+0x24>)
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	4a03      	ldr	r2, [pc, #12]	; (8000208 <DMA1_Channel7_IRQHandler+0x24>)
 80001fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80001fe:	6053      	str	r3, [r2, #4]

		/*3. Do something*/
		dma_callback();
 8000200:	f7ff ffe2 	bl	80001c8 <dma_callback>
	}
}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}
 8000208:	40020000 	.word	0x40020000

0800020c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr

08000218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	2b00      	cmp	r3, #0
 8000228:	db0b      	blt.n	8000242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	f003 021f 	and.w	r2, r3, #31
 8000230:	4906      	ldr	r1, [pc, #24]	; (800024c <__NVIC_EnableIRQ+0x34>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	095b      	lsrs	r3, r3, #5
 8000238:	2001      	movs	r0, #1
 800023a:	fa00 f202 	lsl.w	r2, r0, r2
 800023e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	e000e100 	.word	0xe000e100

08000250 <dma1_ch7_init>:
int __io_putchar(int ch){
	uart2_write(ch);
	return ch;
}

void dma1_ch7_init(uint32_t src, uint32_t dst, uint32_t len){
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	60b9      	str	r1, [r7, #8]
 800025a:	607a      	str	r2, [r7, #4]

	/*1. Enable clock access to DMA*/
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 800025c:	4b22      	ldr	r3, [pc, #136]	; (80002e8 <dma1_ch7_init+0x98>)
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	4a21      	ldr	r2, [pc, #132]	; (80002e8 <dma1_ch7_init+0x98>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6153      	str	r3, [r2, #20]

	/*2. Disable DMA1 channel 7*/
	DMA1_Channel7->CCR &= ~DMA_CCR_EN;
 8000268:	4b20      	ldr	r3, [pc, #128]	; (80002ec <dma1_ch7_init+0x9c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a1f      	ldr	r2, [pc, #124]	; (80002ec <dma1_ch7_init+0x9c>)
 800026e:	f023 0301 	bic.w	r3, r3, #1
 8000272:	6013      	str	r3, [r2, #0]

	/*Wait until dMA1 channel 7 is disabled*/
	//while(DMA1_Channel7->CCR & DMA_CCR_EN){}

	/*3. Clear all interrupt flags of channel 7*/
	DMA1->IFCR |= DMA_IFCR_CTCIF7 | DMA_IFCR_CGIF7 | DMA_IFCR_CHTIF7 | DMA_IFCR_CTEIF7;
 8000274:	4b1e      	ldr	r3, [pc, #120]	; (80002f0 <dma1_ch7_init+0xa0>)
 8000276:	685b      	ldr	r3, [r3, #4]
 8000278:	4a1d      	ldr	r2, [pc, #116]	; (80002f0 <dma1_ch7_init+0xa0>)
 800027a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800027e:	6053      	str	r3, [r2, #4]

	/*4. Set the destination buffer. */
	DMA1_Channel7->CPAR = dst;
 8000280:	4a1a      	ldr	r2, [pc, #104]	; (80002ec <dma1_ch7_init+0x9c>)
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	6093      	str	r3, [r2, #8]

	/*5. Set the source buffer. */
	DMA1_Channel7->CMAR = src;
 8000286:	4a19      	ldr	r2, [pc, #100]	; (80002ec <dma1_ch7_init+0x9c>)
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	60d3      	str	r3, [r2, #12]

	/*6. set the length*/
	DMA1_Channel7->CNDTR = len;
 800028c:	4a17      	ldr	r2, [pc, #92]	; (80002ec <dma1_ch7_init+0x9c>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	6053      	str	r3, [r2, #4]

	/*7. Select CH7. */

	/*8. Enable the memory increment*/
	DMA1_Channel7->CCR |= DMA_CCR_MINC;
 8000292:	4b16      	ldr	r3, [pc, #88]	; (80002ec <dma1_ch7_init+0x9c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a15      	ldr	r2, [pc, #84]	; (80002ec <dma1_ch7_init+0x9c>)
 8000298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800029c:	6013      	str	r3, [r2, #0]

	/*9. Configure transfer direction (memory -> peripheral)*/
	DMA1_Channel7->CCR |= DMA_CCR_DIR;
 800029e:	4b13      	ldr	r3, [pc, #76]	; (80002ec <dma1_ch7_init+0x9c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a12      	ldr	r2, [pc, #72]	; (80002ec <dma1_ch7_init+0x9c>)
 80002a4:	f043 0310 	orr.w	r3, r3, #16
 80002a8:	6013      	str	r3, [r2, #0]

	/*10. Enable DMA transfer complete interrupt */
	DMA1_Channel7->CCR |= DMA_CCR_TCIE;
 80002aa:	4b10      	ldr	r3, [pc, #64]	; (80002ec <dma1_ch7_init+0x9c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a0f      	ldr	r2, [pc, #60]	; (80002ec <dma1_ch7_init+0x9c>)
 80002b0:	f043 0302 	orr.w	r3, r3, #2
 80002b4:	6013      	str	r3, [r2, #0]

	/*11. Enable direct mode and disable FIFO mode. */
	DMA1_Channel7->CCR |= DMA_CCR_TCIE;
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <dma1_ch7_init+0x9c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a0c      	ldr	r2, [pc, #48]	; (80002ec <dma1_ch7_init+0x9c>)
 80002bc:	f043 0302 	orr.w	r3, r3, #2
 80002c0:	6013      	str	r3, [r2, #0]

	/*11.1. Enable Circular mode */
	//DMA1_Channel7->CCR |= DMA_CCR_CIRC;

	/*12. Enable DMA1 CH 7*/
	DMA1_Channel7->CCR |= DMA_CCR_EN;
 80002c2:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <dma1_ch7_init+0x9c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a09      	ldr	r2, [pc, #36]	; (80002ec <dma1_ch7_init+0x9c>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6013      	str	r3, [r2, #0]

	/*13. Enable UART2 transmitter MDA */
	USART2->CR3 |= USART_CR3_DMAT;
 80002ce:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <dma1_ch7_init+0xa4>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	4a08      	ldr	r2, [pc, #32]	; (80002f4 <dma1_ch7_init+0xa4>)
 80002d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d8:	6153      	str	r3, [r2, #20]

	/*14. Enable DMA interrupt in NVIC */
	NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80002da:	2011      	movs	r0, #17
 80002dc:	f7ff ff9c 	bl	8000218 <__NVIC_EnableIRQ>
}
 80002e0:	bf00      	nop
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	40021000 	.word	0x40021000
 80002ec:	40020080 	.word	0x40020080
 80002f0:	40020000 	.word	0x40020000
 80002f4:	40004400 	.word	0x40004400

080002f8 <uart2_tx_init>:
	NVIC_EnableIRQ(USART2_IRQn);

	/*9. Enable uart module */
	USART2->CR1 |= CR1_UE;
}
void uart2_tx_init(void){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	/********** Configure uart gpio pin **********/
	/*Enable clock access to gpioa */
	RCC->APB2ENR |= GPIOAEN;
 80002fc:	4b27      	ldr	r3, [pc, #156]	; (800039c <uart2_tx_init+0xa4>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a26      	ldr	r2, [pc, #152]	; (800039c <uart2_tx_init+0xa4>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6193      	str	r3, [r2, #24]
	/*Set PA2 mode to alternate function mode (TX/PA9, RX/PA10) */
//	AFIO->MAPR = 0x00000000;
//	AFIO->MAPR &= ~(1U << 2);
	GPIOA->CRL &= ~(1U << 15);
 8000308:	4b25      	ldr	r3, [pc, #148]	; (80003a0 <uart2_tx_init+0xa8>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a24      	ldr	r2, [pc, #144]	; (80003a0 <uart2_tx_init+0xa8>)
 800030e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000312:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 14);
 8000314:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <uart2_tx_init+0xa8>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a21      	ldr	r2, [pc, #132]	; (80003a0 <uart2_tx_init+0xa8>)
 800031a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800031e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 13);
 8000320:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <uart2_tx_init+0xa8>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a1e      	ldr	r2, [pc, #120]	; (80003a0 <uart2_tx_init+0xa8>)
 8000326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800032a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 12);
 800032c:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <uart2_tx_init+0xa8>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a1b      	ldr	r2, [pc, #108]	; (80003a0 <uart2_tx_init+0xa8>)
 8000332:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000336:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 11);
 8000338:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <uart2_tx_init+0xa8>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a18      	ldr	r2, [pc, #96]	; (80003a0 <uart2_tx_init+0xa8>)
 800033e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000342:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 10);
 8000344:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <uart2_tx_init+0xa8>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a15      	ldr	r2, [pc, #84]	; (80003a0 <uart2_tx_init+0xa8>)
 800034a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800034e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 9);
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <uart2_tx_init+0xa8>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a12      	ldr	r2, [pc, #72]	; (80003a0 <uart2_tx_init+0xa8>)
 8000356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800035a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 8);
 800035c:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <uart2_tx_init+0xa8>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a0f      	ldr	r2, [pc, #60]	; (80003a0 <uart2_tx_init+0xa8>)
 8000362:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000366:	6013      	str	r3, [r2, #0]

	/********** Configure uart module **********/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <uart2_tx_init+0xa4>)
 800036a:	69db      	ldr	r3, [r3, #28]
 800036c:	4a0b      	ldr	r2, [pc, #44]	; (800039c <uart2_tx_init+0xa4>)
 800036e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000372:	61d3      	str	r3, [r2, #28]
	/*Configure baudrate */
	//USART2->BRR = 0x0EA6;
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000378:	490a      	ldr	r1, [pc, #40]	; (80003a4 <uart2_tx_init+0xac>)
 800037a:	480b      	ldr	r0, [pc, #44]	; (80003a8 <uart2_tx_init+0xb0>)
 800037c:	f000 f816 	bl	80003ac <uart_set_baudrate>
	/*Configure the transfer direction */
	USART2->CR1 |= CR1_TE;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <uart2_tx_init+0xb0>)
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	4a08      	ldr	r2, [pc, #32]	; (80003a8 <uart2_tx_init+0xb0>)
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	60d3      	str	r3, [r2, #12]
	/*Enable uart module */
	USART2->CR1 |= CR1_UE;
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <uart2_tx_init+0xb0>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	4a05      	ldr	r2, [pc, #20]	; (80003a8 <uart2_tx_init+0xb0>)
 8000392:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000396:	60d3      	str	r3, [r2, #12]
}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40021000 	.word	0x40021000
 80003a0:	40010800 	.word	0x40010800
 80003a4:	007a1200 	.word	0x007a1200
 80003a8:	40004400 	.word	0x40004400

080003ac <uart_set_baudrate>:
	/*Make sure the transmit data register is empty before sending again*/
	while(!(USART2->SR & SR_TXE)){}
	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
}
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PheriphClk, uint32_t BaudRate){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	60f8      	str	r0, [r7, #12]
 80003b4:	60b9      	str	r1, [r7, #8]
 80003b6:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PheriphClk, BaudRate);
 80003b8:	6879      	ldr	r1, [r7, #4]
 80003ba:	68b8      	ldr	r0, [r7, #8]
 80003bc:	f000 f808 	bl	80003d0 <compute_uart_bd>
 80003c0:	4603      	mov	r3, r0
 80003c2:	461a      	mov	r2, r3
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	609a      	str	r2, [r3, #8]
}
 80003c8:	bf00      	nop
 80003ca:	3710      	adds	r7, #16
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PheriphClk, uint32_t BaudRate){
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	6039      	str	r1, [r7, #0]
	return ( (PheriphClk + (BaudRate/2U)) / BaudRate);
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	085a      	lsrs	r2, r3, #1
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	441a      	add	r2, r3
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003e8:	b29b      	uxth	r3, r3
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr

080003f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f4:	480c      	ldr	r0, [pc, #48]	; (8000428 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003f6:	490d      	ldr	r1, [pc, #52]	; (800042c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003f8:	4a0d      	ldr	r2, [pc, #52]	; (8000430 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003fc:	e002      	b.n	8000404 <LoopCopyDataInit>

080003fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000402:	3304      	adds	r3, #4

08000404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000408:	d3f9      	bcc.n	80003fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040a:	4a0a      	ldr	r2, [pc, #40]	; (8000434 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800040c:	4c0a      	ldr	r4, [pc, #40]	; (8000438 <LoopFillZerobss+0x22>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000410:	e001      	b.n	8000416 <LoopFillZerobss>

08000412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000414:	3204      	adds	r2, #4

08000416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000418:	d3fb      	bcc.n	8000412 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800041a:	f7ff fef7 	bl	800020c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800041e:	f000 f80f 	bl	8000440 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000422:	f7ff fe93 	bl	800014c <main>
  bx lr
 8000426:	4770      	bx	lr
  ldr r0, =_sdata
 8000428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800042c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000430:	080004c8 	.word	0x080004c8
  ldr r2, =_sbss
 8000434:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000438:	2000001c 	.word	0x2000001c

0800043c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800043c:	e7fe      	b.n	800043c <ADC1_2_IRQHandler>
	...

08000440 <__libc_init_array>:
 8000440:	b570      	push	{r4, r5, r6, lr}
 8000442:	2600      	movs	r6, #0
 8000444:	4d0c      	ldr	r5, [pc, #48]	; (8000478 <__libc_init_array+0x38>)
 8000446:	4c0d      	ldr	r4, [pc, #52]	; (800047c <__libc_init_array+0x3c>)
 8000448:	1b64      	subs	r4, r4, r5
 800044a:	10a4      	asrs	r4, r4, #2
 800044c:	42a6      	cmp	r6, r4
 800044e:	d109      	bne.n	8000464 <__libc_init_array+0x24>
 8000450:	f000 f81a 	bl	8000488 <_init>
 8000454:	2600      	movs	r6, #0
 8000456:	4d0a      	ldr	r5, [pc, #40]	; (8000480 <__libc_init_array+0x40>)
 8000458:	4c0a      	ldr	r4, [pc, #40]	; (8000484 <__libc_init_array+0x44>)
 800045a:	1b64      	subs	r4, r4, r5
 800045c:	10a4      	asrs	r4, r4, #2
 800045e:	42a6      	cmp	r6, r4
 8000460:	d105      	bne.n	800046e <__libc_init_array+0x2e>
 8000462:	bd70      	pop	{r4, r5, r6, pc}
 8000464:	f855 3b04 	ldr.w	r3, [r5], #4
 8000468:	4798      	blx	r3
 800046a:	3601      	adds	r6, #1
 800046c:	e7ee      	b.n	800044c <__libc_init_array+0xc>
 800046e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000472:	4798      	blx	r3
 8000474:	3601      	adds	r6, #1
 8000476:	e7f2      	b.n	800045e <__libc_init_array+0x1e>
 8000478:	080004c0 	.word	0x080004c0
 800047c:	080004c0 	.word	0x080004c0
 8000480:	080004c0 	.word	0x080004c0
 8000484:	080004c4 	.word	0x080004c4

08000488 <_init>:
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048a:	bf00      	nop
 800048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048e:	bc08      	pop	{r3}
 8000490:	469e      	mov	lr, r3
 8000492:	4770      	bx	lr

08000494 <_fini>:
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000496:	bf00      	nop
 8000498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049a:	bc08      	pop	{r3}
 800049c:	469e      	mov	lr, r3
 800049e:	4770      	bx	lr
