
21_I2C_gy_521.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000fa8  08000fb0  00010fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000fa8  08000fa8  00010fb0  2**0
                  CONTENTS
  4 .ARM          00000000  08000fa8  08000fa8  00010fb0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fa8  08000fb0  00010fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fa8  08000fa8  00010fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fac  08000fac  00010fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  08000fb0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000fb0  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fb0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a7e  00000000  00000000  00010fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000491  00000000  00000000  00011a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e0  00000000  00000000  00011ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  00011fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011089  00000000  00000000  00012060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000018d8  00000000  00000000  000230e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000587a2  00000000  00000000  000249c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007d163  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000310  00000000  00000000  0007d1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000f90 	.word	0x08000f90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000f90 	.word	0x08000f90

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <MPU6050_read_address>:

char data;

uint8_t data_rec[6];

void MPU6050_read_address (uint8_t reg){
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
	//GPIOA->ODR = LED_PIN;
	I2C1_byteRead(DEVICE_ADDR, reg, &data);
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <MPU6050_read_address+0x20>)
 8000996:	4619      	mov	r1, r3
 8000998:	20d0      	movs	r0, #208	; 0xd0
 800099a:	f000 f8bf 	bl	8000b1c <I2C1_byteRead>


}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000001c 	.word	0x2000001c

080009ac <MPU6050_write>:
void MPU6050_write(uint8_t reg, char value){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	460a      	mov	r2, r1
 80009b6:	71fb      	strb	r3, [r7, #7]
 80009b8:	4613      	mov	r3, r2
 80009ba:	71bb      	strb	r3, [r7, #6]
	char data[1];
	data[0] = value;
 80009bc:	79bb      	ldrb	r3, [r7, #6]
 80009be:	733b      	strb	r3, [r7, #12]

	I2C1_burstWrite(DEVICE_ADDR, reg, 1, data);
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	79f9      	ldrb	r1, [r7, #7]
 80009c6:	2201      	movs	r2, #1
 80009c8:	20d0      	movs	r0, #208	; 0xd0
 80009ca:	f000 f9bb 	bl	8000d44 <I2C1_burstWrite>

}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <MPU6050_read_values>:
void MPU6050_read_values(uint8_t reg){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	I2C1_burstRead(DEVICE_ADDR, reg, 6, (char*) data_rec);
 80009e2:	79f9      	ldrb	r1, [r7, #7]
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <MPU6050_read_values+0x20>)
 80009e6:	2206      	movs	r2, #6
 80009e8:	20d0      	movs	r0, #208	; 0xd0
 80009ea:	f000 f911 	bl	8000c10 <I2C1_burstRead>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000020 	.word	0x20000020

080009fc <MPU6050_init>:

void MPU6050_init(void){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	/*Enable I2C*/
	I2C1_init();
 8000a00:	f000 f822 	bl	8000a48 <I2C1_init>

	RCC->APB2ENR |= GPIOAEN;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MPU6050_init+0x44>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <MPU6050_init+0x44>)
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0x00000000;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MPU6050_init+0x48>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MPU6050_init+0x48>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
	GPIOA->CRL |= 0x00200000;
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MPU6050_init+0x48>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a09      	ldr	r2, [pc, #36]	; (8000a44 <MPU6050_init+0x48>)
 8000a20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a24:	6013      	str	r3, [r2, #0]

	/*Read the DEVID, this should return 0x68 or 104 in decimal something?*/
	MPU6050_read_address(WHO_AM_I_R);
 8000a26:	2075      	movs	r0, #117	; 0x75
 8000a28:	f7ff ffae 	bl	8000988 <MPU6050_read_address>

	/*Set DATA RATE of 1KHz by writing SMPLRT_DIV register*/
	MPU6050_write(SMPLRT_DIV_R, 0x07);
 8000a2c:	2107      	movs	r1, #7
 8000a2e:	2019      	movs	r0, #25
 8000a30:	f7ff ffbc 	bl	80009ac <MPU6050_write>

	/*Set data format range to +-4g*/
	MPU6050_write(ACCEL_CONFIG_R, 0b00);
 8000a34:	2100      	movs	r1, #0
 8000a36:	201c      	movs	r0, #28
 8000a38:	f7ff ffb8 	bl	80009ac <MPU6050_write>
	//MPU6050_write(GYRO_CONFIG_R, 0x00);

	/*Reset all bits*/

	/*Configure power control measure bit*/
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40010800 	.word	0x40010800

08000a48 <I2C1_init>:
#define SD_MODE_MAX_RISE_TIME			9
#define GPIOAEN 			(1U << 2)
#define PIN5				(1U << 5)
#define LED_PIN				PIN5

void I2C1_init(void){
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
	RCC->APB1ENR &= ~(RCC_APB1ENR_I2C1EN);
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <I2C1_init+0xc4>)
 8000a4e:	69db      	ldr	r3, [r3, #28]
 8000a50:	4a2e      	ldr	r2, [pc, #184]	; (8000b0c <I2C1_init+0xc4>)
 8000a52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a56:	61d3      	str	r3, [r2, #28]
	I2C1->CR1 = 0x00;
 8000a58:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <I2C1_init+0xc8>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
	I2C1->CR2 = 0x00;
 8000a5e:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <I2C1_init+0xc8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]

	/*Testing*/
	RCC->APB2ENR |= GPIOAEN;
 8000a64:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <I2C1_init+0xc4>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a28      	ldr	r2, [pc, #160]	; (8000b0c <I2C1_init+0xc4>)
 8000a6a:	f043 0304 	orr.w	r3, r3, #4
 8000a6e:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0x00000000;
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <I2C1_init+0xcc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <I2C1_init+0xcc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
	GPIOA->CRL |= 0x00200000;
 8000a7a:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <I2C1_init+0xcc>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a25      	ldr	r2, [pc, #148]	; (8000b14 <I2C1_init+0xcc>)
 8000a80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a84:	6013      	str	r3, [r2, #0]
	/////////////////////////

	/*1. Enable clock access to I2C1. */
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <I2C1_init+0xc4>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	4a20      	ldr	r2, [pc, #128]	; (8000b0c <I2C1_init+0xc4>)
 8000a8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a90:	61d3      	str	r3, [r2, #28]
	/*2. Enable clock access to GPIOB*/
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_AFIOEN;
 8000a92:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <I2C1_init+0xc4>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	4a1d      	ldr	r2, [pc, #116]	; (8000b0c <I2C1_init+0xc4>)
 8000a98:	f043 0309 	orr.w	r3, r3, #9
 8000a9c:	6193      	str	r3, [r2, #24]

	/*2. Set PB6 and PB7 to alternate functions output open-drain. PB6 = I2C_SCL / PB7 = I2C_SDA */
	GPIOB->CRL |= (1U << 27) | (1U << 26) | (1U << 25);
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <I2C1_init+0xd0>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <I2C1_init+0xd0>)
 8000aa4:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 8000aa8:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(1U << 24);
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <I2C1_init+0xd0>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a1a      	ldr	r2, [pc, #104]	; (8000b18 <I2C1_init+0xd0>)
 8000ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ab4:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (1U << 31) | (1U << 30) | (1U << 29);
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <I2C1_init+0xd0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <I2C1_init+0xd0>)
 8000abc:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000ac0:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(1U << 28);
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <I2C1_init+0xd0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <I2C1_init+0xd0>)
 8000ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6013      	str	r3, [r2, #0]
	// not needed for stm32f1
	/*4. Enable pull-up for PB6 and PB7*/
	// not needed for stm32f1

	/*5. Enter reset mode*/
	I2C1->CR1 |= I2C_CR1_SWRST;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <I2C1_init+0xc8>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <I2C1_init+0xc8>)
 8000ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ad8:	6013      	str	r3, [r2, #0]

	/*6. come out of reset mode (required to reset and come out of it to start the I2C)*/
	I2C1->CR1 &= ~(I2C_CR1_SWRST);
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <I2C1_init+0xc8>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a0c      	ldr	r2, [pc, #48]	; (8000b10 <I2C1_init+0xc8>)
 8000ae0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ae4:	6013      	str	r3, [r2, #0]

	/*7. Set peripheral clock frequency */
	I2C1->CR2 = (1U << 3); // I2C_CR2_FREQ_3; // 8 Mhz
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <I2C1_init+0xc8>)
 8000ae8:	2208      	movs	r2, #8
 8000aea:	605a      	str	r2, [r3, #4]

	/*8. set i2C to standard mode , 100kHz clock*/
	I2C1->CCR = I2C_100KHZ;
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <I2C1_init+0xc8>)
 8000aee:	2228      	movs	r2, #40	; 0x28
 8000af0:	61da      	str	r2, [r3, #28]

	/*9. Set rise time*/
	I2C1->TRISE = SD_MODE_MAX_RISE_TIME;
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <I2C1_init+0xc8>)
 8000af4:	2209      	movs	r2, #9
 8000af6:	621a      	str	r2, [r3, #32]

	/* Enable peripheral clock */
	I2C1->CR1 |= I2C_CR1_PE;
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <I2C1_init+0xc8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <I2C1_init+0xc8>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	6013      	str	r3, [r2, #0]

}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40005400 	.word	0x40005400
 8000b14:	40010800 	.word	0x40010800
 8000b18:	40010c00 	.word	0x40010c00

08000b1c <I2C1_byteRead>:

void I2C1_byteRead(char saddr, char maddr, char* data){
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	603a      	str	r2, [r7, #0]
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	71bb      	strb	r3, [r7, #6]
	/*slave address, memory address, data where we want to read from */

	volatile int temp;
	/*1. Wait until bus is not busy*/
	while(I2C1->SR2 & I2C_SR2_BUSY){}
 8000b2c:	bf00      	nop
 8000b2e:	4b36      	ldr	r3, [pc, #216]	; (8000c08 <I2C1_byteRead+0xec>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d1f9      	bne.n	8000b2e <I2C1_byteRead+0x12>

	/*2. Generate start condition*/
	I2C1->CR1 |= I2C_CR1_START;
 8000b3a:	4b33      	ldr	r3, [pc, #204]	; (8000c08 <I2C1_byteRead+0xec>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a32      	ldr	r2, [pc, #200]	; (8000c08 <I2C1_byteRead+0xec>)
 8000b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b44:	6013      	str	r3, [r2, #0]

	/*3. wait until start flag is set*/
	while(!(I2C1->SR1 & I2C_SR1_SB)){}
 8000b46:	bf00      	nop
 8000b48:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <I2C1_byteRead+0xec>)
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0f9      	beq.n	8000b48 <I2C1_byteRead+0x2c>

	/*4. transmit slave address + write */
	I2C1->DR = (uint8_t)saddr << 1;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	005a      	lsls	r2, r3, #1
 8000b58:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <I2C1_byteRead+0xec>)
 8000b5a:	611a      	str	r2, [r3, #16]

	/*5. Wait until address flag is set*/
	while(!(I2C1->SR1 & (I2C_SR1_ADDR))){}
 8000b5c:	bf00      	nop
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <I2C1_byteRead+0xec>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0f9      	beq.n	8000b5e <I2C1_byteRead+0x42>
	GPIOA->ODR = LED_PIN;
 8000b6a:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <I2C1_byteRead+0xf0>)
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	60da      	str	r2, [r3, #12]
	/*6. Clear addr flag*/
	temp = I2C1->SR2 | I2C1->SR1;
 8000b70:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <I2C1_byteRead+0xec>)
 8000b72:	699a      	ldr	r2, [r3, #24]
 8000b74:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <I2C1_byteRead+0xec>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]

	// Done with sending slave address//

	/*7. send memory address*/
	I2C1->DR = maddr;
 8000b7c:	4a22      	ldr	r2, [pc, #136]	; (8000c08 <I2C1_byteRead+0xec>)
 8000b7e:	79bb      	ldrb	r3, [r7, #6]
 8000b80:	6113      	str	r3, [r2, #16]

	/*8. wait until the data register is empty. */
	while(!(I2C1->SR1 & I2C_SR1_TXE)){}
 8000b82:	bf00      	nop
 8000b84:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <I2C1_byteRead+0xec>)
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0f9      	beq.n	8000b84 <I2C1_byteRead+0x68>

	/*9. Generate restart condition	 */
	I2C1->CR1 |= I2C_CR1_START;
 8000b90:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <I2C1_byteRead+0xec>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a1c      	ldr	r2, [pc, #112]	; (8000c08 <I2C1_byteRead+0xec>)
 8000b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9a:	6013      	str	r3, [r2, #0]

	/*10. Wait until start flag is set*/
	while(!(I2C1->SR1 & I2C_SR1_SB)){}
 8000b9c:	bf00      	nop
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <I2C1_byteRead+0xec>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0f9      	beq.n	8000b9e <I2C1_byteRead+0x82>

	/*11. Transmit slave address + read*/
	I2C1->DR = saddr << 1 | 1;
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	f043 0201 	orr.w	r2, r3, #1
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <I2C1_byteRead+0xec>)
 8000bb4:	611a      	str	r2, [r3, #16]

	/*12. wait until addr flag is set*/
	while(!(I2C1->SR1 & I2C_SR1_ADDR)){}
 8000bb6:	bf00      	nop
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <I2C1_byteRead+0xec>)
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d0f9      	beq.n	8000bb8 <I2C1_byteRead+0x9c>

	/*13. Disable acknowledge bit*/
	I2C1->SR1 &= ~(I2C_CR1_ACK);
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <I2C1_byteRead+0xec>)
 8000bc6:	695b      	ldr	r3, [r3, #20]
 8000bc8:	4a0f      	ldr	r2, [pc, #60]	; (8000c08 <I2C1_byteRead+0xec>)
 8000bca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bce:	6153      	str	r3, [r2, #20]

	/*14. Clear addr flag by reading SR2 again*/
	temp = I2C1->SR2;
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <I2C1_byteRead+0xec>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	60fb      	str	r3, [r7, #12]

	/*15. Enable stop condition */
	I2C1->CR1 |= I2C_CR1_STOP;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <I2C1_byteRead+0xec>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <I2C1_byteRead+0xec>)
 8000bdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000be0:	6013      	str	r3, [r2, #0]

	/*16. Wait until RXNE flag is set*/
	while(!(I2C1->SR1 & I2C_SR1_RXNE)){}
 8000be2:	bf00      	nop
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <I2C1_byteRead+0xec>)
 8000be6:	695b      	ldr	r3, [r3, #20]
 8000be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d0f9      	beq.n	8000be4 <I2C1_byteRead+0xc8>

	/*17. Read data from DR*/
	*data++ = I2C1->DR;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <I2C1_byteRead+0xec>)
 8000bf2:	6919      	ldr	r1, [r3, #16]
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	603a      	str	r2, [r7, #0]
 8000bfa:	b2ca      	uxtb	r2, r1
 8000bfc:	701a      	strb	r2, [r3, #0]


}
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	40005400 	.word	0x40005400
 8000c0c:	40010800 	.word	0x40010800

08000c10 <I2C1_burstRead>:
void I2C1_burstRead(char saddr, char maddr, int n, char* data){
 8000c10:	b480      	push	{r7}
 8000c12:	b087      	sub	sp, #28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60ba      	str	r2, [r7, #8]
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	73fb      	strb	r3, [r7, #15]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	73bb      	strb	r3, [r7, #14]
	volatile int temp;

	/*1. Wait until bus is not busy*/
	while(I2C1->SR2 & I2C_SR2_BUSY){}
 8000c22:	bf00      	nop
 8000c24:	4b46      	ldr	r3, [pc, #280]	; (8000d40 <I2C1_burstRead+0x130>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d1f9      	bne.n	8000c24 <I2C1_burstRead+0x14>

	/*2. Generate start condition*/
	I2C1->CR1 |= I2C_CR1_START;
 8000c30:	4b43      	ldr	r3, [pc, #268]	; (8000d40 <I2C1_burstRead+0x130>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a42      	ldr	r2, [pc, #264]	; (8000d40 <I2C1_burstRead+0x130>)
 8000c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3a:	6013      	str	r3, [r2, #0]

	/*3. wait until start flag is set*/
	while(!(I2C1->SR1 & I2C_SR1_SB)){}
 8000c3c:	bf00      	nop
 8000c3e:	4b40      	ldr	r3, [pc, #256]	; (8000d40 <I2C1_burstRead+0x130>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0f9      	beq.n	8000c3e <I2C1_burstRead+0x2e>

	/*4. transmit the data into I2C data register*/
	I2C1->DR = saddr << 1;
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	005a      	lsls	r2, r3, #1
 8000c4e:	4b3c      	ldr	r3, [pc, #240]	; (8000d40 <I2C1_burstRead+0x130>)
 8000c50:	611a      	str	r2, [r3, #16]

	/*5. Wait until address flag is set*/
	while(!(I2C1->SR1 & I2C_SR1_ADDR)){}
 8000c52:	bf00      	nop
 8000c54:	4b3a      	ldr	r3, [pc, #232]	; (8000d40 <I2C1_burstRead+0x130>)
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0f9      	beq.n	8000c54 <I2C1_burstRead+0x44>

	/*6. Clear addr flag by reading SR2*/
	temp = I2C1->SR2;
 8000c60:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <I2C1_burstRead+0x130>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	617b      	str	r3, [r7, #20]

	/*8. wait until the data register is empty. */
	// It is advisable to wait until the data register is empty before sending memory address.
	while(!(I2C1->SR1 & I2C_SR1_TXE)){}
 8000c66:	bf00      	nop
 8000c68:	4b35      	ldr	r3, [pc, #212]	; (8000d40 <I2C1_burstRead+0x130>)
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d0f9      	beq.n	8000c68 <I2C1_burstRead+0x58>

	/*7. send memory address*/
	I2C1->DR = maddr;
 8000c74:	4a32      	ldr	r2, [pc, #200]	; (8000d40 <I2C1_burstRead+0x130>)
 8000c76:	7bbb      	ldrb	r3, [r7, #14]
 8000c78:	6113      	str	r3, [r2, #16]

	/*8. wait until the data register is empty. */
	while(!(I2C1->SR1 & I2C_SR1_TXE)){}
 8000c7a:	bf00      	nop
 8000c7c:	4b30      	ldr	r3, [pc, #192]	; (8000d40 <I2C1_burstRead+0x130>)
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0f9      	beq.n	8000c7c <I2C1_burstRead+0x6c>

	/*9. Generate restart condition	 */
	I2C1->CR1 |= I2C_CR1_START;
 8000c88:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <I2C1_burstRead+0x130>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a2c      	ldr	r2, [pc, #176]	; (8000d40 <I2C1_burstRead+0x130>)
 8000c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c92:	6013      	str	r3, [r2, #0]

	/*10. Wait until start flag is set*/
	while(!(I2C1->SR1 & I2C_SR1_SB)){}
 8000c94:	bf00      	nop
 8000c96:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <I2C1_burstRead+0x130>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0f9      	beq.n	8000c96 <I2C1_burstRead+0x86>

	/*11. Transmit slave address + read*/
	I2C1->DR = saddr << 1 | 1;
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	f043 0201 	orr.w	r2, r3, #1
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <I2C1_burstRead+0x130>)
 8000cac:	611a      	str	r2, [r3, #16]

	/*12. wait until addr flag is set*/
	while(!(I2C1->SR1 & I2C_SR1_ADDR)){}
 8000cae:	bf00      	nop
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <I2C1_burstRead+0x130>)
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d0f9      	beq.n	8000cb0 <I2C1_burstRead+0xa0>

	/*14. Clear addr flag by reading SR2 again*/
	temp = I2C1->SR2;
 8000cbc:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <I2C1_burstRead+0x130>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	617b      	str	r3, [r7, #20]

	/*13. Enable acknowledge bit*/
	I2C1->SR1 |= I2C_CR1_ACK;
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <I2C1_burstRead+0x130>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	4a1e      	ldr	r2, [pc, #120]	; (8000d40 <I2C1_burstRead+0x130>)
 8000cc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ccc:	6153      	str	r3, [r2, #20]

	while(n > 0U){
 8000cce:	e02e      	b.n	8000d2e <I2C1_burstRead+0x11e>
		/*If n == 1 byte b/c we are decrementing n*/
		if(n == 1U){
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d11a      	bne.n	8000d0c <I2C1_burstRead+0xfc>
			/*13. Disable acknowledge bit*/
			I2C1->SR1 &= ~I2C_CR1_ACK;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <I2C1_burstRead+0x130>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <I2C1_burstRead+0x130>)
 8000cdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ce0:	6153      	str	r3, [r2, #20]

			/*15. Generate stop */
			I2C1->CR1 |= I2C_CR1_STOP;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <I2C1_burstRead+0x130>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a16      	ldr	r2, [pc, #88]	; (8000d40 <I2C1_burstRead+0x130>)
 8000ce8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cec:	6013      	str	r3, [r2, #0]

			/*16. Wait until RXNE flag is set*/
			while(!(I2C1->SR1 & I2C_SR1_RXNE)){}
 8000cee:	bf00      	nop
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <I2C1_burstRead+0x130>)
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0f9      	beq.n	8000cf0 <I2C1_burstRead+0xe0>

			/*17. Read data from DR*/
			*data++ = I2C1->DR;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <I2C1_burstRead+0x130>)
 8000cfe:	6919      	ldr	r1, [r3, #16]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]

			break;
 8000d0a:	e014      	b.n	8000d36 <I2C1_burstRead+0x126>
		}else{
			/*16. Wait until RXNE flag is set*/
			while(!(I2C1->SR1 & I2C_SR1_RXNE)){}
 8000d0c:	bf00      	nop
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <I2C1_burstRead+0x130>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0f9      	beq.n	8000d0e <I2C1_burstRead+0xfe>

			/*17. Read data from DR*/
			*data++ = I2C1->DR;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <I2C1_burstRead+0x130>)
 8000d1c:	6919      	ldr	r1, [r3, #16]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	607a      	str	r2, [r7, #4]
 8000d24:	b2ca      	uxtb	r2, r1
 8000d26:	701a      	strb	r2, [r3, #0]

			n--;
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	60bb      	str	r3, [r7, #8]
	while(n > 0U){
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1cd      	bne.n	8000cd0 <I2C1_burstRead+0xc0>
		}
	}

}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	371c      	adds	r7, #28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	40005400 	.word	0x40005400

08000d44 <I2C1_burstWrite>:
void I2C1_burstWrite(char saddr, char maddr, int n, char* data){
 8000d44:	b480      	push	{r7}
 8000d46:	b087      	sub	sp, #28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60ba      	str	r2, [r7, #8]
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4603      	mov	r3, r0
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	460b      	mov	r3, r1
 8000d54:	73bb      	strb	r3, [r7, #14]
	volatile int temp;

	/*1. Wait until bus is not busy*/
	while(I2C1->SR2 & I2C_SR2_BUSY){}
 8000d56:	bf00      	nop
 8000d58:	4b29      	ldr	r3, [pc, #164]	; (8000e00 <I2C1_burstWrite+0xbc>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1f9      	bne.n	8000d58 <I2C1_burstWrite+0x14>

	/*2. Generate start condition*/
	I2C1->CR1 |= I2C_CR1_START;
 8000d64:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <I2C1_burstWrite+0xbc>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a25      	ldr	r2, [pc, #148]	; (8000e00 <I2C1_burstWrite+0xbc>)
 8000d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6e:	6013      	str	r3, [r2, #0]

	/*3. wait until start flag is set*/
	while(!(I2C1->SR1 & I2C_SR1_SB)){}
 8000d70:	bf00      	nop
 8000d72:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <I2C1_burstWrite+0xbc>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d0f9      	beq.n	8000d72 <I2C1_burstWrite+0x2e>

	/*4. transmit the data into I2C data register*/
	I2C1->DR = saddr << 1;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	005a      	lsls	r2, r3, #1
 8000d82:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <I2C1_burstWrite+0xbc>)
 8000d84:	611a      	str	r2, [r3, #16]

	/*5. wait until address flag is set*/
	while(!(I2C1->SR1 & I2C_SR1_ADDR)){}
 8000d86:	bf00      	nop
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <I2C1_burstWrite+0xbc>)
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0f9      	beq.n	8000d88 <I2C1_burstWrite+0x44>

	/*5. Clear addr flag*/
	temp = I2C1->SR2;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <I2C1_burstWrite+0xbc>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	613b      	str	r3, [r7, #16]

	/*6. wait until the data register is empty. */
	while(!(I2C1->SR1 & I2C_SR1_TXE)){}
 8000d9a:	bf00      	nop
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <I2C1_burstWrite+0xbc>)
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0f9      	beq.n	8000d9c <I2C1_burstWrite+0x58>

	/*7. send memory address*/
	I2C1->DR = maddr;
 8000da8:	4a15      	ldr	r2, [pc, #84]	; (8000e00 <I2C1_burstWrite+0xbc>)
 8000daa:	7bbb      	ldrb	r3, [r7, #14]
 8000dac:	6113      	str	r3, [r2, #16]
	for(int i = 0; i < n; i++){
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	e00f      	b.n	8000dd4 <I2C1_burstWrite+0x90>
		/*8. wait until the data register is empty. */
		while(!(I2C1->SR1 & I2C_SR1_TXE)){}
 8000db4:	bf00      	nop
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <I2C1_burstWrite+0xbc>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0f9      	beq.n	8000db6 <I2C1_burstWrite+0x72>

		/*9. Transmit Memory address */
		I2C1->DR = *data++;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	1c5a      	adds	r2, r3, #1
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	781a      	ldrb	r2, [r3, #0]
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <I2C1_burstWrite+0xbc>)
 8000dcc:	611a      	str	r2, [r3, #16]
	for(int i = 0; i < n; i++){
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dbeb      	blt.n	8000db4 <I2C1_burstWrite+0x70>
	}
	/*10. wait until transfer finished*/
	while(!(I2C1->SR1 & I2C_SR1_BTF)){}
 8000ddc:	bf00      	nop
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <I2C1_burstWrite+0xbc>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f9      	beq.n	8000dde <I2C1_burstWrite+0x9a>

	/*generate stop condition*/

	I2C1->CR1 |= I2C_CR1_STOP;
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <I2C1_burstWrite+0xbc>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <I2C1_burstWrite+0xbc>)
 8000df0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df4:	6013      	str	r3, [r2, #0]



}
 8000df6:	bf00      	nop
 8000df8:	371c      	adds	r7, #28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	40005400 	.word	0x40005400

08000e04 <main>:
int16_t Accel_X_RAW, Accel_Y_RAW, Accel_Z_RAW;
float Ax, Ay, Az;

extern uint8_t data_rec[6];

int main(void){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	MPU6050_init();
 8000e08:	f7ff fdf8 	bl	80009fc <MPU6050_init>



	while(1){
		MPU6050_read_values(ACCEL_XOUT_H_REG);
 8000e0c:	203b      	movs	r0, #59	; 0x3b
 8000e0e:	f7ff fde3 	bl	80009d8 <MPU6050_read_values>

		Accel_X_RAW = (int16_t)(data_rec[0] << 8 | data_rec[1]);
 8000e12:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <main+0xcc>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	b21a      	sxth	r2, r3
 8000e1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ed0 <main+0xcc>)
 8000e1c:	785b      	ldrb	r3, [r3, #1]
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b21a      	sxth	r2, r3
 8000e24:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <main+0xd0>)
 8000e26:	801a      	strh	r2, [r3, #0]
		Accel_Y_RAW = (int16_t)(data_rec[2] << 8 | data_rec[3]);
 8000e28:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <main+0xcc>)
 8000e2a:	789b      	ldrb	r3, [r3, #2]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	4b27      	ldr	r3, [pc, #156]	; (8000ed0 <main+0xcc>)
 8000e32:	78db      	ldrb	r3, [r3, #3]
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b21a      	sxth	r2, r3
 8000e3a:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <main+0xd4>)
 8000e3c:	801a      	strh	r2, [r3, #0]
		Accel_Z_RAW = (int16_t)(data_rec[4] << 8 | data_rec[5]);
 8000e3e:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <main+0xcc>)
 8000e40:	791b      	ldrb	r3, [r3, #4]
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <main+0xcc>)
 8000e48:	795b      	ldrb	r3, [r3, #5]
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	b21a      	sxth	r2, r3
 8000e50:	4b22      	ldr	r3, [pc, #136]	; (8000edc <main+0xd8>)
 8000e52:	801a      	strh	r2, [r3, #0]

		Ax = (Accel_X_RAW/16384.0);
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <main+0xd0>)
 8000e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fac8 	bl	80003f0 <__aeabi_i2d>
 8000e60:	f04f 0200 	mov.w	r2, #0
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <main+0xdc>)
 8000e66:	f7ff fc57 	bl	8000718 <__aeabi_ddiv>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f7ff fd39 	bl	80008e8 <__aeabi_d2f>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4a1a      	ldr	r2, [pc, #104]	; (8000ee4 <main+0xe0>)
 8000e7a:	6013      	str	r3, [r2, #0]
		Ay = (Accel_Y_RAW/16384.0);
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <main+0xd4>)
 8000e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fab4 	bl	80003f0 <__aeabi_i2d>
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <main+0xdc>)
 8000e8e:	f7ff fc43 	bl	8000718 <__aeabi_ddiv>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4610      	mov	r0, r2
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f7ff fd25 	bl	80008e8 <__aeabi_d2f>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <main+0xe4>)
 8000ea2:	6013      	str	r3, [r2, #0]
		Az = (Accel_Z_RAW/16384.0);
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <main+0xd8>)
 8000ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff faa0 	bl	80003f0 <__aeabi_i2d>
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <main+0xdc>)
 8000eb6:	f7ff fc2f 	bl	8000718 <__aeabi_ddiv>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff fd11 	bl	80008e8 <__aeabi_d2f>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a08      	ldr	r2, [pc, #32]	; (8000eec <main+0xe8>)
 8000eca:	6013      	str	r3, [r2, #0]
		MPU6050_read_values(ACCEL_XOUT_H_REG);
 8000ecc:	e79e      	b.n	8000e0c <main+0x8>
 8000ece:	bf00      	nop
 8000ed0:	20000020 	.word	0x20000020
 8000ed4:	20000026 	.word	0x20000026
 8000ed8:	20000028 	.word	0x20000028
 8000edc:	2000002a 	.word	0x2000002a
 8000ee0:	40d00000 	.word	0x40d00000
 8000ee4:	2000002c 	.word	0x2000002c
 8000ee8:	20000030 	.word	0x20000030
 8000eec:	20000034 	.word	0x20000034

08000ef0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000efe:	490d      	ldr	r1, [pc, #52]	; (8000f34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f14:	4c0a      	ldr	r4, [pc, #40]	; (8000f40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f22:	f7ff ffe5 	bl	8000ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f26:	f000 f80f 	bl	8000f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f2a:	f7ff ff6b 	bl	8000e04 <main>
  bx lr
 8000f2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f34:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f38:	08000fb0 	.word	0x08000fb0
  ldr r2, =_sbss
 8000f3c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000f40:	20000038 	.word	0x20000038

08000f44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <ADC1_2_IRQHandler>
	...

08000f48 <__libc_init_array>:
 8000f48:	b570      	push	{r4, r5, r6, lr}
 8000f4a:	2600      	movs	r6, #0
 8000f4c:	4d0c      	ldr	r5, [pc, #48]	; (8000f80 <__libc_init_array+0x38>)
 8000f4e:	4c0d      	ldr	r4, [pc, #52]	; (8000f84 <__libc_init_array+0x3c>)
 8000f50:	1b64      	subs	r4, r4, r5
 8000f52:	10a4      	asrs	r4, r4, #2
 8000f54:	42a6      	cmp	r6, r4
 8000f56:	d109      	bne.n	8000f6c <__libc_init_array+0x24>
 8000f58:	f000 f81a 	bl	8000f90 <_init>
 8000f5c:	2600      	movs	r6, #0
 8000f5e:	4d0a      	ldr	r5, [pc, #40]	; (8000f88 <__libc_init_array+0x40>)
 8000f60:	4c0a      	ldr	r4, [pc, #40]	; (8000f8c <__libc_init_array+0x44>)
 8000f62:	1b64      	subs	r4, r4, r5
 8000f64:	10a4      	asrs	r4, r4, #2
 8000f66:	42a6      	cmp	r6, r4
 8000f68:	d105      	bne.n	8000f76 <__libc_init_array+0x2e>
 8000f6a:	bd70      	pop	{r4, r5, r6, pc}
 8000f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f70:	4798      	blx	r3
 8000f72:	3601      	adds	r6, #1
 8000f74:	e7ee      	b.n	8000f54 <__libc_init_array+0xc>
 8000f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f7a:	4798      	blx	r3
 8000f7c:	3601      	adds	r6, #1
 8000f7e:	e7f2      	b.n	8000f66 <__libc_init_array+0x1e>
 8000f80:	08000fa8 	.word	0x08000fa8
 8000f84:	08000fa8 	.word	0x08000fa8
 8000f88:	08000fa8 	.word	0x08000fa8
 8000f8c:	08000fac 	.word	0x08000fac

08000f90 <_init>:
 8000f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f92:	bf00      	nop
 8000f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f96:	bc08      	pop	{r3}
 8000f98:	469e      	mov	lr, r3
 8000f9a:	4770      	bx	lr

08000f9c <_fini>:
 8000f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9e:	bf00      	nop
 8000fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fa2:	bc08      	pop	{r3}
 8000fa4:	469e      	mov	lr, r3
 8000fa6:	4770      	bx	lr
