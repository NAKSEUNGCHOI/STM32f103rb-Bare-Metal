
5_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000028c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000398  08000398  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000398  08000398  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000398  08000398  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000398  08000398  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000398  08000398  00010398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800039c  0800039c  0001039c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003a0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003a4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003a4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e4f  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000051e  00000000  00000000  00020e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  000213a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  00021570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010338  00000000  00000000  000216f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001bdc  00000000  00000000  00031a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b0b2  00000000  00000000  0003360c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ae6be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000057c  00000000  00000000  000ae710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000380 	.word	0x08000380

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000380 	.word	0x08000380

0800014c <main>:
static uint16_t compute_uart_bd(uint32_t PheriphClk, uint32_t BaudRate);

void uart2_tx_init(void);
void uart2_write(int ch);

int main(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

	uart2_tx_init();
 8000152:	f000 f817 	bl	8000184 <uart2_tx_init>

	while(1){
		uart2_write('Y');
 8000156:	2059      	movs	r0, #89	; 0x59
 8000158:	f000 f84e 	bl	80001f8 <uart2_write>
		uart2_write('B');
 800015c:	2042      	movs	r0, #66	; 0x42
 800015e:	f000 f84b 	bl	80001f8 <uart2_write>
		uart2_write('C');
 8000162:	2043      	movs	r0, #67	; 0x43
 8000164:	f000 f848 	bl	80001f8 <uart2_write>
		for(volatile int i = 0; i < 1000000; i++){}
 8000168:	2300      	movs	r3, #0
 800016a:	607b      	str	r3, [r7, #4]
 800016c:	e002      	b.n	8000174 <main+0x28>
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	3301      	adds	r3, #1
 8000172:	607b      	str	r3, [r7, #4]
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4a02      	ldr	r2, [pc, #8]	; (8000180 <main+0x34>)
 8000178:	4293      	cmp	r3, r2
 800017a:	ddf8      	ble.n	800016e <main+0x22>
		uart2_write('Y');
 800017c:	e7eb      	b.n	8000156 <main+0xa>
 800017e:	bf00      	nop
 8000180:	000f423f 	.word	0x000f423f

08000184 <uart2_tx_init>:
	}


}
void uart2_tx_init(void){
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	/********** Configure uart gpio pin **********/
	/*Enable clock access to gpioa */
	RCC->APB2ENR |= GPIOAEN;
 8000188:	4b16      	ldr	r3, [pc, #88]	; (80001e4 <uart2_tx_init+0x60>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a15      	ldr	r2, [pc, #84]	; (80001e4 <uart2_tx_init+0x60>)
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
	/*Set PA2 mode to alternate function mode (TX/PA9, RX/PA10) */
	AFIO->MAPR = 0x00000000;
 8000194:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <uart2_tx_init+0x64>)
 8000196:	2200      	movs	r2, #0
 8000198:	605a      	str	r2, [r3, #4]
	AFIO->MAPR &= ~(1U << 2);
 800019a:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <uart2_tx_init+0x64>)
 800019c:	685b      	ldr	r3, [r3, #4]
 800019e:	4a12      	ldr	r2, [pc, #72]	; (80001e8 <uart2_tx_init+0x64>)
 80001a0:	f023 0304 	bic.w	r3, r3, #4
 80001a4:	6053      	str	r3, [r2, #4]
	GPIOA->CRL = 0x00004A00;
 80001a6:	4b11      	ldr	r3, [pc, #68]	; (80001ec <uart2_tx_init+0x68>)
 80001a8:	f44f 4294 	mov.w	r2, #18944	; 0x4a00
 80001ac:	601a      	str	r2, [r3, #0]
//	SysTick -> VAL = (uint32_t)(0x0); //reset value to zero
//	SysTick -> CTRL |= (uint32_t)(0x1); //turn on SysTick Timer

	/********** Configure uart module **********/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 80001ae:	4b0d      	ldr	r3, [pc, #52]	; (80001e4 <uart2_tx_init+0x60>)
 80001b0:	69db      	ldr	r3, [r3, #28]
 80001b2:	4a0c      	ldr	r2, [pc, #48]	; (80001e4 <uart2_tx_init+0x60>)
 80001b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001b8:	61d3      	str	r3, [r2, #28]
	/*Configure baudrate */
	//USART2->BRR = 0x0EA6;
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80001ba:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80001be:	490c      	ldr	r1, [pc, #48]	; (80001f0 <uart2_tx_init+0x6c>)
 80001c0:	480c      	ldr	r0, [pc, #48]	; (80001f4 <uart2_tx_init+0x70>)
 80001c2:	f000 f82f 	bl	8000224 <uart_set_baudrate>
	/*Configure the transfer direction */
	USART2->CR1 |= CR1_TE;
 80001c6:	4b0b      	ldr	r3, [pc, #44]	; (80001f4 <uart2_tx_init+0x70>)
 80001c8:	68db      	ldr	r3, [r3, #12]
 80001ca:	4a0a      	ldr	r2, [pc, #40]	; (80001f4 <uart2_tx_init+0x70>)
 80001cc:	f043 0308 	orr.w	r3, r3, #8
 80001d0:	60d3      	str	r3, [r2, #12]
	/*Enable uart module */
	USART2->CR1 |= CR1_UE;
 80001d2:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <uart2_tx_init+0x70>)
 80001d4:	68db      	ldr	r3, [r3, #12]
 80001d6:	4a07      	ldr	r2, [pc, #28]	; (80001f4 <uart2_tx_init+0x70>)
 80001d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001dc:	60d3      	str	r3, [r2, #12]
}
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	40021000 	.word	0x40021000
 80001e8:	40010000 	.word	0x40010000
 80001ec:	40010800 	.word	0x40010800
 80001f0:	007a1200 	.word	0x007a1200
 80001f4:	40004400 	.word	0x40004400

080001f8 <uart2_write>:
void uart2_write(int ch){
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty before sending again*/
	while(!(USART2->SR & SR_TXE)){}
 8000200:	bf00      	nop
 8000202:	4b07      	ldr	r3, [pc, #28]	; (8000220 <uart2_write+0x28>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800020a:	2b00      	cmp	r3, #0
 800020c:	d0f9      	beq.n	8000202 <uart2_write+0xa>
	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4a03      	ldr	r2, [pc, #12]	; (8000220 <uart2_write+0x28>)
 8000212:	b2db      	uxtb	r3, r3
 8000214:	6053      	str	r3, [r2, #4]
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr
 8000220:	40004400 	.word	0x40004400

08000224 <uart_set_baudrate>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PheriphClk, uint32_t BaudRate){
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PheriphClk, BaudRate);
 8000230:	6879      	ldr	r1, [r7, #4]
 8000232:	68b8      	ldr	r0, [r7, #8]
 8000234:	f000 f808 	bl	8000248 <compute_uart_bd>
 8000238:	4603      	mov	r3, r0
 800023a:	461a      	mov	r2, r3
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	609a      	str	r2, [r3, #8]
}
 8000240:	bf00      	nop
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PheriphClk, uint32_t BaudRate){
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
	return ( (PheriphClk + (BaudRate/2U)) / BaudRate);
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	085a      	lsrs	r2, r3, #1
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	441a      	add	r2, r3
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000260:	b29b      	uxth	r3, r3
}
 8000262:	4618      	mov	r0, r3
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr

0800026c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000270:	e7fe      	b.n	8000270 <NMI_Handler+0x4>

08000272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000272:	b480      	push	{r7}
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000276:	e7fe      	b.n	8000276 <HardFault_Handler+0x4>

08000278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800027c:	e7fe      	b.n	800027c <MemManage_Handler+0x4>

0800027e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800027e:	b480      	push	{r7}
 8000280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000282:	e7fe      	b.n	8000282 <BusFault_Handler+0x4>

08000284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000288:	e7fe      	b.n	8000288 <UsageFault_Handler+0x4>

0800028a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800028a:	b480      	push	{r7}
 800028c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800028e:	bf00      	nop
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr

08000296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000296:	b480      	push	{r7}
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr

080002a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002a2:	b480      	push	{r7}
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002a6:	bf00      	nop
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr

080002ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002ae:	b580      	push	{r7, lr}
 80002b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002b2:	f000 f82f 	bl	8000314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}

080002ba <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002ba:	b480      	push	{r7}
 80002bc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002be:	bf00      	nop
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
	...

080002c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c8:	480c      	ldr	r0, [pc, #48]	; (80002fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002ca:	490d      	ldr	r1, [pc, #52]	; (8000300 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002cc:	4a0d      	ldr	r2, [pc, #52]	; (8000304 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d0:	e002      	b.n	80002d8 <LoopCopyDataInit>

080002d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d6:	3304      	adds	r3, #4

080002d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002dc:	d3f9      	bcc.n	80002d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002de:	4a0a      	ldr	r2, [pc, #40]	; (8000308 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80002e0:	4c0a      	ldr	r4, [pc, #40]	; (800030c <LoopFillZerobss+0x22>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e4:	e001      	b.n	80002ea <LoopFillZerobss>

080002e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e8:	3204      	adds	r2, #4

080002ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ec:	d3fb      	bcc.n	80002e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002ee:	f7ff ffe4 	bl	80002ba <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002f2:	f000 f821 	bl	8000338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f6:	f7ff ff29 	bl	800014c <main>
  bx lr
 80002fa:	4770      	bx	lr
  ldr r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000300:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000304:	080003a0 	.word	0x080003a0
  ldr r2, =_sbss
 8000308:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800030c:	20000024 	.word	0x20000024

08000310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC1_2_IRQHandler>
	...

08000314 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <HAL_IncTick+0x1c>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	461a      	mov	r2, r3
 800031e:	4b05      	ldr	r3, [pc, #20]	; (8000334 <HAL_IncTick+0x20>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4413      	add	r3, r2
 8000324:	4a03      	ldr	r2, [pc, #12]	; (8000334 <HAL_IncTick+0x20>)
 8000326:	6013      	str	r3, [r2, #0]
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	20000000 	.word	0x20000000
 8000334:	20000020 	.word	0x20000020

08000338 <__libc_init_array>:
 8000338:	b570      	push	{r4, r5, r6, lr}
 800033a:	2600      	movs	r6, #0
 800033c:	4d0c      	ldr	r5, [pc, #48]	; (8000370 <__libc_init_array+0x38>)
 800033e:	4c0d      	ldr	r4, [pc, #52]	; (8000374 <__libc_init_array+0x3c>)
 8000340:	1b64      	subs	r4, r4, r5
 8000342:	10a4      	asrs	r4, r4, #2
 8000344:	42a6      	cmp	r6, r4
 8000346:	d109      	bne.n	800035c <__libc_init_array+0x24>
 8000348:	f000 f81a 	bl	8000380 <_init>
 800034c:	2600      	movs	r6, #0
 800034e:	4d0a      	ldr	r5, [pc, #40]	; (8000378 <__libc_init_array+0x40>)
 8000350:	4c0a      	ldr	r4, [pc, #40]	; (800037c <__libc_init_array+0x44>)
 8000352:	1b64      	subs	r4, r4, r5
 8000354:	10a4      	asrs	r4, r4, #2
 8000356:	42a6      	cmp	r6, r4
 8000358:	d105      	bne.n	8000366 <__libc_init_array+0x2e>
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000360:	4798      	blx	r3
 8000362:	3601      	adds	r6, #1
 8000364:	e7ee      	b.n	8000344 <__libc_init_array+0xc>
 8000366:	f855 3b04 	ldr.w	r3, [r5], #4
 800036a:	4798      	blx	r3
 800036c:	3601      	adds	r6, #1
 800036e:	e7f2      	b.n	8000356 <__libc_init_array+0x1e>
 8000370:	08000398 	.word	0x08000398
 8000374:	08000398 	.word	0x08000398
 8000378:	08000398 	.word	0x08000398
 800037c:	0800039c 	.word	0x0800039c

08000380 <_init>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr

0800038c <_fini>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	bf00      	nop
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr
