
9_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001414  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08001520  08001520  00011520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015cc  080015cc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080015cc  080015cc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015cc  080015cc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015cc  080015cc  000115cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015d0  080015d0  000115d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080015d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  0800163c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  0800163c  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a4e  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000092c  00000000  00000000  00021adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f8  00000000  00000000  00022410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000270  00000000  00000000  00022708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011fca  00000000  00000000  00022978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003404  00000000  00000000  00034942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000806c9  00000000  00000000  00037d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b840f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000115c  00000000  00000000  000b8460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08001508 	.word	0x08001508

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08001508 	.word	0x08001508

0800014c <pa1_adc_init>:
 * Therefore, you have to put 5 in "binary number" into SQ1, 2 into SQ2, 3into SQ3, and so fourth.
 * In this case, you are going to need to use only one adc, so you put 1 in binary number into SQ1.
 * Then, set the sequence length @ ADC_SQR1.
 * Length of sequence means with how many channels you are sampling.
 */
void pa1_adc_init(void){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0

	/*Enable clock access to GPIOA */
	RCC->APB2ENR |= GPIOAEN;
 8000150:	4b19      	ldr	r3, [pc, #100]	; (80001b8 <pa1_adc_init+0x6c>)
 8000152:	699b      	ldr	r3, [r3, #24]
 8000154:	4a18      	ldr	r2, [pc, #96]	; (80001b8 <pa1_adc_init+0x6c>)
 8000156:	f043 0304 	orr.w	r3, r3, #4
 800015a:	6193      	str	r3, [r2, #24]

	/*Set the mode of PA1 to analog mode (CNF1 analog mode: 00, Mode1 Input mode: 00)*/
	GPIOA->CRL &= ~(1U << 4);
 800015c:	4b17      	ldr	r3, [pc, #92]	; (80001bc <pa1_adc_init+0x70>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	4a16      	ldr	r2, [pc, #88]	; (80001bc <pa1_adc_init+0x70>)
 8000162:	f023 0310 	bic.w	r3, r3, #16
 8000166:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 5);
 8000168:	4b14      	ldr	r3, [pc, #80]	; (80001bc <pa1_adc_init+0x70>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a13      	ldr	r2, [pc, #76]	; (80001bc <pa1_adc_init+0x70>)
 800016e:	f023 0320 	bic.w	r3, r3, #32
 8000172:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 6);
 8000174:	4b11      	ldr	r3, [pc, #68]	; (80001bc <pa1_adc_init+0x70>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a10      	ldr	r2, [pc, #64]	; (80001bc <pa1_adc_init+0x70>)
 800017a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800017e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 7);
 8000180:	4b0e      	ldr	r3, [pc, #56]	; (80001bc <pa1_adc_init+0x70>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a0d      	ldr	r2, [pc, #52]	; (80001bc <pa1_adc_init+0x70>)
 8000186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800018a:	6013      	str	r3, [r2, #0]

	/*******Configure the ADC module*******/
	/*Enable clock access to ADC*/
	RCC->APB2ENR |= ADC1EN;
 800018c:	4b0a      	ldr	r3, [pc, #40]	; (80001b8 <pa1_adc_init+0x6c>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a09      	ldr	r2, [pc, #36]	; (80001b8 <pa1_adc_init+0x6c>)
 8000192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000196:	6193      	str	r3, [r2, #24]

	/*Configure ADC parameters*/
	/*Conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 8000198:	4b09      	ldr	r3, [pc, #36]	; (80001c0 <pa1_adc_init+0x74>)
 800019a:	2201      	movs	r2, #1
 800019c:	635a      	str	r2, [r3, #52]	; 0x34

	/*Conversion sequence length*/
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 800019e:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <pa1_adc_init+0x74>)
 80001a0:	2200      	movs	r2, #0
 80001a2:	62da      	str	r2, [r3, #44]	; 0x2c


	/*Enable ADC module*/
	ADC1->CR2 |= CR2_ADON;
 80001a4:	4b06      	ldr	r3, [pc, #24]	; (80001c0 <pa1_adc_init+0x74>)
 80001a6:	689b      	ldr	r3, [r3, #8]
 80001a8:	4a05      	ldr	r2, [pc, #20]	; (80001c0 <pa1_adc_init+0x74>)
 80001aa:	f043 0301 	orr.w	r3, r3, #1
 80001ae:	6093      	str	r3, [r2, #8]

}
 80001b0:	bf00      	nop
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr
 80001b8:	40021000 	.word	0x40021000
 80001bc:	40010800 	.word	0x40010800
 80001c0:	40012400 	.word	0x40012400

080001c4 <start_conversion>:

void start_conversion(void){
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	/*Start ADC conversion*/
	ADC1->CR2 |= CR2_SWSTART;
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <start_conversion+0x18>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4a03      	ldr	r2, [pc, #12]	; (80001dc <start_conversion+0x18>)
 80001ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001d2:	6093      	str	r3, [r2, #8]
}
 80001d4:	bf00      	nop
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	40012400 	.word	0x40012400

080001e0 <adc_read>:

uint32_t adc_read(void){
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
	/*Wait for conversion to be complete*/
	while(!(ADC1->SR & SR_EOC)){}
 80001e4:	bf00      	nop
 80001e6:	4b06      	ldr	r3, [pc, #24]	; (8000200 <adc_read+0x20>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f003 0302 	and.w	r3, r3, #2
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0f9      	beq.n	80001e6 <adc_read+0x6>
	/*Read converted results*/
	return (ADC1->DR);
 80001f2:	4b03      	ldr	r3, [pc, #12]	; (8000200 <adc_read+0x20>)
 80001f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40012400 	.word	0x40012400

08000204 <main>:
#include "adc.h"
#include "uart.h"

uint32_t sensor_value = 0;

int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	pa1_adc_init();
 8000208:	f7ff ffa0 	bl	800014c <pa1_adc_init>
	uart2_tx_init();
 800020c:	f000 f8ea 	bl	80003e4 <uart2_tx_init>



	while(1){
		start_conversion();
 8000210:	f7ff ffd8 	bl	80001c4 <start_conversion>
		sensor_value = adc_read();
 8000214:	f7ff ffe4 	bl	80001e0 <adc_read>
 8000218:	4603      	mov	r3, r0
 800021a:	4a04      	ldr	r2, [pc, #16]	; (800022c <main+0x28>)
 800021c:	6013      	str	r3, [r2, #0]
		printf("Sensor value: %d \n\r", (int)sensor_value);
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <main+0x28>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4619      	mov	r1, r3
 8000224:	4802      	ldr	r0, [pc, #8]	; (8000230 <main+0x2c>)
 8000226:	f000 f9db 	bl	80005e0 <iprintf>
		start_conversion();
 800022a:	e7f1      	b.n	8000210 <main+0xc>
 800022c:	20000084 	.word	0x20000084
 8000230:	08001520 	.word	0x08001520

08000234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000238:	e7fe      	b.n	8000238 <NMI_Handler+0x4>

0800023a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800023a:	b480      	push	{r7}
 800023c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800023e:	e7fe      	b.n	800023e <HardFault_Handler+0x4>

08000240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000244:	e7fe      	b.n	8000244 <MemManage_Handler+0x4>

08000246 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000246:	b480      	push	{r7}
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800024a:	e7fe      	b.n	800024a <BusFault_Handler+0x4>

0800024c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000250:	e7fe      	b.n	8000250 <UsageFault_Handler+0x4>

08000252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000252:	b480      	push	{r7}
 8000254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000256:	bf00      	nop
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr

0800025e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800025e:	b480      	push	{r7}
 8000260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000262:	bf00      	nop
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr

0800026a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800026a:	b480      	push	{r7}
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800026e:	bf00      	nop
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr

08000276 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000276:	b580      	push	{r7, lr}
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800027a:	f000 f96d 	bl	8000558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}

08000282 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000282:	b580      	push	{r7, lr}
 8000284:	b086      	sub	sp, #24
 8000286:	af00      	add	r7, sp, #0
 8000288:	60f8      	str	r0, [r7, #12]
 800028a:	60b9      	str	r1, [r7, #8]
 800028c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800028e:	2300      	movs	r3, #0
 8000290:	617b      	str	r3, [r7, #20]
 8000292:	e00a      	b.n	80002aa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000294:	f3af 8000 	nop.w
 8000298:	4601      	mov	r1, r0
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	1c5a      	adds	r2, r3, #1
 800029e:	60ba      	str	r2, [r7, #8]
 80002a0:	b2ca      	uxtb	r2, r1
 80002a2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	3301      	adds	r3, #1
 80002a8:	617b      	str	r3, [r7, #20]
 80002aa:	697a      	ldr	r2, [r7, #20]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	dbf0      	blt.n	8000294 <_read+0x12>
	}

return len;
 80002b2:	687b      	ldr	r3, [r7, #4]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	3718      	adds	r7, #24
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b086      	sub	sp, #24
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002c8:	2300      	movs	r3, #0
 80002ca:	617b      	str	r3, [r7, #20]
 80002cc:	e009      	b.n	80002e2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	60ba      	str	r2, [r7, #8]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 f878 	bl	80003cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002dc:	697b      	ldr	r3, [r7, #20]
 80002de:	3301      	adds	r3, #1
 80002e0:	617b      	str	r3, [r7, #20]
 80002e2:	697a      	ldr	r2, [r7, #20]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	dbf1      	blt.n	80002ce <_write+0x12>
	}
	return len;
 80002ea:	687b      	ldr	r3, [r7, #4]
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3718      	adds	r7, #24
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <_close>:

int _close(int file)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	return -1;
 80002fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000300:	4618      	mov	r0, r3
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr

0800030a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800030a:	b480      	push	{r7}
 800030c:	b083      	sub	sp, #12
 800030e:	af00      	add	r7, sp, #0
 8000310:	6078      	str	r0, [r7, #4]
 8000312:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800031a:	605a      	str	r2, [r3, #4]
	return 0;
 800031c:	2300      	movs	r3, #0
}
 800031e:	4618      	mov	r0, r3
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr

08000328 <_isatty>:

int _isatty(int file)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	return 1;
 8000330:	2301      	movs	r3, #1
}
 8000332:	4618      	mov	r0, r3
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr

0800033c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
	return 0;
 8000348:	2300      	movs	r3, #0
}
 800034a:	4618      	mov	r0, r3
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <_sbrk+0x5c>)
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <_sbrk+0x60>)
 8000360:	1ad3      	subs	r3, r2, r3
 8000362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <_sbrk+0x64>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d102      	bne.n	8000376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <_sbrk+0x64>)
 8000372:	4a12      	ldr	r2, [pc, #72]	; (80003bc <_sbrk+0x68>)
 8000374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <_sbrk+0x64>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4413      	add	r3, r2
 800037e:	693a      	ldr	r2, [r7, #16]
 8000380:	429a      	cmp	r2, r3
 8000382:	d207      	bcs.n	8000394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000384:	f000 f8fa 	bl	800057c <__errno>
 8000388:	4603      	mov	r3, r0
 800038a:	220c      	movs	r2, #12
 800038c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
 8000392:	e009      	b.n	80003a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <_sbrk+0x64>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <_sbrk+0x64>)
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4413      	add	r3, r2
 80003a2:	4a05      	ldr	r2, [pc, #20]	; (80003b8 <_sbrk+0x64>)
 80003a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003a6:	68fb      	ldr	r3, [r7, #12]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3718      	adds	r7, #24
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20005000 	.word	0x20005000
 80003b4:	00000400 	.word	0x00000400
 80003b8:	20000088 	.word	0x20000088
 80003bc:	200000a0 	.word	0x200000a0

080003c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr

080003cc <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PheriphClk, uint32_t BaudRate);


void uart2_write(int ch);

int __io_putchar(int ch){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f000 f85f 	bl	8000498 <uart2_write>
	return ch;
 80003da:	687b      	ldr	r3, [r7, #4]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <uart2_tx_init>:
	/*Configure the transfer direction */
	USART2->CR1 |= CR1_TE | CR1_RE;
	/*Enable uart module */
	USART2->CR1 |= CR1_UE;
}
void uart2_tx_init(void){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	/********** Configure uart gpio pin **********/
	/*Enable clock access to gpioa */
	RCC->APB2ENR |= GPIOAEN;
 80003e8:	4b27      	ldr	r3, [pc, #156]	; (8000488 <uart2_tx_init+0xa4>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a26      	ldr	r2, [pc, #152]	; (8000488 <uart2_tx_init+0xa4>)
 80003ee:	f043 0304 	orr.w	r3, r3, #4
 80003f2:	6193      	str	r3, [r2, #24]
	/*Set PA2 mode to alternate function mode (TX/PA9, RX/PA10) */
//	AFIO->MAPR = 0x00000000;
//	AFIO->MAPR &= ~(1U << 2);
	GPIOA->CRL &= ~(1U << 15);
 80003f4:	4b25      	ldr	r3, [pc, #148]	; (800048c <uart2_tx_init+0xa8>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a24      	ldr	r2, [pc, #144]	; (800048c <uart2_tx_init+0xa8>)
 80003fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80003fe:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 14);
 8000400:	4b22      	ldr	r3, [pc, #136]	; (800048c <uart2_tx_init+0xa8>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a21      	ldr	r2, [pc, #132]	; (800048c <uart2_tx_init+0xa8>)
 8000406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800040a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 13);
 800040c:	4b1f      	ldr	r3, [pc, #124]	; (800048c <uart2_tx_init+0xa8>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a1e      	ldr	r2, [pc, #120]	; (800048c <uart2_tx_init+0xa8>)
 8000412:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000416:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 12);
 8000418:	4b1c      	ldr	r3, [pc, #112]	; (800048c <uart2_tx_init+0xa8>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a1b      	ldr	r2, [pc, #108]	; (800048c <uart2_tx_init+0xa8>)
 800041e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000422:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 11);
 8000424:	4b19      	ldr	r3, [pc, #100]	; (800048c <uart2_tx_init+0xa8>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a18      	ldr	r2, [pc, #96]	; (800048c <uart2_tx_init+0xa8>)
 800042a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800042e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 10);
 8000430:	4b16      	ldr	r3, [pc, #88]	; (800048c <uart2_tx_init+0xa8>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a15      	ldr	r2, [pc, #84]	; (800048c <uart2_tx_init+0xa8>)
 8000436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800043a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U << 9);
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <uart2_tx_init+0xa8>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a12      	ldr	r2, [pc, #72]	; (800048c <uart2_tx_init+0xa8>)
 8000442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000446:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U << 8);
 8000448:	4b10      	ldr	r3, [pc, #64]	; (800048c <uart2_tx_init+0xa8>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a0f      	ldr	r2, [pc, #60]	; (800048c <uart2_tx_init+0xa8>)
 800044e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000452:	6013      	str	r3, [r2, #0]

	/********** Configure uart module **********/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 8000454:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <uart2_tx_init+0xa4>)
 8000456:	69db      	ldr	r3, [r3, #28]
 8000458:	4a0b      	ldr	r2, [pc, #44]	; (8000488 <uart2_tx_init+0xa4>)
 800045a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800045e:	61d3      	str	r3, [r2, #28]
	/*Configure baudrate */
	//USART2->BRR = 0x0EA6;
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000464:	490a      	ldr	r1, [pc, #40]	; (8000490 <uart2_tx_init+0xac>)
 8000466:	480b      	ldr	r0, [pc, #44]	; (8000494 <uart2_tx_init+0xb0>)
 8000468:	f000 f82c 	bl	80004c4 <uart_set_baudrate>
	/*Configure the transfer direction */
	USART2->CR1 |= CR1_TE;
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <uart2_tx_init+0xb0>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	4a08      	ldr	r2, [pc, #32]	; (8000494 <uart2_tx_init+0xb0>)
 8000472:	f043 0308 	orr.w	r3, r3, #8
 8000476:	60d3      	str	r3, [r2, #12]
	/*Enable uart module */
	USART2->CR1 |= CR1_UE;
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <uart2_tx_init+0xb0>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	4a05      	ldr	r2, [pc, #20]	; (8000494 <uart2_tx_init+0xb0>)
 800047e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000482:	60d3      	str	r3, [r2, #12]
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40021000 	.word	0x40021000
 800048c:	40010800 	.word	0x40010800
 8000490:	007a1200 	.word	0x007a1200
 8000494:	40004400 	.word	0x40004400

08000498 <uart2_write>:
	while(!(USART2->SR & SR_RXNE)){}
	/*Read data*/
	return USART2->DR;
}

void uart2_write(int ch){
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty before sending again*/
	while(!(USART2->SR & SR_TXE)){}
 80004a0:	bf00      	nop
 80004a2:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <uart2_write+0x28>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d0f9      	beq.n	80004a2 <uart2_write+0xa>
	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a03      	ldr	r2, [pc, #12]	; (80004c0 <uart2_write+0x28>)
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	6053      	str	r3, [r2, #4]
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	40004400 	.word	0x40004400

080004c4 <uart_set_baudrate>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PheriphClk, uint32_t BaudRate){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PheriphClk, BaudRate);
 80004d0:	6879      	ldr	r1, [r7, #4]
 80004d2:	68b8      	ldr	r0, [r7, #8]
 80004d4:	f000 f808 	bl	80004e8 <compute_uart_bd>
 80004d8:	4603      	mov	r3, r0
 80004da:	461a      	mov	r2, r3
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	609a      	str	r2, [r3, #8]
}
 80004e0:	bf00      	nop
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PheriphClk, uint32_t BaudRate){
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
	return ( (PheriphClk + (BaudRate/2U)) / BaudRate);
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	085a      	lsrs	r2, r3, #1
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	441a      	add	r2, r3
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000500:	b29b      	uxth	r3, r3
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800050c:	480c      	ldr	r0, [pc, #48]	; (8000540 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800050e:	490d      	ldr	r1, [pc, #52]	; (8000544 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000510:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000514:	e002      	b.n	800051c <LoopCopyDataInit>

08000516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051a:	3304      	adds	r3, #4

0800051c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800051c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000520:	d3f9      	bcc.n	8000516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000524:	4c0a      	ldr	r4, [pc, #40]	; (8000550 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000528:	e001      	b.n	800052e <LoopFillZerobss>

0800052a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800052c:	3204      	adds	r2, #4

0800052e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000530:	d3fb      	bcc.n	800052a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000532:	f7ff ff45 	bl	80003c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000536:	f000 f827 	bl	8000588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053a:	f7ff fe63 	bl	8000204 <main>
  bx lr
 800053e:	4770      	bx	lr
  ldr r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000544:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000548:	080015d4 	.word	0x080015d4
  ldr r2, =_sbss
 800054c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000550:	200000a0 	.word	0x200000a0

08000554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <ADC1_2_IRQHandler>
	...

08000558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <HAL_IncTick+0x1c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	461a      	mov	r2, r3
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <HAL_IncTick+0x20>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4413      	add	r3, r2
 8000568:	4a03      	ldr	r2, [pc, #12]	; (8000578 <HAL_IncTick+0x20>)
 800056a:	6013      	str	r3, [r2, #0]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	20000000 	.word	0x20000000
 8000578:	2000008c 	.word	0x2000008c

0800057c <__errno>:
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <__errno+0x8>)
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000004 	.word	0x20000004

08000588 <__libc_init_array>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	2600      	movs	r6, #0
 800058c:	4d0c      	ldr	r5, [pc, #48]	; (80005c0 <__libc_init_array+0x38>)
 800058e:	4c0d      	ldr	r4, [pc, #52]	; (80005c4 <__libc_init_array+0x3c>)
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	10a4      	asrs	r4, r4, #2
 8000594:	42a6      	cmp	r6, r4
 8000596:	d109      	bne.n	80005ac <__libc_init_array+0x24>
 8000598:	f000 ffb6 	bl	8001508 <_init>
 800059c:	2600      	movs	r6, #0
 800059e:	4d0a      	ldr	r5, [pc, #40]	; (80005c8 <__libc_init_array+0x40>)
 80005a0:	4c0a      	ldr	r4, [pc, #40]	; (80005cc <__libc_init_array+0x44>)
 80005a2:	1b64      	subs	r4, r4, r5
 80005a4:	10a4      	asrs	r4, r4, #2
 80005a6:	42a6      	cmp	r6, r4
 80005a8:	d105      	bne.n	80005b6 <__libc_init_array+0x2e>
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b0:	4798      	blx	r3
 80005b2:	3601      	adds	r6, #1
 80005b4:	e7ee      	b.n	8000594 <__libc_init_array+0xc>
 80005b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ba:	4798      	blx	r3
 80005bc:	3601      	adds	r6, #1
 80005be:	e7f2      	b.n	80005a6 <__libc_init_array+0x1e>
 80005c0:	080015cc 	.word	0x080015cc
 80005c4:	080015cc 	.word	0x080015cc
 80005c8:	080015cc 	.word	0x080015cc
 80005cc:	080015d0 	.word	0x080015d0

080005d0 <memset>:
 80005d0:	4603      	mov	r3, r0
 80005d2:	4402      	add	r2, r0
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d100      	bne.n	80005da <memset+0xa>
 80005d8:	4770      	bx	lr
 80005da:	f803 1b01 	strb.w	r1, [r3], #1
 80005de:	e7f9      	b.n	80005d4 <memset+0x4>

080005e0 <iprintf>:
 80005e0:	b40f      	push	{r0, r1, r2, r3}
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <iprintf+0x2c>)
 80005e4:	b513      	push	{r0, r1, r4, lr}
 80005e6:	681c      	ldr	r4, [r3, #0]
 80005e8:	b124      	cbz	r4, 80005f4 <iprintf+0x14>
 80005ea:	69a3      	ldr	r3, [r4, #24]
 80005ec:	b913      	cbnz	r3, 80005f4 <iprintf+0x14>
 80005ee:	4620      	mov	r0, r4
 80005f0:	f000 f866 	bl	80006c0 <__sinit>
 80005f4:	ab05      	add	r3, sp, #20
 80005f6:	4620      	mov	r0, r4
 80005f8:	9a04      	ldr	r2, [sp, #16]
 80005fa:	68a1      	ldr	r1, [r4, #8]
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	f000 f9bb 	bl	8000978 <_vfiprintf_r>
 8000602:	b002      	add	sp, #8
 8000604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000608:	b004      	add	sp, #16
 800060a:	4770      	bx	lr
 800060c:	20000004 	.word	0x20000004

08000610 <std>:
 8000610:	2300      	movs	r3, #0
 8000612:	b510      	push	{r4, lr}
 8000614:	4604      	mov	r4, r0
 8000616:	e9c0 3300 	strd	r3, r3, [r0]
 800061a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800061e:	6083      	str	r3, [r0, #8]
 8000620:	8181      	strh	r1, [r0, #12]
 8000622:	6643      	str	r3, [r0, #100]	; 0x64
 8000624:	81c2      	strh	r2, [r0, #14]
 8000626:	6183      	str	r3, [r0, #24]
 8000628:	4619      	mov	r1, r3
 800062a:	2208      	movs	r2, #8
 800062c:	305c      	adds	r0, #92	; 0x5c
 800062e:	f7ff ffcf 	bl	80005d0 <memset>
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <std+0x38>)
 8000634:	6224      	str	r4, [r4, #32]
 8000636:	6263      	str	r3, [r4, #36]	; 0x24
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <std+0x3c>)
 800063a:	62a3      	str	r3, [r4, #40]	; 0x28
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <std+0x40>)
 800063e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <std+0x44>)
 8000642:	6323      	str	r3, [r4, #48]	; 0x30
 8000644:	bd10      	pop	{r4, pc}
 8000646:	bf00      	nop
 8000648:	08000f25 	.word	0x08000f25
 800064c:	08000f47 	.word	0x08000f47
 8000650:	08000f7f 	.word	0x08000f7f
 8000654:	08000fa3 	.word	0x08000fa3

08000658 <_cleanup_r>:
 8000658:	4901      	ldr	r1, [pc, #4]	; (8000660 <_cleanup_r+0x8>)
 800065a:	f000 b8af 	b.w	80007bc <_fwalk_reent>
 800065e:	bf00      	nop
 8000660:	08001275 	.word	0x08001275

08000664 <__sfmoreglue>:
 8000664:	2268      	movs	r2, #104	; 0x68
 8000666:	b570      	push	{r4, r5, r6, lr}
 8000668:	1e4d      	subs	r5, r1, #1
 800066a:	4355      	muls	r5, r2
 800066c:	460e      	mov	r6, r1
 800066e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000672:	f000 f8e5 	bl	8000840 <_malloc_r>
 8000676:	4604      	mov	r4, r0
 8000678:	b140      	cbz	r0, 800068c <__sfmoreglue+0x28>
 800067a:	2100      	movs	r1, #0
 800067c:	e9c0 1600 	strd	r1, r6, [r0]
 8000680:	300c      	adds	r0, #12
 8000682:	60a0      	str	r0, [r4, #8]
 8000684:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000688:	f7ff ffa2 	bl	80005d0 <memset>
 800068c:	4620      	mov	r0, r4
 800068e:	bd70      	pop	{r4, r5, r6, pc}

08000690 <__sfp_lock_acquire>:
 8000690:	4801      	ldr	r0, [pc, #4]	; (8000698 <__sfp_lock_acquire+0x8>)
 8000692:	f000 b8b3 	b.w	80007fc <__retarget_lock_acquire_recursive>
 8000696:	bf00      	nop
 8000698:	20000091 	.word	0x20000091

0800069c <__sfp_lock_release>:
 800069c:	4801      	ldr	r0, [pc, #4]	; (80006a4 <__sfp_lock_release+0x8>)
 800069e:	f000 b8ae 	b.w	80007fe <__retarget_lock_release_recursive>
 80006a2:	bf00      	nop
 80006a4:	20000091 	.word	0x20000091

080006a8 <__sinit_lock_acquire>:
 80006a8:	4801      	ldr	r0, [pc, #4]	; (80006b0 <__sinit_lock_acquire+0x8>)
 80006aa:	f000 b8a7 	b.w	80007fc <__retarget_lock_acquire_recursive>
 80006ae:	bf00      	nop
 80006b0:	20000092 	.word	0x20000092

080006b4 <__sinit_lock_release>:
 80006b4:	4801      	ldr	r0, [pc, #4]	; (80006bc <__sinit_lock_release+0x8>)
 80006b6:	f000 b8a2 	b.w	80007fe <__retarget_lock_release_recursive>
 80006ba:	bf00      	nop
 80006bc:	20000092 	.word	0x20000092

080006c0 <__sinit>:
 80006c0:	b510      	push	{r4, lr}
 80006c2:	4604      	mov	r4, r0
 80006c4:	f7ff fff0 	bl	80006a8 <__sinit_lock_acquire>
 80006c8:	69a3      	ldr	r3, [r4, #24]
 80006ca:	b11b      	cbz	r3, 80006d4 <__sinit+0x14>
 80006cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006d0:	f7ff bff0 	b.w	80006b4 <__sinit_lock_release>
 80006d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80006d8:	6523      	str	r3, [r4, #80]	; 0x50
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <__sinit+0x68>)
 80006dc:	4a13      	ldr	r2, [pc, #76]	; (800072c <__sinit+0x6c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80006e2:	42a3      	cmp	r3, r4
 80006e4:	bf08      	it	eq
 80006e6:	2301      	moveq	r3, #1
 80006e8:	4620      	mov	r0, r4
 80006ea:	bf08      	it	eq
 80006ec:	61a3      	streq	r3, [r4, #24]
 80006ee:	f000 f81f 	bl	8000730 <__sfp>
 80006f2:	6060      	str	r0, [r4, #4]
 80006f4:	4620      	mov	r0, r4
 80006f6:	f000 f81b 	bl	8000730 <__sfp>
 80006fa:	60a0      	str	r0, [r4, #8]
 80006fc:	4620      	mov	r0, r4
 80006fe:	f000 f817 	bl	8000730 <__sfp>
 8000702:	2200      	movs	r2, #0
 8000704:	2104      	movs	r1, #4
 8000706:	60e0      	str	r0, [r4, #12]
 8000708:	6860      	ldr	r0, [r4, #4]
 800070a:	f7ff ff81 	bl	8000610 <std>
 800070e:	2201      	movs	r2, #1
 8000710:	2109      	movs	r1, #9
 8000712:	68a0      	ldr	r0, [r4, #8]
 8000714:	f7ff ff7c 	bl	8000610 <std>
 8000718:	2202      	movs	r2, #2
 800071a:	2112      	movs	r1, #18
 800071c:	68e0      	ldr	r0, [r4, #12]
 800071e:	f7ff ff77 	bl	8000610 <std>
 8000722:	2301      	movs	r3, #1
 8000724:	61a3      	str	r3, [r4, #24]
 8000726:	e7d1      	b.n	80006cc <__sinit+0xc>
 8000728:	08001534 	.word	0x08001534
 800072c:	08000659 	.word	0x08000659

08000730 <__sfp>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	4607      	mov	r7, r0
 8000734:	f7ff ffac 	bl	8000690 <__sfp_lock_acquire>
 8000738:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <__sfp+0x84>)
 800073a:	681e      	ldr	r6, [r3, #0]
 800073c:	69b3      	ldr	r3, [r6, #24]
 800073e:	b913      	cbnz	r3, 8000746 <__sfp+0x16>
 8000740:	4630      	mov	r0, r6
 8000742:	f7ff ffbd 	bl	80006c0 <__sinit>
 8000746:	3648      	adds	r6, #72	; 0x48
 8000748:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800074c:	3b01      	subs	r3, #1
 800074e:	d503      	bpl.n	8000758 <__sfp+0x28>
 8000750:	6833      	ldr	r3, [r6, #0]
 8000752:	b30b      	cbz	r3, 8000798 <__sfp+0x68>
 8000754:	6836      	ldr	r6, [r6, #0]
 8000756:	e7f7      	b.n	8000748 <__sfp+0x18>
 8000758:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800075c:	b9d5      	cbnz	r5, 8000794 <__sfp+0x64>
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <__sfp+0x88>)
 8000760:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000764:	60e3      	str	r3, [r4, #12]
 8000766:	6665      	str	r5, [r4, #100]	; 0x64
 8000768:	f000 f847 	bl	80007fa <__retarget_lock_init_recursive>
 800076c:	f7ff ff96 	bl	800069c <__sfp_lock_release>
 8000770:	2208      	movs	r2, #8
 8000772:	4629      	mov	r1, r5
 8000774:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000778:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800077c:	6025      	str	r5, [r4, #0]
 800077e:	61a5      	str	r5, [r4, #24]
 8000780:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000784:	f7ff ff24 	bl	80005d0 <memset>
 8000788:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800078c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000790:	4620      	mov	r0, r4
 8000792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000794:	3468      	adds	r4, #104	; 0x68
 8000796:	e7d9      	b.n	800074c <__sfp+0x1c>
 8000798:	2104      	movs	r1, #4
 800079a:	4638      	mov	r0, r7
 800079c:	f7ff ff62 	bl	8000664 <__sfmoreglue>
 80007a0:	4604      	mov	r4, r0
 80007a2:	6030      	str	r0, [r6, #0]
 80007a4:	2800      	cmp	r0, #0
 80007a6:	d1d5      	bne.n	8000754 <__sfp+0x24>
 80007a8:	f7ff ff78 	bl	800069c <__sfp_lock_release>
 80007ac:	230c      	movs	r3, #12
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	e7ee      	b.n	8000790 <__sfp+0x60>
 80007b2:	bf00      	nop
 80007b4:	08001534 	.word	0x08001534
 80007b8:	ffff0001 	.word	0xffff0001

080007bc <_fwalk_reent>:
 80007bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007c0:	4606      	mov	r6, r0
 80007c2:	4688      	mov	r8, r1
 80007c4:	2700      	movs	r7, #0
 80007c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80007ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007ce:	f1b9 0901 	subs.w	r9, r9, #1
 80007d2:	d505      	bpl.n	80007e0 <_fwalk_reent+0x24>
 80007d4:	6824      	ldr	r4, [r4, #0]
 80007d6:	2c00      	cmp	r4, #0
 80007d8:	d1f7      	bne.n	80007ca <_fwalk_reent+0xe>
 80007da:	4638      	mov	r0, r7
 80007dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007e0:	89ab      	ldrh	r3, [r5, #12]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d907      	bls.n	80007f6 <_fwalk_reent+0x3a>
 80007e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007ea:	3301      	adds	r3, #1
 80007ec:	d003      	beq.n	80007f6 <_fwalk_reent+0x3a>
 80007ee:	4629      	mov	r1, r5
 80007f0:	4630      	mov	r0, r6
 80007f2:	47c0      	blx	r8
 80007f4:	4307      	orrs	r7, r0
 80007f6:	3568      	adds	r5, #104	; 0x68
 80007f8:	e7e9      	b.n	80007ce <_fwalk_reent+0x12>

080007fa <__retarget_lock_init_recursive>:
 80007fa:	4770      	bx	lr

080007fc <__retarget_lock_acquire_recursive>:
 80007fc:	4770      	bx	lr

080007fe <__retarget_lock_release_recursive>:
 80007fe:	4770      	bx	lr

08000800 <sbrk_aligned>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	4e0e      	ldr	r6, [pc, #56]	; (800083c <sbrk_aligned+0x3c>)
 8000804:	460c      	mov	r4, r1
 8000806:	6831      	ldr	r1, [r6, #0]
 8000808:	4605      	mov	r5, r0
 800080a:	b911      	cbnz	r1, 8000812 <sbrk_aligned+0x12>
 800080c:	f000 fb7a 	bl	8000f04 <_sbrk_r>
 8000810:	6030      	str	r0, [r6, #0]
 8000812:	4621      	mov	r1, r4
 8000814:	4628      	mov	r0, r5
 8000816:	f000 fb75 	bl	8000f04 <_sbrk_r>
 800081a:	1c43      	adds	r3, r0, #1
 800081c:	d00a      	beq.n	8000834 <sbrk_aligned+0x34>
 800081e:	1cc4      	adds	r4, r0, #3
 8000820:	f024 0403 	bic.w	r4, r4, #3
 8000824:	42a0      	cmp	r0, r4
 8000826:	d007      	beq.n	8000838 <sbrk_aligned+0x38>
 8000828:	1a21      	subs	r1, r4, r0
 800082a:	4628      	mov	r0, r5
 800082c:	f000 fb6a 	bl	8000f04 <_sbrk_r>
 8000830:	3001      	adds	r0, #1
 8000832:	d101      	bne.n	8000838 <sbrk_aligned+0x38>
 8000834:	f04f 34ff 	mov.w	r4, #4294967295
 8000838:	4620      	mov	r0, r4
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	20000098 	.word	0x20000098

08000840 <_malloc_r>:
 8000840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000844:	1ccd      	adds	r5, r1, #3
 8000846:	f025 0503 	bic.w	r5, r5, #3
 800084a:	3508      	adds	r5, #8
 800084c:	2d0c      	cmp	r5, #12
 800084e:	bf38      	it	cc
 8000850:	250c      	movcc	r5, #12
 8000852:	2d00      	cmp	r5, #0
 8000854:	4607      	mov	r7, r0
 8000856:	db01      	blt.n	800085c <_malloc_r+0x1c>
 8000858:	42a9      	cmp	r1, r5
 800085a:	d905      	bls.n	8000868 <_malloc_r+0x28>
 800085c:	230c      	movs	r3, #12
 800085e:	2600      	movs	r6, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4630      	mov	r0, r6
 8000864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000868:	4e2e      	ldr	r6, [pc, #184]	; (8000924 <_malloc_r+0xe4>)
 800086a:	f000 fdc5 	bl	80013f8 <__malloc_lock>
 800086e:	6833      	ldr	r3, [r6, #0]
 8000870:	461c      	mov	r4, r3
 8000872:	bb34      	cbnz	r4, 80008c2 <_malloc_r+0x82>
 8000874:	4629      	mov	r1, r5
 8000876:	4638      	mov	r0, r7
 8000878:	f7ff ffc2 	bl	8000800 <sbrk_aligned>
 800087c:	1c43      	adds	r3, r0, #1
 800087e:	4604      	mov	r4, r0
 8000880:	d14d      	bne.n	800091e <_malloc_r+0xde>
 8000882:	6834      	ldr	r4, [r6, #0]
 8000884:	4626      	mov	r6, r4
 8000886:	2e00      	cmp	r6, #0
 8000888:	d140      	bne.n	800090c <_malloc_r+0xcc>
 800088a:	6823      	ldr	r3, [r4, #0]
 800088c:	4631      	mov	r1, r6
 800088e:	4638      	mov	r0, r7
 8000890:	eb04 0803 	add.w	r8, r4, r3
 8000894:	f000 fb36 	bl	8000f04 <_sbrk_r>
 8000898:	4580      	cmp	r8, r0
 800089a:	d13a      	bne.n	8000912 <_malloc_r+0xd2>
 800089c:	6821      	ldr	r1, [r4, #0]
 800089e:	3503      	adds	r5, #3
 80008a0:	1a6d      	subs	r5, r5, r1
 80008a2:	f025 0503 	bic.w	r5, r5, #3
 80008a6:	3508      	adds	r5, #8
 80008a8:	2d0c      	cmp	r5, #12
 80008aa:	bf38      	it	cc
 80008ac:	250c      	movcc	r5, #12
 80008ae:	4638      	mov	r0, r7
 80008b0:	4629      	mov	r1, r5
 80008b2:	f7ff ffa5 	bl	8000800 <sbrk_aligned>
 80008b6:	3001      	adds	r0, #1
 80008b8:	d02b      	beq.n	8000912 <_malloc_r+0xd2>
 80008ba:	6823      	ldr	r3, [r4, #0]
 80008bc:	442b      	add	r3, r5
 80008be:	6023      	str	r3, [r4, #0]
 80008c0:	e00e      	b.n	80008e0 <_malloc_r+0xa0>
 80008c2:	6822      	ldr	r2, [r4, #0]
 80008c4:	1b52      	subs	r2, r2, r5
 80008c6:	d41e      	bmi.n	8000906 <_malloc_r+0xc6>
 80008c8:	2a0b      	cmp	r2, #11
 80008ca:	d916      	bls.n	80008fa <_malloc_r+0xba>
 80008cc:	1961      	adds	r1, r4, r5
 80008ce:	42a3      	cmp	r3, r4
 80008d0:	6025      	str	r5, [r4, #0]
 80008d2:	bf18      	it	ne
 80008d4:	6059      	strne	r1, [r3, #4]
 80008d6:	6863      	ldr	r3, [r4, #4]
 80008d8:	bf08      	it	eq
 80008da:	6031      	streq	r1, [r6, #0]
 80008dc:	5162      	str	r2, [r4, r5]
 80008de:	604b      	str	r3, [r1, #4]
 80008e0:	4638      	mov	r0, r7
 80008e2:	f104 060b 	add.w	r6, r4, #11
 80008e6:	f000 fd8d 	bl	8001404 <__malloc_unlock>
 80008ea:	f026 0607 	bic.w	r6, r6, #7
 80008ee:	1d23      	adds	r3, r4, #4
 80008f0:	1af2      	subs	r2, r6, r3
 80008f2:	d0b6      	beq.n	8000862 <_malloc_r+0x22>
 80008f4:	1b9b      	subs	r3, r3, r6
 80008f6:	50a3      	str	r3, [r4, r2]
 80008f8:	e7b3      	b.n	8000862 <_malloc_r+0x22>
 80008fa:	6862      	ldr	r2, [r4, #4]
 80008fc:	42a3      	cmp	r3, r4
 80008fe:	bf0c      	ite	eq
 8000900:	6032      	streq	r2, [r6, #0]
 8000902:	605a      	strne	r2, [r3, #4]
 8000904:	e7ec      	b.n	80008e0 <_malloc_r+0xa0>
 8000906:	4623      	mov	r3, r4
 8000908:	6864      	ldr	r4, [r4, #4]
 800090a:	e7b2      	b.n	8000872 <_malloc_r+0x32>
 800090c:	4634      	mov	r4, r6
 800090e:	6876      	ldr	r6, [r6, #4]
 8000910:	e7b9      	b.n	8000886 <_malloc_r+0x46>
 8000912:	230c      	movs	r3, #12
 8000914:	4638      	mov	r0, r7
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	f000 fd74 	bl	8001404 <__malloc_unlock>
 800091c:	e7a1      	b.n	8000862 <_malloc_r+0x22>
 800091e:	6025      	str	r5, [r4, #0]
 8000920:	e7de      	b.n	80008e0 <_malloc_r+0xa0>
 8000922:	bf00      	nop
 8000924:	20000094 	.word	0x20000094

08000928 <__sfputc_r>:
 8000928:	6893      	ldr	r3, [r2, #8]
 800092a:	b410      	push	{r4}
 800092c:	3b01      	subs	r3, #1
 800092e:	2b00      	cmp	r3, #0
 8000930:	6093      	str	r3, [r2, #8]
 8000932:	da07      	bge.n	8000944 <__sfputc_r+0x1c>
 8000934:	6994      	ldr	r4, [r2, #24]
 8000936:	42a3      	cmp	r3, r4
 8000938:	db01      	blt.n	800093e <__sfputc_r+0x16>
 800093a:	290a      	cmp	r1, #10
 800093c:	d102      	bne.n	8000944 <__sfputc_r+0x1c>
 800093e:	bc10      	pop	{r4}
 8000940:	f000 bb34 	b.w	8000fac <__swbuf_r>
 8000944:	6813      	ldr	r3, [r2, #0]
 8000946:	1c58      	adds	r0, r3, #1
 8000948:	6010      	str	r0, [r2, #0]
 800094a:	7019      	strb	r1, [r3, #0]
 800094c:	4608      	mov	r0, r1
 800094e:	bc10      	pop	{r4}
 8000950:	4770      	bx	lr

08000952 <__sfputs_r>:
 8000952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000954:	4606      	mov	r6, r0
 8000956:	460f      	mov	r7, r1
 8000958:	4614      	mov	r4, r2
 800095a:	18d5      	adds	r5, r2, r3
 800095c:	42ac      	cmp	r4, r5
 800095e:	d101      	bne.n	8000964 <__sfputs_r+0x12>
 8000960:	2000      	movs	r0, #0
 8000962:	e007      	b.n	8000974 <__sfputs_r+0x22>
 8000964:	463a      	mov	r2, r7
 8000966:	4630      	mov	r0, r6
 8000968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800096c:	f7ff ffdc 	bl	8000928 <__sfputc_r>
 8000970:	1c43      	adds	r3, r0, #1
 8000972:	d1f3      	bne.n	800095c <__sfputs_r+0xa>
 8000974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000978 <_vfiprintf_r>:
 8000978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800097c:	460d      	mov	r5, r1
 800097e:	4614      	mov	r4, r2
 8000980:	4698      	mov	r8, r3
 8000982:	4606      	mov	r6, r0
 8000984:	b09d      	sub	sp, #116	; 0x74
 8000986:	b118      	cbz	r0, 8000990 <_vfiprintf_r+0x18>
 8000988:	6983      	ldr	r3, [r0, #24]
 800098a:	b90b      	cbnz	r3, 8000990 <_vfiprintf_r+0x18>
 800098c:	f7ff fe98 	bl	80006c0 <__sinit>
 8000990:	4b89      	ldr	r3, [pc, #548]	; (8000bb8 <_vfiprintf_r+0x240>)
 8000992:	429d      	cmp	r5, r3
 8000994:	d11b      	bne.n	80009ce <_vfiprintf_r+0x56>
 8000996:	6875      	ldr	r5, [r6, #4]
 8000998:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800099a:	07d9      	lsls	r1, r3, #31
 800099c:	d405      	bmi.n	80009aa <_vfiprintf_r+0x32>
 800099e:	89ab      	ldrh	r3, [r5, #12]
 80009a0:	059a      	lsls	r2, r3, #22
 80009a2:	d402      	bmi.n	80009aa <_vfiprintf_r+0x32>
 80009a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80009a6:	f7ff ff29 	bl	80007fc <__retarget_lock_acquire_recursive>
 80009aa:	89ab      	ldrh	r3, [r5, #12]
 80009ac:	071b      	lsls	r3, r3, #28
 80009ae:	d501      	bpl.n	80009b4 <_vfiprintf_r+0x3c>
 80009b0:	692b      	ldr	r3, [r5, #16]
 80009b2:	b9eb      	cbnz	r3, 80009f0 <_vfiprintf_r+0x78>
 80009b4:	4629      	mov	r1, r5
 80009b6:	4630      	mov	r0, r6
 80009b8:	f000 fb5c 	bl	8001074 <__swsetup_r>
 80009bc:	b1c0      	cbz	r0, 80009f0 <_vfiprintf_r+0x78>
 80009be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80009c0:	07dc      	lsls	r4, r3, #31
 80009c2:	d50e      	bpl.n	80009e2 <_vfiprintf_r+0x6a>
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	b01d      	add	sp, #116	; 0x74
 80009ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009ce:	4b7b      	ldr	r3, [pc, #492]	; (8000bbc <_vfiprintf_r+0x244>)
 80009d0:	429d      	cmp	r5, r3
 80009d2:	d101      	bne.n	80009d8 <_vfiprintf_r+0x60>
 80009d4:	68b5      	ldr	r5, [r6, #8]
 80009d6:	e7df      	b.n	8000998 <_vfiprintf_r+0x20>
 80009d8:	4b79      	ldr	r3, [pc, #484]	; (8000bc0 <_vfiprintf_r+0x248>)
 80009da:	429d      	cmp	r5, r3
 80009dc:	bf08      	it	eq
 80009de:	68f5      	ldreq	r5, [r6, #12]
 80009e0:	e7da      	b.n	8000998 <_vfiprintf_r+0x20>
 80009e2:	89ab      	ldrh	r3, [r5, #12]
 80009e4:	0598      	lsls	r0, r3, #22
 80009e6:	d4ed      	bmi.n	80009c4 <_vfiprintf_r+0x4c>
 80009e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80009ea:	f7ff ff08 	bl	80007fe <__retarget_lock_release_recursive>
 80009ee:	e7e9      	b.n	80009c4 <_vfiprintf_r+0x4c>
 80009f0:	2300      	movs	r3, #0
 80009f2:	9309      	str	r3, [sp, #36]	; 0x24
 80009f4:	2320      	movs	r3, #32
 80009f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80009fa:	2330      	movs	r3, #48	; 0x30
 80009fc:	f04f 0901 	mov.w	r9, #1
 8000a00:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a04:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000bc4 <_vfiprintf_r+0x24c>
 8000a08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a0c:	4623      	mov	r3, r4
 8000a0e:	469a      	mov	sl, r3
 8000a10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a14:	b10a      	cbz	r2, 8000a1a <_vfiprintf_r+0xa2>
 8000a16:	2a25      	cmp	r2, #37	; 0x25
 8000a18:	d1f9      	bne.n	8000a0e <_vfiprintf_r+0x96>
 8000a1a:	ebba 0b04 	subs.w	fp, sl, r4
 8000a1e:	d00b      	beq.n	8000a38 <_vfiprintf_r+0xc0>
 8000a20:	465b      	mov	r3, fp
 8000a22:	4622      	mov	r2, r4
 8000a24:	4629      	mov	r1, r5
 8000a26:	4630      	mov	r0, r6
 8000a28:	f7ff ff93 	bl	8000952 <__sfputs_r>
 8000a2c:	3001      	adds	r0, #1
 8000a2e:	f000 80aa 	beq.w	8000b86 <_vfiprintf_r+0x20e>
 8000a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000a34:	445a      	add	r2, fp
 8000a36:	9209      	str	r2, [sp, #36]	; 0x24
 8000a38:	f89a 3000 	ldrb.w	r3, [sl]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f000 80a2 	beq.w	8000b86 <_vfiprintf_r+0x20e>
 8000a42:	2300      	movs	r3, #0
 8000a44:	f04f 32ff 	mov.w	r2, #4294967295
 8000a48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a4c:	f10a 0a01 	add.w	sl, sl, #1
 8000a50:	9304      	str	r3, [sp, #16]
 8000a52:	9307      	str	r3, [sp, #28]
 8000a54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000a58:	931a      	str	r3, [sp, #104]	; 0x68
 8000a5a:	4654      	mov	r4, sl
 8000a5c:	2205      	movs	r2, #5
 8000a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a62:	4858      	ldr	r0, [pc, #352]	; (8000bc4 <_vfiprintf_r+0x24c>)
 8000a64:	f000 fcba 	bl	80013dc <memchr>
 8000a68:	9a04      	ldr	r2, [sp, #16]
 8000a6a:	b9d8      	cbnz	r0, 8000aa4 <_vfiprintf_r+0x12c>
 8000a6c:	06d1      	lsls	r1, r2, #27
 8000a6e:	bf44      	itt	mi
 8000a70:	2320      	movmi	r3, #32
 8000a72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a76:	0713      	lsls	r3, r2, #28
 8000a78:	bf44      	itt	mi
 8000a7a:	232b      	movmi	r3, #43	; 0x2b
 8000a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a80:	f89a 3000 	ldrb.w	r3, [sl]
 8000a84:	2b2a      	cmp	r3, #42	; 0x2a
 8000a86:	d015      	beq.n	8000ab4 <_vfiprintf_r+0x13c>
 8000a88:	4654      	mov	r4, sl
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f04f 0c0a 	mov.w	ip, #10
 8000a90:	9a07      	ldr	r2, [sp, #28]
 8000a92:	4621      	mov	r1, r4
 8000a94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a98:	3b30      	subs	r3, #48	; 0x30
 8000a9a:	2b09      	cmp	r3, #9
 8000a9c:	d94e      	bls.n	8000b3c <_vfiprintf_r+0x1c4>
 8000a9e:	b1b0      	cbz	r0, 8000ace <_vfiprintf_r+0x156>
 8000aa0:	9207      	str	r2, [sp, #28]
 8000aa2:	e014      	b.n	8000ace <_vfiprintf_r+0x156>
 8000aa4:	eba0 0308 	sub.w	r3, r0, r8
 8000aa8:	fa09 f303 	lsl.w	r3, r9, r3
 8000aac:	4313      	orrs	r3, r2
 8000aae:	46a2      	mov	sl, r4
 8000ab0:	9304      	str	r3, [sp, #16]
 8000ab2:	e7d2      	b.n	8000a5a <_vfiprintf_r+0xe2>
 8000ab4:	9b03      	ldr	r3, [sp, #12]
 8000ab6:	1d19      	adds	r1, r3, #4
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	9103      	str	r1, [sp, #12]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	bfbb      	ittet	lt
 8000ac0:	425b      	neglt	r3, r3
 8000ac2:	f042 0202 	orrlt.w	r2, r2, #2
 8000ac6:	9307      	strge	r3, [sp, #28]
 8000ac8:	9307      	strlt	r3, [sp, #28]
 8000aca:	bfb8      	it	lt
 8000acc:	9204      	strlt	r2, [sp, #16]
 8000ace:	7823      	ldrb	r3, [r4, #0]
 8000ad0:	2b2e      	cmp	r3, #46	; 0x2e
 8000ad2:	d10c      	bne.n	8000aee <_vfiprintf_r+0x176>
 8000ad4:	7863      	ldrb	r3, [r4, #1]
 8000ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8000ad8:	d135      	bne.n	8000b46 <_vfiprintf_r+0x1ce>
 8000ada:	9b03      	ldr	r3, [sp, #12]
 8000adc:	3402      	adds	r4, #2
 8000ade:	1d1a      	adds	r2, r3, #4
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	9203      	str	r2, [sp, #12]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bfb8      	it	lt
 8000ae8:	f04f 33ff 	movlt.w	r3, #4294967295
 8000aec:	9305      	str	r3, [sp, #20]
 8000aee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8000bc8 <_vfiprintf_r+0x250>
 8000af2:	2203      	movs	r2, #3
 8000af4:	4650      	mov	r0, sl
 8000af6:	7821      	ldrb	r1, [r4, #0]
 8000af8:	f000 fc70 	bl	80013dc <memchr>
 8000afc:	b140      	cbz	r0, 8000b10 <_vfiprintf_r+0x198>
 8000afe:	2340      	movs	r3, #64	; 0x40
 8000b00:	eba0 000a 	sub.w	r0, r0, sl
 8000b04:	fa03 f000 	lsl.w	r0, r3, r0
 8000b08:	9b04      	ldr	r3, [sp, #16]
 8000b0a:	3401      	adds	r4, #1
 8000b0c:	4303      	orrs	r3, r0
 8000b0e:	9304      	str	r3, [sp, #16]
 8000b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b14:	2206      	movs	r2, #6
 8000b16:	482d      	ldr	r0, [pc, #180]	; (8000bcc <_vfiprintf_r+0x254>)
 8000b18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000b1c:	f000 fc5e 	bl	80013dc <memchr>
 8000b20:	2800      	cmp	r0, #0
 8000b22:	d03f      	beq.n	8000ba4 <_vfiprintf_r+0x22c>
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <_vfiprintf_r+0x258>)
 8000b26:	bb1b      	cbnz	r3, 8000b70 <_vfiprintf_r+0x1f8>
 8000b28:	9b03      	ldr	r3, [sp, #12]
 8000b2a:	3307      	adds	r3, #7
 8000b2c:	f023 0307 	bic.w	r3, r3, #7
 8000b30:	3308      	adds	r3, #8
 8000b32:	9303      	str	r3, [sp, #12]
 8000b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b36:	443b      	add	r3, r7
 8000b38:	9309      	str	r3, [sp, #36]	; 0x24
 8000b3a:	e767      	b.n	8000a0c <_vfiprintf_r+0x94>
 8000b3c:	460c      	mov	r4, r1
 8000b3e:	2001      	movs	r0, #1
 8000b40:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b44:	e7a5      	b.n	8000a92 <_vfiprintf_r+0x11a>
 8000b46:	2300      	movs	r3, #0
 8000b48:	f04f 0c0a 	mov.w	ip, #10
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	3401      	adds	r4, #1
 8000b50:	9305      	str	r3, [sp, #20]
 8000b52:	4620      	mov	r0, r4
 8000b54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b58:	3a30      	subs	r2, #48	; 0x30
 8000b5a:	2a09      	cmp	r2, #9
 8000b5c:	d903      	bls.n	8000b66 <_vfiprintf_r+0x1ee>
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d0c5      	beq.n	8000aee <_vfiprintf_r+0x176>
 8000b62:	9105      	str	r1, [sp, #20]
 8000b64:	e7c3      	b.n	8000aee <_vfiprintf_r+0x176>
 8000b66:	4604      	mov	r4, r0
 8000b68:	2301      	movs	r3, #1
 8000b6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b6e:	e7f0      	b.n	8000b52 <_vfiprintf_r+0x1da>
 8000b70:	ab03      	add	r3, sp, #12
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	462a      	mov	r2, r5
 8000b76:	4630      	mov	r0, r6
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <_vfiprintf_r+0x25c>)
 8000b7a:	a904      	add	r1, sp, #16
 8000b7c:	f3af 8000 	nop.w
 8000b80:	4607      	mov	r7, r0
 8000b82:	1c78      	adds	r0, r7, #1
 8000b84:	d1d6      	bne.n	8000b34 <_vfiprintf_r+0x1bc>
 8000b86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b88:	07d9      	lsls	r1, r3, #31
 8000b8a:	d405      	bmi.n	8000b98 <_vfiprintf_r+0x220>
 8000b8c:	89ab      	ldrh	r3, [r5, #12]
 8000b8e:	059a      	lsls	r2, r3, #22
 8000b90:	d402      	bmi.n	8000b98 <_vfiprintf_r+0x220>
 8000b92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b94:	f7ff fe33 	bl	80007fe <__retarget_lock_release_recursive>
 8000b98:	89ab      	ldrh	r3, [r5, #12]
 8000b9a:	065b      	lsls	r3, r3, #25
 8000b9c:	f53f af12 	bmi.w	80009c4 <_vfiprintf_r+0x4c>
 8000ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ba2:	e711      	b.n	80009c8 <_vfiprintf_r+0x50>
 8000ba4:	ab03      	add	r3, sp, #12
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	462a      	mov	r2, r5
 8000baa:	4630      	mov	r0, r6
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <_vfiprintf_r+0x25c>)
 8000bae:	a904      	add	r1, sp, #16
 8000bb0:	f000 f882 	bl	8000cb8 <_printf_i>
 8000bb4:	e7e4      	b.n	8000b80 <_vfiprintf_r+0x208>
 8000bb6:	bf00      	nop
 8000bb8:	08001558 	.word	0x08001558
 8000bbc:	08001578 	.word	0x08001578
 8000bc0:	08001538 	.word	0x08001538
 8000bc4:	08001598 	.word	0x08001598
 8000bc8:	0800159e 	.word	0x0800159e
 8000bcc:	080015a2 	.word	0x080015a2
 8000bd0:	00000000 	.word	0x00000000
 8000bd4:	08000953 	.word	0x08000953

08000bd8 <_printf_common>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	4616      	mov	r6, r2
 8000bde:	4699      	mov	r9, r3
 8000be0:	688a      	ldr	r2, [r1, #8]
 8000be2:	690b      	ldr	r3, [r1, #16]
 8000be4:	4607      	mov	r7, r0
 8000be6:	4293      	cmp	r3, r2
 8000be8:	bfb8      	it	lt
 8000bea:	4613      	movlt	r3, r2
 8000bec:	6033      	str	r3, [r6, #0]
 8000bee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000bf2:	460c      	mov	r4, r1
 8000bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000bf8:	b10a      	cbz	r2, 8000bfe <_printf_common+0x26>
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	6033      	str	r3, [r6, #0]
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	0699      	lsls	r1, r3, #26
 8000c02:	bf42      	ittt	mi
 8000c04:	6833      	ldrmi	r3, [r6, #0]
 8000c06:	3302      	addmi	r3, #2
 8000c08:	6033      	strmi	r3, [r6, #0]
 8000c0a:	6825      	ldr	r5, [r4, #0]
 8000c0c:	f015 0506 	ands.w	r5, r5, #6
 8000c10:	d106      	bne.n	8000c20 <_printf_common+0x48>
 8000c12:	f104 0a19 	add.w	sl, r4, #25
 8000c16:	68e3      	ldr	r3, [r4, #12]
 8000c18:	6832      	ldr	r2, [r6, #0]
 8000c1a:	1a9b      	subs	r3, r3, r2
 8000c1c:	42ab      	cmp	r3, r5
 8000c1e:	dc28      	bgt.n	8000c72 <_printf_common+0x9a>
 8000c20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000c24:	1e13      	subs	r3, r2, #0
 8000c26:	6822      	ldr	r2, [r4, #0]
 8000c28:	bf18      	it	ne
 8000c2a:	2301      	movne	r3, #1
 8000c2c:	0692      	lsls	r2, r2, #26
 8000c2e:	d42d      	bmi.n	8000c8c <_printf_common+0xb4>
 8000c30:	4649      	mov	r1, r9
 8000c32:	4638      	mov	r0, r7
 8000c34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c38:	47c0      	blx	r8
 8000c3a:	3001      	adds	r0, #1
 8000c3c:	d020      	beq.n	8000c80 <_printf_common+0xa8>
 8000c3e:	6823      	ldr	r3, [r4, #0]
 8000c40:	68e5      	ldr	r5, [r4, #12]
 8000c42:	f003 0306 	and.w	r3, r3, #6
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf18      	it	ne
 8000c4a:	2500      	movne	r5, #0
 8000c4c:	6832      	ldr	r2, [r6, #0]
 8000c4e:	f04f 0600 	mov.w	r6, #0
 8000c52:	68a3      	ldr	r3, [r4, #8]
 8000c54:	bf08      	it	eq
 8000c56:	1aad      	subeq	r5, r5, r2
 8000c58:	6922      	ldr	r2, [r4, #16]
 8000c5a:	bf08      	it	eq
 8000c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c60:	4293      	cmp	r3, r2
 8000c62:	bfc4      	itt	gt
 8000c64:	1a9b      	subgt	r3, r3, r2
 8000c66:	18ed      	addgt	r5, r5, r3
 8000c68:	341a      	adds	r4, #26
 8000c6a:	42b5      	cmp	r5, r6
 8000c6c:	d11a      	bne.n	8000ca4 <_printf_common+0xcc>
 8000c6e:	2000      	movs	r0, #0
 8000c70:	e008      	b.n	8000c84 <_printf_common+0xac>
 8000c72:	2301      	movs	r3, #1
 8000c74:	4652      	mov	r2, sl
 8000c76:	4649      	mov	r1, r9
 8000c78:	4638      	mov	r0, r7
 8000c7a:	47c0      	blx	r8
 8000c7c:	3001      	adds	r0, #1
 8000c7e:	d103      	bne.n	8000c88 <_printf_common+0xb0>
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c88:	3501      	adds	r5, #1
 8000c8a:	e7c4      	b.n	8000c16 <_printf_common+0x3e>
 8000c8c:	2030      	movs	r0, #48	; 0x30
 8000c8e:	18e1      	adds	r1, r4, r3
 8000c90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000c94:	1c5a      	adds	r2, r3, #1
 8000c96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000c9a:	4422      	add	r2, r4
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000ca2:	e7c5      	b.n	8000c30 <_printf_common+0x58>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	4622      	mov	r2, r4
 8000ca8:	4649      	mov	r1, r9
 8000caa:	4638      	mov	r0, r7
 8000cac:	47c0      	blx	r8
 8000cae:	3001      	adds	r0, #1
 8000cb0:	d0e6      	beq.n	8000c80 <_printf_common+0xa8>
 8000cb2:	3601      	adds	r6, #1
 8000cb4:	e7d9      	b.n	8000c6a <_printf_common+0x92>
	...

08000cb8 <_printf_i>:
 8000cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	7e0f      	ldrb	r7, [r1, #24]
 8000cbe:	4691      	mov	r9, r2
 8000cc0:	2f78      	cmp	r7, #120	; 0x78
 8000cc2:	4680      	mov	r8, r0
 8000cc4:	460c      	mov	r4, r1
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000cca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000cce:	d807      	bhi.n	8000ce0 <_printf_i+0x28>
 8000cd0:	2f62      	cmp	r7, #98	; 0x62
 8000cd2:	d80a      	bhi.n	8000cea <_printf_i+0x32>
 8000cd4:	2f00      	cmp	r7, #0
 8000cd6:	f000 80d9 	beq.w	8000e8c <_printf_i+0x1d4>
 8000cda:	2f58      	cmp	r7, #88	; 0x58
 8000cdc:	f000 80a4 	beq.w	8000e28 <_printf_i+0x170>
 8000ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ce4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ce8:	e03a      	b.n	8000d60 <_printf_i+0xa8>
 8000cea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000cee:	2b15      	cmp	r3, #21
 8000cf0:	d8f6      	bhi.n	8000ce0 <_printf_i+0x28>
 8000cf2:	a101      	add	r1, pc, #4	; (adr r1, 8000cf8 <_printf_i+0x40>)
 8000cf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000cf8:	08000d51 	.word	0x08000d51
 8000cfc:	08000d65 	.word	0x08000d65
 8000d00:	08000ce1 	.word	0x08000ce1
 8000d04:	08000ce1 	.word	0x08000ce1
 8000d08:	08000ce1 	.word	0x08000ce1
 8000d0c:	08000ce1 	.word	0x08000ce1
 8000d10:	08000d65 	.word	0x08000d65
 8000d14:	08000ce1 	.word	0x08000ce1
 8000d18:	08000ce1 	.word	0x08000ce1
 8000d1c:	08000ce1 	.word	0x08000ce1
 8000d20:	08000ce1 	.word	0x08000ce1
 8000d24:	08000e73 	.word	0x08000e73
 8000d28:	08000d95 	.word	0x08000d95
 8000d2c:	08000e55 	.word	0x08000e55
 8000d30:	08000ce1 	.word	0x08000ce1
 8000d34:	08000ce1 	.word	0x08000ce1
 8000d38:	08000e95 	.word	0x08000e95
 8000d3c:	08000ce1 	.word	0x08000ce1
 8000d40:	08000d95 	.word	0x08000d95
 8000d44:	08000ce1 	.word	0x08000ce1
 8000d48:	08000ce1 	.word	0x08000ce1
 8000d4c:	08000e5d 	.word	0x08000e5d
 8000d50:	682b      	ldr	r3, [r5, #0]
 8000d52:	1d1a      	adds	r2, r3, #4
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	602a      	str	r2, [r5, #0]
 8000d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000d60:	2301      	movs	r3, #1
 8000d62:	e0a4      	b.n	8000eae <_printf_i+0x1f6>
 8000d64:	6820      	ldr	r0, [r4, #0]
 8000d66:	6829      	ldr	r1, [r5, #0]
 8000d68:	0606      	lsls	r6, r0, #24
 8000d6a:	f101 0304 	add.w	r3, r1, #4
 8000d6e:	d50a      	bpl.n	8000d86 <_printf_i+0xce>
 8000d70:	680e      	ldr	r6, [r1, #0]
 8000d72:	602b      	str	r3, [r5, #0]
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	da03      	bge.n	8000d80 <_printf_i+0xc8>
 8000d78:	232d      	movs	r3, #45	; 0x2d
 8000d7a:	4276      	negs	r6, r6
 8000d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000d80:	230a      	movs	r3, #10
 8000d82:	485e      	ldr	r0, [pc, #376]	; (8000efc <_printf_i+0x244>)
 8000d84:	e019      	b.n	8000dba <_printf_i+0x102>
 8000d86:	680e      	ldr	r6, [r1, #0]
 8000d88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000d8c:	602b      	str	r3, [r5, #0]
 8000d8e:	bf18      	it	ne
 8000d90:	b236      	sxthne	r6, r6
 8000d92:	e7ef      	b.n	8000d74 <_printf_i+0xbc>
 8000d94:	682b      	ldr	r3, [r5, #0]
 8000d96:	6820      	ldr	r0, [r4, #0]
 8000d98:	1d19      	adds	r1, r3, #4
 8000d9a:	6029      	str	r1, [r5, #0]
 8000d9c:	0601      	lsls	r1, r0, #24
 8000d9e:	d501      	bpl.n	8000da4 <_printf_i+0xec>
 8000da0:	681e      	ldr	r6, [r3, #0]
 8000da2:	e002      	b.n	8000daa <_printf_i+0xf2>
 8000da4:	0646      	lsls	r6, r0, #25
 8000da6:	d5fb      	bpl.n	8000da0 <_printf_i+0xe8>
 8000da8:	881e      	ldrh	r6, [r3, #0]
 8000daa:	2f6f      	cmp	r7, #111	; 0x6f
 8000dac:	bf0c      	ite	eq
 8000dae:	2308      	moveq	r3, #8
 8000db0:	230a      	movne	r3, #10
 8000db2:	4852      	ldr	r0, [pc, #328]	; (8000efc <_printf_i+0x244>)
 8000db4:	2100      	movs	r1, #0
 8000db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000dba:	6865      	ldr	r5, [r4, #4]
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	bfa8      	it	ge
 8000dc0:	6821      	ldrge	r1, [r4, #0]
 8000dc2:	60a5      	str	r5, [r4, #8]
 8000dc4:	bfa4      	itt	ge
 8000dc6:	f021 0104 	bicge.w	r1, r1, #4
 8000dca:	6021      	strge	r1, [r4, #0]
 8000dcc:	b90e      	cbnz	r6, 8000dd2 <_printf_i+0x11a>
 8000dce:	2d00      	cmp	r5, #0
 8000dd0:	d04d      	beq.n	8000e6e <_printf_i+0x1b6>
 8000dd2:	4615      	mov	r5, r2
 8000dd4:	fbb6 f1f3 	udiv	r1, r6, r3
 8000dd8:	fb03 6711 	mls	r7, r3, r1, r6
 8000ddc:	5dc7      	ldrb	r7, [r0, r7]
 8000dde:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000de2:	4637      	mov	r7, r6
 8000de4:	42bb      	cmp	r3, r7
 8000de6:	460e      	mov	r6, r1
 8000de8:	d9f4      	bls.n	8000dd4 <_printf_i+0x11c>
 8000dea:	2b08      	cmp	r3, #8
 8000dec:	d10b      	bne.n	8000e06 <_printf_i+0x14e>
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	07de      	lsls	r6, r3, #31
 8000df2:	d508      	bpl.n	8000e06 <_printf_i+0x14e>
 8000df4:	6923      	ldr	r3, [r4, #16]
 8000df6:	6861      	ldr	r1, [r4, #4]
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	bfde      	ittt	le
 8000dfc:	2330      	movle	r3, #48	; 0x30
 8000dfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000e02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000e06:	1b52      	subs	r2, r2, r5
 8000e08:	6122      	str	r2, [r4, #16]
 8000e0a:	464b      	mov	r3, r9
 8000e0c:	4621      	mov	r1, r4
 8000e0e:	4640      	mov	r0, r8
 8000e10:	f8cd a000 	str.w	sl, [sp]
 8000e14:	aa03      	add	r2, sp, #12
 8000e16:	f7ff fedf 	bl	8000bd8 <_printf_common>
 8000e1a:	3001      	adds	r0, #1
 8000e1c:	d14c      	bne.n	8000eb8 <_printf_i+0x200>
 8000e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e22:	b004      	add	sp, #16
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	4834      	ldr	r0, [pc, #208]	; (8000efc <_printf_i+0x244>)
 8000e2a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000e2e:	6829      	ldr	r1, [r5, #0]
 8000e30:	6823      	ldr	r3, [r4, #0]
 8000e32:	f851 6b04 	ldr.w	r6, [r1], #4
 8000e36:	6029      	str	r1, [r5, #0]
 8000e38:	061d      	lsls	r5, r3, #24
 8000e3a:	d514      	bpl.n	8000e66 <_printf_i+0x1ae>
 8000e3c:	07df      	lsls	r7, r3, #31
 8000e3e:	bf44      	itt	mi
 8000e40:	f043 0320 	orrmi.w	r3, r3, #32
 8000e44:	6023      	strmi	r3, [r4, #0]
 8000e46:	b91e      	cbnz	r6, 8000e50 <_printf_i+0x198>
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	f023 0320 	bic.w	r3, r3, #32
 8000e4e:	6023      	str	r3, [r4, #0]
 8000e50:	2310      	movs	r3, #16
 8000e52:	e7af      	b.n	8000db4 <_printf_i+0xfc>
 8000e54:	6823      	ldr	r3, [r4, #0]
 8000e56:	f043 0320 	orr.w	r3, r3, #32
 8000e5a:	6023      	str	r3, [r4, #0]
 8000e5c:	2378      	movs	r3, #120	; 0x78
 8000e5e:	4828      	ldr	r0, [pc, #160]	; (8000f00 <_printf_i+0x248>)
 8000e60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000e64:	e7e3      	b.n	8000e2e <_printf_i+0x176>
 8000e66:	0659      	lsls	r1, r3, #25
 8000e68:	bf48      	it	mi
 8000e6a:	b2b6      	uxthmi	r6, r6
 8000e6c:	e7e6      	b.n	8000e3c <_printf_i+0x184>
 8000e6e:	4615      	mov	r5, r2
 8000e70:	e7bb      	b.n	8000dea <_printf_i+0x132>
 8000e72:	682b      	ldr	r3, [r5, #0]
 8000e74:	6826      	ldr	r6, [r4, #0]
 8000e76:	1d18      	adds	r0, r3, #4
 8000e78:	6961      	ldr	r1, [r4, #20]
 8000e7a:	6028      	str	r0, [r5, #0]
 8000e7c:	0635      	lsls	r5, r6, #24
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	d501      	bpl.n	8000e86 <_printf_i+0x1ce>
 8000e82:	6019      	str	r1, [r3, #0]
 8000e84:	e002      	b.n	8000e8c <_printf_i+0x1d4>
 8000e86:	0670      	lsls	r0, r6, #25
 8000e88:	d5fb      	bpl.n	8000e82 <_printf_i+0x1ca>
 8000e8a:	8019      	strh	r1, [r3, #0]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	4615      	mov	r5, r2
 8000e90:	6123      	str	r3, [r4, #16]
 8000e92:	e7ba      	b.n	8000e0a <_printf_i+0x152>
 8000e94:	682b      	ldr	r3, [r5, #0]
 8000e96:	2100      	movs	r1, #0
 8000e98:	1d1a      	adds	r2, r3, #4
 8000e9a:	602a      	str	r2, [r5, #0]
 8000e9c:	681d      	ldr	r5, [r3, #0]
 8000e9e:	6862      	ldr	r2, [r4, #4]
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	f000 fa9b 	bl	80013dc <memchr>
 8000ea6:	b108      	cbz	r0, 8000eac <_printf_i+0x1f4>
 8000ea8:	1b40      	subs	r0, r0, r5
 8000eaa:	6060      	str	r0, [r4, #4]
 8000eac:	6863      	ldr	r3, [r4, #4]
 8000eae:	6123      	str	r3, [r4, #16]
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000eb6:	e7a8      	b.n	8000e0a <_printf_i+0x152>
 8000eb8:	462a      	mov	r2, r5
 8000eba:	4649      	mov	r1, r9
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	6923      	ldr	r3, [r4, #16]
 8000ec0:	47d0      	blx	sl
 8000ec2:	3001      	adds	r0, #1
 8000ec4:	d0ab      	beq.n	8000e1e <_printf_i+0x166>
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	079b      	lsls	r3, r3, #30
 8000eca:	d413      	bmi.n	8000ef4 <_printf_i+0x23c>
 8000ecc:	68e0      	ldr	r0, [r4, #12]
 8000ece:	9b03      	ldr	r3, [sp, #12]
 8000ed0:	4298      	cmp	r0, r3
 8000ed2:	bfb8      	it	lt
 8000ed4:	4618      	movlt	r0, r3
 8000ed6:	e7a4      	b.n	8000e22 <_printf_i+0x16a>
 8000ed8:	2301      	movs	r3, #1
 8000eda:	4632      	mov	r2, r6
 8000edc:	4649      	mov	r1, r9
 8000ede:	4640      	mov	r0, r8
 8000ee0:	47d0      	blx	sl
 8000ee2:	3001      	adds	r0, #1
 8000ee4:	d09b      	beq.n	8000e1e <_printf_i+0x166>
 8000ee6:	3501      	adds	r5, #1
 8000ee8:	68e3      	ldr	r3, [r4, #12]
 8000eea:	9903      	ldr	r1, [sp, #12]
 8000eec:	1a5b      	subs	r3, r3, r1
 8000eee:	42ab      	cmp	r3, r5
 8000ef0:	dcf2      	bgt.n	8000ed8 <_printf_i+0x220>
 8000ef2:	e7eb      	b.n	8000ecc <_printf_i+0x214>
 8000ef4:	2500      	movs	r5, #0
 8000ef6:	f104 0619 	add.w	r6, r4, #25
 8000efa:	e7f5      	b.n	8000ee8 <_printf_i+0x230>
 8000efc:	080015a9 	.word	0x080015a9
 8000f00:	080015ba 	.word	0x080015ba

08000f04 <_sbrk_r>:
 8000f04:	b538      	push	{r3, r4, r5, lr}
 8000f06:	2300      	movs	r3, #0
 8000f08:	4d05      	ldr	r5, [pc, #20]	; (8000f20 <_sbrk_r+0x1c>)
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	602b      	str	r3, [r5, #0]
 8000f10:	f7ff fa20 	bl	8000354 <_sbrk>
 8000f14:	1c43      	adds	r3, r0, #1
 8000f16:	d102      	bne.n	8000f1e <_sbrk_r+0x1a>
 8000f18:	682b      	ldr	r3, [r5, #0]
 8000f1a:	b103      	cbz	r3, 8000f1e <_sbrk_r+0x1a>
 8000f1c:	6023      	str	r3, [r4, #0]
 8000f1e:	bd38      	pop	{r3, r4, r5, pc}
 8000f20:	2000009c 	.word	0x2000009c

08000f24 <__sread>:
 8000f24:	b510      	push	{r4, lr}
 8000f26:	460c      	mov	r4, r1
 8000f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f2c:	f000 fab8 	bl	80014a0 <_read_r>
 8000f30:	2800      	cmp	r0, #0
 8000f32:	bfab      	itete	ge
 8000f34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f36:	89a3      	ldrhlt	r3, [r4, #12]
 8000f38:	181b      	addge	r3, r3, r0
 8000f3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f3e:	bfac      	ite	ge
 8000f40:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f42:	81a3      	strhlt	r3, [r4, #12]
 8000f44:	bd10      	pop	{r4, pc}

08000f46 <__swrite>:
 8000f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f4a:	461f      	mov	r7, r3
 8000f4c:	898b      	ldrh	r3, [r1, #12]
 8000f4e:	4605      	mov	r5, r0
 8000f50:	05db      	lsls	r3, r3, #23
 8000f52:	460c      	mov	r4, r1
 8000f54:	4616      	mov	r6, r2
 8000f56:	d505      	bpl.n	8000f64 <__swrite+0x1e>
 8000f58:	2302      	movs	r3, #2
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f60:	f000 f9c4 	bl	80012ec <_lseek_r>
 8000f64:	89a3      	ldrh	r3, [r4, #12]
 8000f66:	4632      	mov	r2, r6
 8000f68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f6c:	81a3      	strh	r3, [r4, #12]
 8000f6e:	4628      	mov	r0, r5
 8000f70:	463b      	mov	r3, r7
 8000f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f7a:	f000 b869 	b.w	8001050 <_write_r>

08000f7e <__sseek>:
 8000f7e:	b510      	push	{r4, lr}
 8000f80:	460c      	mov	r4, r1
 8000f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f86:	f000 f9b1 	bl	80012ec <_lseek_r>
 8000f8a:	1c43      	adds	r3, r0, #1
 8000f8c:	89a3      	ldrh	r3, [r4, #12]
 8000f8e:	bf15      	itete	ne
 8000f90:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f9a:	81a3      	strheq	r3, [r4, #12]
 8000f9c:	bf18      	it	ne
 8000f9e:	81a3      	strhne	r3, [r4, #12]
 8000fa0:	bd10      	pop	{r4, pc}

08000fa2 <__sclose>:
 8000fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fa6:	f000 b8d3 	b.w	8001150 <_close_r>
	...

08000fac <__swbuf_r>:
 8000fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fae:	460e      	mov	r6, r1
 8000fb0:	4614      	mov	r4, r2
 8000fb2:	4605      	mov	r5, r0
 8000fb4:	b118      	cbz	r0, 8000fbe <__swbuf_r+0x12>
 8000fb6:	6983      	ldr	r3, [r0, #24]
 8000fb8:	b90b      	cbnz	r3, 8000fbe <__swbuf_r+0x12>
 8000fba:	f7ff fb81 	bl	80006c0 <__sinit>
 8000fbe:	4b21      	ldr	r3, [pc, #132]	; (8001044 <__swbuf_r+0x98>)
 8000fc0:	429c      	cmp	r4, r3
 8000fc2:	d12b      	bne.n	800101c <__swbuf_r+0x70>
 8000fc4:	686c      	ldr	r4, [r5, #4]
 8000fc6:	69a3      	ldr	r3, [r4, #24]
 8000fc8:	60a3      	str	r3, [r4, #8]
 8000fca:	89a3      	ldrh	r3, [r4, #12]
 8000fcc:	071a      	lsls	r2, r3, #28
 8000fce:	d52f      	bpl.n	8001030 <__swbuf_r+0x84>
 8000fd0:	6923      	ldr	r3, [r4, #16]
 8000fd2:	b36b      	cbz	r3, 8001030 <__swbuf_r+0x84>
 8000fd4:	6923      	ldr	r3, [r4, #16]
 8000fd6:	6820      	ldr	r0, [r4, #0]
 8000fd8:	b2f6      	uxtb	r6, r6
 8000fda:	1ac0      	subs	r0, r0, r3
 8000fdc:	6963      	ldr	r3, [r4, #20]
 8000fde:	4637      	mov	r7, r6
 8000fe0:	4283      	cmp	r3, r0
 8000fe2:	dc04      	bgt.n	8000fee <__swbuf_r+0x42>
 8000fe4:	4621      	mov	r1, r4
 8000fe6:	4628      	mov	r0, r5
 8000fe8:	f000 f944 	bl	8001274 <_fflush_r>
 8000fec:	bb30      	cbnz	r0, 800103c <__swbuf_r+0x90>
 8000fee:	68a3      	ldr	r3, [r4, #8]
 8000ff0:	3001      	adds	r0, #1
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	60a3      	str	r3, [r4, #8]
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	6022      	str	r2, [r4, #0]
 8000ffc:	701e      	strb	r6, [r3, #0]
 8000ffe:	6963      	ldr	r3, [r4, #20]
 8001000:	4283      	cmp	r3, r0
 8001002:	d004      	beq.n	800100e <__swbuf_r+0x62>
 8001004:	89a3      	ldrh	r3, [r4, #12]
 8001006:	07db      	lsls	r3, r3, #31
 8001008:	d506      	bpl.n	8001018 <__swbuf_r+0x6c>
 800100a:	2e0a      	cmp	r6, #10
 800100c:	d104      	bne.n	8001018 <__swbuf_r+0x6c>
 800100e:	4621      	mov	r1, r4
 8001010:	4628      	mov	r0, r5
 8001012:	f000 f92f 	bl	8001274 <_fflush_r>
 8001016:	b988      	cbnz	r0, 800103c <__swbuf_r+0x90>
 8001018:	4638      	mov	r0, r7
 800101a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <__swbuf_r+0x9c>)
 800101e:	429c      	cmp	r4, r3
 8001020:	d101      	bne.n	8001026 <__swbuf_r+0x7a>
 8001022:	68ac      	ldr	r4, [r5, #8]
 8001024:	e7cf      	b.n	8000fc6 <__swbuf_r+0x1a>
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <__swbuf_r+0xa0>)
 8001028:	429c      	cmp	r4, r3
 800102a:	bf08      	it	eq
 800102c:	68ec      	ldreq	r4, [r5, #12]
 800102e:	e7ca      	b.n	8000fc6 <__swbuf_r+0x1a>
 8001030:	4621      	mov	r1, r4
 8001032:	4628      	mov	r0, r5
 8001034:	f000 f81e 	bl	8001074 <__swsetup_r>
 8001038:	2800      	cmp	r0, #0
 800103a:	d0cb      	beq.n	8000fd4 <__swbuf_r+0x28>
 800103c:	f04f 37ff 	mov.w	r7, #4294967295
 8001040:	e7ea      	b.n	8001018 <__swbuf_r+0x6c>
 8001042:	bf00      	nop
 8001044:	08001558 	.word	0x08001558
 8001048:	08001578 	.word	0x08001578
 800104c:	08001538 	.word	0x08001538

08001050 <_write_r>:
 8001050:	b538      	push	{r3, r4, r5, lr}
 8001052:	4604      	mov	r4, r0
 8001054:	4608      	mov	r0, r1
 8001056:	4611      	mov	r1, r2
 8001058:	2200      	movs	r2, #0
 800105a:	4d05      	ldr	r5, [pc, #20]	; (8001070 <_write_r+0x20>)
 800105c:	602a      	str	r2, [r5, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	f7ff f92c 	bl	80002bc <_write>
 8001064:	1c43      	adds	r3, r0, #1
 8001066:	d102      	bne.n	800106e <_write_r+0x1e>
 8001068:	682b      	ldr	r3, [r5, #0]
 800106a:	b103      	cbz	r3, 800106e <_write_r+0x1e>
 800106c:	6023      	str	r3, [r4, #0]
 800106e:	bd38      	pop	{r3, r4, r5, pc}
 8001070:	2000009c 	.word	0x2000009c

08001074 <__swsetup_r>:
 8001074:	4b32      	ldr	r3, [pc, #200]	; (8001140 <__swsetup_r+0xcc>)
 8001076:	b570      	push	{r4, r5, r6, lr}
 8001078:	681d      	ldr	r5, [r3, #0]
 800107a:	4606      	mov	r6, r0
 800107c:	460c      	mov	r4, r1
 800107e:	b125      	cbz	r5, 800108a <__swsetup_r+0x16>
 8001080:	69ab      	ldr	r3, [r5, #24]
 8001082:	b913      	cbnz	r3, 800108a <__swsetup_r+0x16>
 8001084:	4628      	mov	r0, r5
 8001086:	f7ff fb1b 	bl	80006c0 <__sinit>
 800108a:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <__swsetup_r+0xd0>)
 800108c:	429c      	cmp	r4, r3
 800108e:	d10f      	bne.n	80010b0 <__swsetup_r+0x3c>
 8001090:	686c      	ldr	r4, [r5, #4]
 8001092:	89a3      	ldrh	r3, [r4, #12]
 8001094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001098:	0719      	lsls	r1, r3, #28
 800109a:	d42c      	bmi.n	80010f6 <__swsetup_r+0x82>
 800109c:	06dd      	lsls	r5, r3, #27
 800109e:	d411      	bmi.n	80010c4 <__swsetup_r+0x50>
 80010a0:	2309      	movs	r3, #9
 80010a2:	6033      	str	r3, [r6, #0]
 80010a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	81a3      	strh	r3, [r4, #12]
 80010ae:	e03e      	b.n	800112e <__swsetup_r+0xba>
 80010b0:	4b25      	ldr	r3, [pc, #148]	; (8001148 <__swsetup_r+0xd4>)
 80010b2:	429c      	cmp	r4, r3
 80010b4:	d101      	bne.n	80010ba <__swsetup_r+0x46>
 80010b6:	68ac      	ldr	r4, [r5, #8]
 80010b8:	e7eb      	b.n	8001092 <__swsetup_r+0x1e>
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <__swsetup_r+0xd8>)
 80010bc:	429c      	cmp	r4, r3
 80010be:	bf08      	it	eq
 80010c0:	68ec      	ldreq	r4, [r5, #12]
 80010c2:	e7e6      	b.n	8001092 <__swsetup_r+0x1e>
 80010c4:	0758      	lsls	r0, r3, #29
 80010c6:	d512      	bpl.n	80010ee <__swsetup_r+0x7a>
 80010c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010ca:	b141      	cbz	r1, 80010de <__swsetup_r+0x6a>
 80010cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80010d0:	4299      	cmp	r1, r3
 80010d2:	d002      	beq.n	80010da <__swsetup_r+0x66>
 80010d4:	4630      	mov	r0, r6
 80010d6:	f000 f99b 	bl	8001410 <_free_r>
 80010da:	2300      	movs	r3, #0
 80010dc:	6363      	str	r3, [r4, #52]	; 0x34
 80010de:	89a3      	ldrh	r3, [r4, #12]
 80010e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80010e4:	81a3      	strh	r3, [r4, #12]
 80010e6:	2300      	movs	r3, #0
 80010e8:	6063      	str	r3, [r4, #4]
 80010ea:	6923      	ldr	r3, [r4, #16]
 80010ec:	6023      	str	r3, [r4, #0]
 80010ee:	89a3      	ldrh	r3, [r4, #12]
 80010f0:	f043 0308 	orr.w	r3, r3, #8
 80010f4:	81a3      	strh	r3, [r4, #12]
 80010f6:	6923      	ldr	r3, [r4, #16]
 80010f8:	b94b      	cbnz	r3, 800110e <__swsetup_r+0x9a>
 80010fa:	89a3      	ldrh	r3, [r4, #12]
 80010fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001104:	d003      	beq.n	800110e <__swsetup_r+0x9a>
 8001106:	4621      	mov	r1, r4
 8001108:	4630      	mov	r0, r6
 800110a:	f000 f927 	bl	800135c <__smakebuf_r>
 800110e:	89a0      	ldrh	r0, [r4, #12]
 8001110:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001114:	f010 0301 	ands.w	r3, r0, #1
 8001118:	d00a      	beq.n	8001130 <__swsetup_r+0xbc>
 800111a:	2300      	movs	r3, #0
 800111c:	60a3      	str	r3, [r4, #8]
 800111e:	6963      	ldr	r3, [r4, #20]
 8001120:	425b      	negs	r3, r3
 8001122:	61a3      	str	r3, [r4, #24]
 8001124:	6923      	ldr	r3, [r4, #16]
 8001126:	b943      	cbnz	r3, 800113a <__swsetup_r+0xc6>
 8001128:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800112c:	d1ba      	bne.n	80010a4 <__swsetup_r+0x30>
 800112e:	bd70      	pop	{r4, r5, r6, pc}
 8001130:	0781      	lsls	r1, r0, #30
 8001132:	bf58      	it	pl
 8001134:	6963      	ldrpl	r3, [r4, #20]
 8001136:	60a3      	str	r3, [r4, #8]
 8001138:	e7f4      	b.n	8001124 <__swsetup_r+0xb0>
 800113a:	2000      	movs	r0, #0
 800113c:	e7f7      	b.n	800112e <__swsetup_r+0xba>
 800113e:	bf00      	nop
 8001140:	20000004 	.word	0x20000004
 8001144:	08001558 	.word	0x08001558
 8001148:	08001578 	.word	0x08001578
 800114c:	08001538 	.word	0x08001538

08001150 <_close_r>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	2300      	movs	r3, #0
 8001154:	4d05      	ldr	r5, [pc, #20]	; (800116c <_close_r+0x1c>)
 8001156:	4604      	mov	r4, r0
 8001158:	4608      	mov	r0, r1
 800115a:	602b      	str	r3, [r5, #0]
 800115c:	f7ff f8ca 	bl	80002f4 <_close>
 8001160:	1c43      	adds	r3, r0, #1
 8001162:	d102      	bne.n	800116a <_close_r+0x1a>
 8001164:	682b      	ldr	r3, [r5, #0]
 8001166:	b103      	cbz	r3, 800116a <_close_r+0x1a>
 8001168:	6023      	str	r3, [r4, #0]
 800116a:	bd38      	pop	{r3, r4, r5, pc}
 800116c:	2000009c 	.word	0x2000009c

08001170 <__sflush_r>:
 8001170:	898a      	ldrh	r2, [r1, #12]
 8001172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001174:	4605      	mov	r5, r0
 8001176:	0710      	lsls	r0, r2, #28
 8001178:	460c      	mov	r4, r1
 800117a:	d457      	bmi.n	800122c <__sflush_r+0xbc>
 800117c:	684b      	ldr	r3, [r1, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	dc04      	bgt.n	800118c <__sflush_r+0x1c>
 8001182:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001184:	2b00      	cmp	r3, #0
 8001186:	dc01      	bgt.n	800118c <__sflush_r+0x1c>
 8001188:	2000      	movs	r0, #0
 800118a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800118c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800118e:	2e00      	cmp	r6, #0
 8001190:	d0fa      	beq.n	8001188 <__sflush_r+0x18>
 8001192:	2300      	movs	r3, #0
 8001194:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001198:	682f      	ldr	r7, [r5, #0]
 800119a:	602b      	str	r3, [r5, #0]
 800119c:	d032      	beq.n	8001204 <__sflush_r+0x94>
 800119e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011a0:	89a3      	ldrh	r3, [r4, #12]
 80011a2:	075a      	lsls	r2, r3, #29
 80011a4:	d505      	bpl.n	80011b2 <__sflush_r+0x42>
 80011a6:	6863      	ldr	r3, [r4, #4]
 80011a8:	1ac0      	subs	r0, r0, r3
 80011aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011ac:	b10b      	cbz	r3, 80011b2 <__sflush_r+0x42>
 80011ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011b0:	1ac0      	subs	r0, r0, r3
 80011b2:	2300      	movs	r3, #0
 80011b4:	4602      	mov	r2, r0
 80011b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011b8:	4628      	mov	r0, r5
 80011ba:	6a21      	ldr	r1, [r4, #32]
 80011bc:	47b0      	blx	r6
 80011be:	1c43      	adds	r3, r0, #1
 80011c0:	89a3      	ldrh	r3, [r4, #12]
 80011c2:	d106      	bne.n	80011d2 <__sflush_r+0x62>
 80011c4:	6829      	ldr	r1, [r5, #0]
 80011c6:	291d      	cmp	r1, #29
 80011c8:	d82c      	bhi.n	8001224 <__sflush_r+0xb4>
 80011ca:	4a29      	ldr	r2, [pc, #164]	; (8001270 <__sflush_r+0x100>)
 80011cc:	40ca      	lsrs	r2, r1
 80011ce:	07d6      	lsls	r6, r2, #31
 80011d0:	d528      	bpl.n	8001224 <__sflush_r+0xb4>
 80011d2:	2200      	movs	r2, #0
 80011d4:	6062      	str	r2, [r4, #4]
 80011d6:	6922      	ldr	r2, [r4, #16]
 80011d8:	04d9      	lsls	r1, r3, #19
 80011da:	6022      	str	r2, [r4, #0]
 80011dc:	d504      	bpl.n	80011e8 <__sflush_r+0x78>
 80011de:	1c42      	adds	r2, r0, #1
 80011e0:	d101      	bne.n	80011e6 <__sflush_r+0x76>
 80011e2:	682b      	ldr	r3, [r5, #0]
 80011e4:	b903      	cbnz	r3, 80011e8 <__sflush_r+0x78>
 80011e6:	6560      	str	r0, [r4, #84]	; 0x54
 80011e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011ea:	602f      	str	r7, [r5, #0]
 80011ec:	2900      	cmp	r1, #0
 80011ee:	d0cb      	beq.n	8001188 <__sflush_r+0x18>
 80011f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011f4:	4299      	cmp	r1, r3
 80011f6:	d002      	beq.n	80011fe <__sflush_r+0x8e>
 80011f8:	4628      	mov	r0, r5
 80011fa:	f000 f909 	bl	8001410 <_free_r>
 80011fe:	2000      	movs	r0, #0
 8001200:	6360      	str	r0, [r4, #52]	; 0x34
 8001202:	e7c2      	b.n	800118a <__sflush_r+0x1a>
 8001204:	6a21      	ldr	r1, [r4, #32]
 8001206:	2301      	movs	r3, #1
 8001208:	4628      	mov	r0, r5
 800120a:	47b0      	blx	r6
 800120c:	1c41      	adds	r1, r0, #1
 800120e:	d1c7      	bne.n	80011a0 <__sflush_r+0x30>
 8001210:	682b      	ldr	r3, [r5, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0c4      	beq.n	80011a0 <__sflush_r+0x30>
 8001216:	2b1d      	cmp	r3, #29
 8001218:	d001      	beq.n	800121e <__sflush_r+0xae>
 800121a:	2b16      	cmp	r3, #22
 800121c:	d101      	bne.n	8001222 <__sflush_r+0xb2>
 800121e:	602f      	str	r7, [r5, #0]
 8001220:	e7b2      	b.n	8001188 <__sflush_r+0x18>
 8001222:	89a3      	ldrh	r3, [r4, #12]
 8001224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001228:	81a3      	strh	r3, [r4, #12]
 800122a:	e7ae      	b.n	800118a <__sflush_r+0x1a>
 800122c:	690f      	ldr	r7, [r1, #16]
 800122e:	2f00      	cmp	r7, #0
 8001230:	d0aa      	beq.n	8001188 <__sflush_r+0x18>
 8001232:	0793      	lsls	r3, r2, #30
 8001234:	bf18      	it	ne
 8001236:	2300      	movne	r3, #0
 8001238:	680e      	ldr	r6, [r1, #0]
 800123a:	bf08      	it	eq
 800123c:	694b      	ldreq	r3, [r1, #20]
 800123e:	1bf6      	subs	r6, r6, r7
 8001240:	600f      	str	r7, [r1, #0]
 8001242:	608b      	str	r3, [r1, #8]
 8001244:	2e00      	cmp	r6, #0
 8001246:	dd9f      	ble.n	8001188 <__sflush_r+0x18>
 8001248:	4633      	mov	r3, r6
 800124a:	463a      	mov	r2, r7
 800124c:	4628      	mov	r0, r5
 800124e:	6a21      	ldr	r1, [r4, #32]
 8001250:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001254:	47e0      	blx	ip
 8001256:	2800      	cmp	r0, #0
 8001258:	dc06      	bgt.n	8001268 <__sflush_r+0xf8>
 800125a:	89a3      	ldrh	r3, [r4, #12]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001264:	81a3      	strh	r3, [r4, #12]
 8001266:	e790      	b.n	800118a <__sflush_r+0x1a>
 8001268:	4407      	add	r7, r0
 800126a:	1a36      	subs	r6, r6, r0
 800126c:	e7ea      	b.n	8001244 <__sflush_r+0xd4>
 800126e:	bf00      	nop
 8001270:	20400001 	.word	0x20400001

08001274 <_fflush_r>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	690b      	ldr	r3, [r1, #16]
 8001278:	4605      	mov	r5, r0
 800127a:	460c      	mov	r4, r1
 800127c:	b913      	cbnz	r3, 8001284 <_fflush_r+0x10>
 800127e:	2500      	movs	r5, #0
 8001280:	4628      	mov	r0, r5
 8001282:	bd38      	pop	{r3, r4, r5, pc}
 8001284:	b118      	cbz	r0, 800128e <_fflush_r+0x1a>
 8001286:	6983      	ldr	r3, [r0, #24]
 8001288:	b90b      	cbnz	r3, 800128e <_fflush_r+0x1a>
 800128a:	f7ff fa19 	bl	80006c0 <__sinit>
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <_fflush_r+0x6c>)
 8001290:	429c      	cmp	r4, r3
 8001292:	d11b      	bne.n	80012cc <_fflush_r+0x58>
 8001294:	686c      	ldr	r4, [r5, #4]
 8001296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0ef      	beq.n	800127e <_fflush_r+0xa>
 800129e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80012a0:	07d0      	lsls	r0, r2, #31
 80012a2:	d404      	bmi.n	80012ae <_fflush_r+0x3a>
 80012a4:	0599      	lsls	r1, r3, #22
 80012a6:	d402      	bmi.n	80012ae <_fflush_r+0x3a>
 80012a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012aa:	f7ff faa7 	bl	80007fc <__retarget_lock_acquire_recursive>
 80012ae:	4628      	mov	r0, r5
 80012b0:	4621      	mov	r1, r4
 80012b2:	f7ff ff5d 	bl	8001170 <__sflush_r>
 80012b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012b8:	4605      	mov	r5, r0
 80012ba:	07da      	lsls	r2, r3, #31
 80012bc:	d4e0      	bmi.n	8001280 <_fflush_r+0xc>
 80012be:	89a3      	ldrh	r3, [r4, #12]
 80012c0:	059b      	lsls	r3, r3, #22
 80012c2:	d4dd      	bmi.n	8001280 <_fflush_r+0xc>
 80012c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012c6:	f7ff fa9a 	bl	80007fe <__retarget_lock_release_recursive>
 80012ca:	e7d9      	b.n	8001280 <_fflush_r+0xc>
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <_fflush_r+0x70>)
 80012ce:	429c      	cmp	r4, r3
 80012d0:	d101      	bne.n	80012d6 <_fflush_r+0x62>
 80012d2:	68ac      	ldr	r4, [r5, #8]
 80012d4:	e7df      	b.n	8001296 <_fflush_r+0x22>
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <_fflush_r+0x74>)
 80012d8:	429c      	cmp	r4, r3
 80012da:	bf08      	it	eq
 80012dc:	68ec      	ldreq	r4, [r5, #12]
 80012de:	e7da      	b.n	8001296 <_fflush_r+0x22>
 80012e0:	08001558 	.word	0x08001558
 80012e4:	08001578 	.word	0x08001578
 80012e8:	08001538 	.word	0x08001538

080012ec <_lseek_r>:
 80012ec:	b538      	push	{r3, r4, r5, lr}
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	2200      	movs	r2, #0
 80012f6:	4d05      	ldr	r5, [pc, #20]	; (800130c <_lseek_r+0x20>)
 80012f8:	602a      	str	r2, [r5, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	f7ff f81e 	bl	800033c <_lseek>
 8001300:	1c43      	adds	r3, r0, #1
 8001302:	d102      	bne.n	800130a <_lseek_r+0x1e>
 8001304:	682b      	ldr	r3, [r5, #0]
 8001306:	b103      	cbz	r3, 800130a <_lseek_r+0x1e>
 8001308:	6023      	str	r3, [r4, #0]
 800130a:	bd38      	pop	{r3, r4, r5, pc}
 800130c:	2000009c 	.word	0x2000009c

08001310 <__swhatbuf_r>:
 8001310:	b570      	push	{r4, r5, r6, lr}
 8001312:	460e      	mov	r6, r1
 8001314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001318:	4614      	mov	r4, r2
 800131a:	2900      	cmp	r1, #0
 800131c:	461d      	mov	r5, r3
 800131e:	b096      	sub	sp, #88	; 0x58
 8001320:	da08      	bge.n	8001334 <__swhatbuf_r+0x24>
 8001322:	2200      	movs	r2, #0
 8001324:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001328:	602a      	str	r2, [r5, #0]
 800132a:	061a      	lsls	r2, r3, #24
 800132c:	d410      	bmi.n	8001350 <__swhatbuf_r+0x40>
 800132e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001332:	e00e      	b.n	8001352 <__swhatbuf_r+0x42>
 8001334:	466a      	mov	r2, sp
 8001336:	f000 f8c5 	bl	80014c4 <_fstat_r>
 800133a:	2800      	cmp	r0, #0
 800133c:	dbf1      	blt.n	8001322 <__swhatbuf_r+0x12>
 800133e:	9a01      	ldr	r2, [sp, #4]
 8001340:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001344:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001348:	425a      	negs	r2, r3
 800134a:	415a      	adcs	r2, r3
 800134c:	602a      	str	r2, [r5, #0]
 800134e:	e7ee      	b.n	800132e <__swhatbuf_r+0x1e>
 8001350:	2340      	movs	r3, #64	; 0x40
 8001352:	2000      	movs	r0, #0
 8001354:	6023      	str	r3, [r4, #0]
 8001356:	b016      	add	sp, #88	; 0x58
 8001358:	bd70      	pop	{r4, r5, r6, pc}
	...

0800135c <__smakebuf_r>:
 800135c:	898b      	ldrh	r3, [r1, #12]
 800135e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001360:	079d      	lsls	r5, r3, #30
 8001362:	4606      	mov	r6, r0
 8001364:	460c      	mov	r4, r1
 8001366:	d507      	bpl.n	8001378 <__smakebuf_r+0x1c>
 8001368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800136c:	6023      	str	r3, [r4, #0]
 800136e:	6123      	str	r3, [r4, #16]
 8001370:	2301      	movs	r3, #1
 8001372:	6163      	str	r3, [r4, #20]
 8001374:	b002      	add	sp, #8
 8001376:	bd70      	pop	{r4, r5, r6, pc}
 8001378:	466a      	mov	r2, sp
 800137a:	ab01      	add	r3, sp, #4
 800137c:	f7ff ffc8 	bl	8001310 <__swhatbuf_r>
 8001380:	9900      	ldr	r1, [sp, #0]
 8001382:	4605      	mov	r5, r0
 8001384:	4630      	mov	r0, r6
 8001386:	f7ff fa5b 	bl	8000840 <_malloc_r>
 800138a:	b948      	cbnz	r0, 80013a0 <__smakebuf_r+0x44>
 800138c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001390:	059a      	lsls	r2, r3, #22
 8001392:	d4ef      	bmi.n	8001374 <__smakebuf_r+0x18>
 8001394:	f023 0303 	bic.w	r3, r3, #3
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	81a3      	strh	r3, [r4, #12]
 800139e:	e7e3      	b.n	8001368 <__smakebuf_r+0xc>
 80013a0:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <__smakebuf_r+0x7c>)
 80013a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80013a4:	89a3      	ldrh	r3, [r4, #12]
 80013a6:	6020      	str	r0, [r4, #0]
 80013a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ac:	81a3      	strh	r3, [r4, #12]
 80013ae:	9b00      	ldr	r3, [sp, #0]
 80013b0:	6120      	str	r0, [r4, #16]
 80013b2:	6163      	str	r3, [r4, #20]
 80013b4:	9b01      	ldr	r3, [sp, #4]
 80013b6:	b15b      	cbz	r3, 80013d0 <__smakebuf_r+0x74>
 80013b8:	4630      	mov	r0, r6
 80013ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013be:	f000 f893 	bl	80014e8 <_isatty_r>
 80013c2:	b128      	cbz	r0, 80013d0 <__smakebuf_r+0x74>
 80013c4:	89a3      	ldrh	r3, [r4, #12]
 80013c6:	f023 0303 	bic.w	r3, r3, #3
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	81a3      	strh	r3, [r4, #12]
 80013d0:	89a0      	ldrh	r0, [r4, #12]
 80013d2:	4305      	orrs	r5, r0
 80013d4:	81a5      	strh	r5, [r4, #12]
 80013d6:	e7cd      	b.n	8001374 <__smakebuf_r+0x18>
 80013d8:	08000659 	.word	0x08000659

080013dc <memchr>:
 80013dc:	4603      	mov	r3, r0
 80013de:	b510      	push	{r4, lr}
 80013e0:	b2c9      	uxtb	r1, r1
 80013e2:	4402      	add	r2, r0
 80013e4:	4293      	cmp	r3, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	d101      	bne.n	80013ee <memchr+0x12>
 80013ea:	2000      	movs	r0, #0
 80013ec:	e003      	b.n	80013f6 <memchr+0x1a>
 80013ee:	7804      	ldrb	r4, [r0, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	428c      	cmp	r4, r1
 80013f4:	d1f6      	bne.n	80013e4 <memchr+0x8>
 80013f6:	bd10      	pop	{r4, pc}

080013f8 <__malloc_lock>:
 80013f8:	4801      	ldr	r0, [pc, #4]	; (8001400 <__malloc_lock+0x8>)
 80013fa:	f7ff b9ff 	b.w	80007fc <__retarget_lock_acquire_recursive>
 80013fe:	bf00      	nop
 8001400:	20000090 	.word	0x20000090

08001404 <__malloc_unlock>:
 8001404:	4801      	ldr	r0, [pc, #4]	; (800140c <__malloc_unlock+0x8>)
 8001406:	f7ff b9fa 	b.w	80007fe <__retarget_lock_release_recursive>
 800140a:	bf00      	nop
 800140c:	20000090 	.word	0x20000090

08001410 <_free_r>:
 8001410:	b538      	push	{r3, r4, r5, lr}
 8001412:	4605      	mov	r5, r0
 8001414:	2900      	cmp	r1, #0
 8001416:	d040      	beq.n	800149a <_free_r+0x8a>
 8001418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800141c:	1f0c      	subs	r4, r1, #4
 800141e:	2b00      	cmp	r3, #0
 8001420:	bfb8      	it	lt
 8001422:	18e4      	addlt	r4, r4, r3
 8001424:	f7ff ffe8 	bl	80013f8 <__malloc_lock>
 8001428:	4a1c      	ldr	r2, [pc, #112]	; (800149c <_free_r+0x8c>)
 800142a:	6813      	ldr	r3, [r2, #0]
 800142c:	b933      	cbnz	r3, 800143c <_free_r+0x2c>
 800142e:	6063      	str	r3, [r4, #4]
 8001430:	6014      	str	r4, [r2, #0]
 8001432:	4628      	mov	r0, r5
 8001434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001438:	f7ff bfe4 	b.w	8001404 <__malloc_unlock>
 800143c:	42a3      	cmp	r3, r4
 800143e:	d908      	bls.n	8001452 <_free_r+0x42>
 8001440:	6820      	ldr	r0, [r4, #0]
 8001442:	1821      	adds	r1, r4, r0
 8001444:	428b      	cmp	r3, r1
 8001446:	bf01      	itttt	eq
 8001448:	6819      	ldreq	r1, [r3, #0]
 800144a:	685b      	ldreq	r3, [r3, #4]
 800144c:	1809      	addeq	r1, r1, r0
 800144e:	6021      	streq	r1, [r4, #0]
 8001450:	e7ed      	b.n	800142e <_free_r+0x1e>
 8001452:	461a      	mov	r2, r3
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	b10b      	cbz	r3, 800145c <_free_r+0x4c>
 8001458:	42a3      	cmp	r3, r4
 800145a:	d9fa      	bls.n	8001452 <_free_r+0x42>
 800145c:	6811      	ldr	r1, [r2, #0]
 800145e:	1850      	adds	r0, r2, r1
 8001460:	42a0      	cmp	r0, r4
 8001462:	d10b      	bne.n	800147c <_free_r+0x6c>
 8001464:	6820      	ldr	r0, [r4, #0]
 8001466:	4401      	add	r1, r0
 8001468:	1850      	adds	r0, r2, r1
 800146a:	4283      	cmp	r3, r0
 800146c:	6011      	str	r1, [r2, #0]
 800146e:	d1e0      	bne.n	8001432 <_free_r+0x22>
 8001470:	6818      	ldr	r0, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4401      	add	r1, r0
 8001476:	6011      	str	r1, [r2, #0]
 8001478:	6053      	str	r3, [r2, #4]
 800147a:	e7da      	b.n	8001432 <_free_r+0x22>
 800147c:	d902      	bls.n	8001484 <_free_r+0x74>
 800147e:	230c      	movs	r3, #12
 8001480:	602b      	str	r3, [r5, #0]
 8001482:	e7d6      	b.n	8001432 <_free_r+0x22>
 8001484:	6820      	ldr	r0, [r4, #0]
 8001486:	1821      	adds	r1, r4, r0
 8001488:	428b      	cmp	r3, r1
 800148a:	bf01      	itttt	eq
 800148c:	6819      	ldreq	r1, [r3, #0]
 800148e:	685b      	ldreq	r3, [r3, #4]
 8001490:	1809      	addeq	r1, r1, r0
 8001492:	6021      	streq	r1, [r4, #0]
 8001494:	6063      	str	r3, [r4, #4]
 8001496:	6054      	str	r4, [r2, #4]
 8001498:	e7cb      	b.n	8001432 <_free_r+0x22>
 800149a:	bd38      	pop	{r3, r4, r5, pc}
 800149c:	20000094 	.word	0x20000094

080014a0 <_read_r>:
 80014a0:	b538      	push	{r3, r4, r5, lr}
 80014a2:	4604      	mov	r4, r0
 80014a4:	4608      	mov	r0, r1
 80014a6:	4611      	mov	r1, r2
 80014a8:	2200      	movs	r2, #0
 80014aa:	4d05      	ldr	r5, [pc, #20]	; (80014c0 <_read_r+0x20>)
 80014ac:	602a      	str	r2, [r5, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	f7fe fee7 	bl	8000282 <_read>
 80014b4:	1c43      	adds	r3, r0, #1
 80014b6:	d102      	bne.n	80014be <_read_r+0x1e>
 80014b8:	682b      	ldr	r3, [r5, #0]
 80014ba:	b103      	cbz	r3, 80014be <_read_r+0x1e>
 80014bc:	6023      	str	r3, [r4, #0]
 80014be:	bd38      	pop	{r3, r4, r5, pc}
 80014c0:	2000009c 	.word	0x2000009c

080014c4 <_fstat_r>:
 80014c4:	b538      	push	{r3, r4, r5, lr}
 80014c6:	2300      	movs	r3, #0
 80014c8:	4d06      	ldr	r5, [pc, #24]	; (80014e4 <_fstat_r+0x20>)
 80014ca:	4604      	mov	r4, r0
 80014cc:	4608      	mov	r0, r1
 80014ce:	4611      	mov	r1, r2
 80014d0:	602b      	str	r3, [r5, #0]
 80014d2:	f7fe ff1a 	bl	800030a <_fstat>
 80014d6:	1c43      	adds	r3, r0, #1
 80014d8:	d102      	bne.n	80014e0 <_fstat_r+0x1c>
 80014da:	682b      	ldr	r3, [r5, #0]
 80014dc:	b103      	cbz	r3, 80014e0 <_fstat_r+0x1c>
 80014de:	6023      	str	r3, [r4, #0]
 80014e0:	bd38      	pop	{r3, r4, r5, pc}
 80014e2:	bf00      	nop
 80014e4:	2000009c 	.word	0x2000009c

080014e8 <_isatty_r>:
 80014e8:	b538      	push	{r3, r4, r5, lr}
 80014ea:	2300      	movs	r3, #0
 80014ec:	4d05      	ldr	r5, [pc, #20]	; (8001504 <_isatty_r+0x1c>)
 80014ee:	4604      	mov	r4, r0
 80014f0:	4608      	mov	r0, r1
 80014f2:	602b      	str	r3, [r5, #0]
 80014f4:	f7fe ff18 	bl	8000328 <_isatty>
 80014f8:	1c43      	adds	r3, r0, #1
 80014fa:	d102      	bne.n	8001502 <_isatty_r+0x1a>
 80014fc:	682b      	ldr	r3, [r5, #0]
 80014fe:	b103      	cbz	r3, 8001502 <_isatty_r+0x1a>
 8001500:	6023      	str	r3, [r4, #0]
 8001502:	bd38      	pop	{r3, r4, r5, pc}
 8001504:	2000009c 	.word	0x2000009c

08001508 <_init>:
 8001508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150a:	bf00      	nop
 800150c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800150e:	bc08      	pop	{r3}
 8001510:	469e      	mov	lr, r3
 8001512:	4770      	bx	lr

08001514 <_fini>:
 8001514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001516:	bf00      	nop
 8001518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800151a:	bc08      	pop	{r3}
 800151c:	469e      	mov	lr, r3
 800151e:	4770      	bx	lr
